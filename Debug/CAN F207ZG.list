
CAN F207ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008260  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080083e4  080083e4  000183e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800843c  0800843c  00020258  2**0
                  CONTENTS
  4 .ARM          00000008  0800843c  0800843c  0001843c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008444  08008444  00020258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008444  08008444  00018444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008448  08008448  00018448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  0800844c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a3c  20000258  080086a4  00020258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c94  080086a4  00021c94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b45e  00000000  00000000  00020281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b4b  00000000  00000000  0003b6df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  0003f230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  00040468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023913  00000000  00000000  000414f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016054  00000000  00000000  00064e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c74db  00000000  00000000  0007ae5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014233a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d28  00000000  00000000  00142390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000258 	.word	0x20000258
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080083cc 	.word	0x080083cc

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	2000025c 	.word	0x2000025c
 80001c0:	080083cc 	.word	0x080083cc

080001c4 <strlen>:
 80001c4:	4603      	mov	r3, r0
 80001c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ca:	2a00      	cmp	r2, #0
 80001cc:	d1fb      	bne.n	80001c6 <strlen+0x2>
 80001ce:	1a18      	subs	r0, r3, r0
 80001d0:	3801      	subs	r0, #1
 80001d2:	4770      	bx	lr

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	468e      	mov	lr, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	f040 8083 	bne.w	800031c <__udivmoddi4+0x118>
 8000216:	428a      	cmp	r2, r1
 8000218:	4617      	mov	r7, r2
 800021a:	d947      	bls.n	80002ac <__udivmoddi4+0xa8>
 800021c:	fab2 f382 	clz	r3, r2
 8000220:	b14b      	cbz	r3, 8000236 <__udivmoddi4+0x32>
 8000222:	f1c3 0120 	rsb	r1, r3, #32
 8000226:	fa05 fe03 	lsl.w	lr, r5, r3
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	409f      	lsls	r7, r3
 8000230:	ea41 0e0e 	orr.w	lr, r1, lr
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	fbbe fcf8 	udiv	ip, lr, r8
 800023e:	fa1f f987 	uxth.w	r9, r7
 8000242:	fb08 e21c 	mls	r2, r8, ip, lr
 8000246:	fb0c f009 	mul.w	r0, ip, r9
 800024a:	0c21      	lsrs	r1, r4, #16
 800024c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x66>
 8000254:	18ba      	adds	r2, r7, r2
 8000256:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800025a:	f080 8118 	bcs.w	800048e <__udivmoddi4+0x28a>
 800025e:	4290      	cmp	r0, r2
 8000260:	f240 8115 	bls.w	800048e <__udivmoddi4+0x28a>
 8000264:	f1ac 0c02 	sub.w	ip, ip, #2
 8000268:	443a      	add	r2, r7
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	fbb2 f0f8 	udiv	r0, r2, r8
 8000270:	fb08 2210 	mls	r2, r8, r0, r2
 8000274:	fb00 f109 	mul.w	r1, r0, r9
 8000278:	b2a4      	uxth	r4, r4
 800027a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027e:	42a1      	cmp	r1, r4
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x92>
 8000282:	193c      	adds	r4, r7, r4
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000288:	f080 8103 	bcs.w	8000492 <__udivmoddi4+0x28e>
 800028c:	42a1      	cmp	r1, r4
 800028e:	f240 8100 	bls.w	8000492 <__udivmoddi4+0x28e>
 8000292:	3802      	subs	r0, #2
 8000294:	443c      	add	r4, r7
 8000296:	1a64      	subs	r4, r4, r1
 8000298:	2100      	movs	r1, #0
 800029a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	2200      	movs	r2, #0
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	e9c6 4200 	strd	r4, r2, [r6]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	b902      	cbnz	r2, 80002b0 <__udivmoddi4+0xac>
 80002ae:	deff      	udf	#255	; 0xff
 80002b0:	fab2 f382 	clz	r3, r2
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d14f      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b8:	1a8d      	subs	r5, r1, r2
 80002ba:	2101      	movs	r1, #1
 80002bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80002c0:	fa1f f882 	uxth.w	r8, r2
 80002c4:	fbb5 fcfe 	udiv	ip, r5, lr
 80002c8:	fb0e 551c 	mls	r5, lr, ip, r5
 80002cc:	fb08 f00c 	mul.w	r0, r8, ip
 80002d0:	0c22      	lsrs	r2, r4, #16
 80002d2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80002d6:	42a8      	cmp	r0, r5
 80002d8:	d907      	bls.n	80002ea <__udivmoddi4+0xe6>
 80002da:	197d      	adds	r5, r7, r5
 80002dc:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 80002e0:	d202      	bcs.n	80002e8 <__udivmoddi4+0xe4>
 80002e2:	42a8      	cmp	r0, r5
 80002e4:	f200 80e9 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 80002e8:	4694      	mov	ip, r2
 80002ea:	1a2d      	subs	r5, r5, r0
 80002ec:	fbb5 f0fe 	udiv	r0, r5, lr
 80002f0:	fb0e 5510 	mls	r5, lr, r0, r5
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	b2a4      	uxth	r4, r4
 80002fa:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fe:	45a0      	cmp	r8, r4
 8000300:	d907      	bls.n	8000312 <__udivmoddi4+0x10e>
 8000302:	193c      	adds	r4, r7, r4
 8000304:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x10c>
 800030a:	45a0      	cmp	r8, r4
 800030c:	f200 80d9 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 8000310:	4610      	mov	r0, r2
 8000312:	eba4 0408 	sub.w	r4, r4, r8
 8000316:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031a:	e7c0      	b.n	800029e <__udivmoddi4+0x9a>
 800031c:	428b      	cmp	r3, r1
 800031e:	d908      	bls.n	8000332 <__udivmoddi4+0x12e>
 8000320:	2e00      	cmp	r6, #0
 8000322:	f000 80b1 	beq.w	8000488 <__udivmoddi4+0x284>
 8000326:	2100      	movs	r1, #0
 8000328:	e9c6 0500 	strd	r0, r5, [r6]
 800032c:	4608      	mov	r0, r1
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f183 	clz	r1, r3
 8000336:	2900      	cmp	r1, #0
 8000338:	d14b      	bne.n	80003d2 <__udivmoddi4+0x1ce>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b9 	bhi.w	80004b6 <__udivmoddi4+0x2b2>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb65 0303 	sbc.w	r3, r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d0aa      	beq.n	80002a8 <__udivmoddi4+0xa4>
 8000352:	e9c6 4e00 	strd	r4, lr, [r6]
 8000356:	e7a7      	b.n	80002a8 <__udivmoddi4+0xa4>
 8000358:	409f      	lsls	r7, r3
 800035a:	f1c3 0220 	rsb	r2, r3, #32
 800035e:	40d1      	lsrs	r1, r2
 8000360:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000364:	fbb1 f0fe 	udiv	r0, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000370:	fa24 f202 	lsr.w	r2, r4, r2
 8000374:	409d      	lsls	r5, r3
 8000376:	fb00 fc08 	mul.w	ip, r0, r8
 800037a:	432a      	orrs	r2, r5
 800037c:	0c15      	lsrs	r5, r2, #16
 800037e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000382:	45ac      	cmp	ip, r5
 8000384:	fa04 f403 	lsl.w	r4, r4, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x19a>
 800038a:	197d      	adds	r5, r7, r5
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000390:	f080 808f 	bcs.w	80004b2 <__udivmoddi4+0x2ae>
 8000394:	45ac      	cmp	ip, r5
 8000396:	f240 808c 	bls.w	80004b2 <__udivmoddi4+0x2ae>
 800039a:	3802      	subs	r0, #2
 800039c:	443d      	add	r5, r7
 800039e:	eba5 050c 	sub.w	r5, r5, ip
 80003a2:	fbb5 f1fe 	udiv	r1, r5, lr
 80003a6:	fb0e 5c11 	mls	ip, lr, r1, r5
 80003aa:	fb01 f908 	mul.w	r9, r1, r8
 80003ae:	b295      	uxth	r5, r2
 80003b0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003b4:	45a9      	cmp	r9, r5
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	197d      	adds	r5, r7, r5
 80003ba:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80003be:	d274      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 80003c0:	45a9      	cmp	r9, r5
 80003c2:	d972      	bls.n	80004aa <__udivmoddi4+0x2a6>
 80003c4:	3902      	subs	r1, #2
 80003c6:	443d      	add	r5, r7
 80003c8:	eba5 0509 	sub.w	r5, r5, r9
 80003cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003d0:	e778      	b.n	80002c4 <__udivmoddi4+0xc0>
 80003d2:	f1c1 0720 	rsb	r7, r1, #32
 80003d6:	408b      	lsls	r3, r1
 80003d8:	fa22 fc07 	lsr.w	ip, r2, r7
 80003dc:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e0:	fa25 f407 	lsr.w	r4, r5, r7
 80003e4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e8:	fbb4 f9fe 	udiv	r9, r4, lr
 80003ec:	fa1f f88c 	uxth.w	r8, ip
 80003f0:	fb0e 4419 	mls	r4, lr, r9, r4
 80003f4:	fa20 f307 	lsr.w	r3, r0, r7
 80003f8:	fb09 fa08 	mul.w	sl, r9, r8
 80003fc:	408d      	lsls	r5, r1
 80003fe:	431d      	orrs	r5, r3
 8000400:	0c2b      	lsrs	r3, r5, #16
 8000402:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000406:	45a2      	cmp	sl, r4
 8000408:	fa02 f201 	lsl.w	r2, r2, r1
 800040c:	fa00 f301 	lsl.w	r3, r0, r1
 8000410:	d909      	bls.n	8000426 <__udivmoddi4+0x222>
 8000412:	eb1c 0404 	adds.w	r4, ip, r4
 8000416:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800041a:	d248      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 800041c:	45a2      	cmp	sl, r4
 800041e:	d946      	bls.n	80004ae <__udivmoddi4+0x2aa>
 8000420:	f1a9 0902 	sub.w	r9, r9, #2
 8000424:	4464      	add	r4, ip
 8000426:	eba4 040a 	sub.w	r4, r4, sl
 800042a:	fbb4 f0fe 	udiv	r0, r4, lr
 800042e:	fb0e 4410 	mls	r4, lr, r0, r4
 8000432:	fb00 fa08 	mul.w	sl, r0, r8
 8000436:	b2ad      	uxth	r5, r5
 8000438:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800043c:	45a2      	cmp	sl, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x24e>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000448:	d22d      	bcs.n	80004a6 <__udivmoddi4+0x2a2>
 800044a:	45a2      	cmp	sl, r4
 800044c:	d92b      	bls.n	80004a6 <__udivmoddi4+0x2a2>
 800044e:	3802      	subs	r0, #2
 8000450:	4464      	add	r4, ip
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	eba4 040a 	sub.w	r4, r4, sl
 800045e:	454c      	cmp	r4, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	464d      	mov	r5, r9
 8000464:	d319      	bcc.n	800049a <__udivmoddi4+0x296>
 8000466:	d016      	beq.n	8000496 <__udivmoddi4+0x292>
 8000468:	b15e      	cbz	r6, 8000482 <__udivmoddi4+0x27e>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb64 0405 	sbc.w	r4, r4, r5
 8000472:	fa04 f707 	lsl.w	r7, r4, r7
 8000476:	fa22 f301 	lsr.w	r3, r2, r1
 800047a:	431f      	orrs	r7, r3
 800047c:	40cc      	lsrs	r4, r1
 800047e:	e9c6 7400 	strd	r7, r4, [r6]
 8000482:	2100      	movs	r1, #0
 8000484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000488:	4631      	mov	r1, r6
 800048a:	4630      	mov	r0, r6
 800048c:	e70c      	b.n	80002a8 <__udivmoddi4+0xa4>
 800048e:	468c      	mov	ip, r1
 8000490:	e6eb      	b.n	800026a <__udivmoddi4+0x66>
 8000492:	4610      	mov	r0, r2
 8000494:	e6ff      	b.n	8000296 <__udivmoddi4+0x92>
 8000496:	4543      	cmp	r3, r8
 8000498:	d2e6      	bcs.n	8000468 <__udivmoddi4+0x264>
 800049a:	ebb8 0e02 	subs.w	lr, r8, r2
 800049e:	eb69 050c 	sbc.w	r5, r9, ip
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7e0      	b.n	8000468 <__udivmoddi4+0x264>
 80004a6:	4628      	mov	r0, r5
 80004a8:	e7d3      	b.n	8000452 <__udivmoddi4+0x24e>
 80004aa:	4611      	mov	r1, r2
 80004ac:	e78c      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e7b9      	b.n	8000426 <__udivmoddi4+0x222>
 80004b2:	4608      	mov	r0, r1
 80004b4:	e773      	b.n	800039e <__udivmoddi4+0x19a>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e749      	b.n	800034e <__udivmoddi4+0x14a>
 80004ba:	f1ac 0c02 	sub.w	ip, ip, #2
 80004be:	443d      	add	r5, r7
 80004c0:	e713      	b.n	80002ea <__udivmoddi4+0xe6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e724      	b.n	8000312 <__udivmoddi4+0x10e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004d2:	4b27      	ldr	r3, [pc, #156]	; (8000570 <MX_CAN1_Init+0xa4>)
 80004d4:	4a27      	ldr	r2, [pc, #156]	; (8000574 <MX_CAN1_Init+0xa8>)
 80004d6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80004d8:	4b25      	ldr	r3, [pc, #148]	; (8000570 <MX_CAN1_Init+0xa4>)
 80004da:	2202      	movs	r2, #2
 80004dc:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004de:	4b24      	ldr	r3, [pc, #144]	; (8000570 <MX_CAN1_Init+0xa4>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004e4:	4b22      	ldr	r3, [pc, #136]	; (8000570 <MX_CAN1_Init+0xa4>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 80004ea:	4b21      	ldr	r3, [pc, #132]	; (8000570 <MX_CAN1_Init+0xa4>)
 80004ec:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80004f0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80004f2:	4b1f      	ldr	r3, [pc, #124]	; (8000570 <MX_CAN1_Init+0xa4>)
 80004f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80004f8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80004fa:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <MX_CAN1_Init+0xa4>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000500:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <MX_CAN1_Init+0xa4>)
 8000502:	2200      	movs	r2, #0
 8000504:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000506:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <MX_CAN1_Init+0xa4>)
 8000508:	2200      	movs	r2, #0
 800050a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <MX_CAN1_Init+0xa4>)
 800050e:	2200      	movs	r2, #0
 8000510:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <MX_CAN1_Init+0xa4>)
 8000514:	2200      	movs	r2, #0
 8000516:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <MX_CAN1_Init+0xa4>)
 800051a:	2200      	movs	r2, #0
 800051c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800051e:	4814      	ldr	r0, [pc, #80]	; (8000570 <MX_CAN1_Init+0xa4>)
 8000520:	f000 fe42 	bl	80011a8 <HAL_CAN_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800052a:	f000 fbd8 	bl	8000cde <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000532:	2300      	movs	r3, #0
 8000534:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000536:	2301      	movs	r3, #1
 8000538:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800053a:	2300      	movs	r3, #0
 800053c:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800053e:	2300      	movs	r3, #0
 8000540:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800054a:	2300      	movs	r3, #0
 800054c:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800054e:	2301      	movs	r3, #1
 8000550:	623b      	str	r3, [r7, #32]
  //sFilterConfig.SlaveStartFilterBank = 14;

  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8000552:	463b      	mov	r3, r7
 8000554:	4619      	mov	r1, r3
 8000556:	4806      	ldr	r0, [pc, #24]	; (8000570 <MX_CAN1_Init+0xa4>)
 8000558:	f000 ff22 	bl	80013a0 <HAL_CAN_ConfigFilter>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_CAN1_Init+0x9a>
    Error_Handler();
 8000562:	f000 fbbc 	bl	8000cde <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	3728      	adds	r7, #40	; 0x28
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000298 	.word	0x20000298
 8000574:	40006400 	.word	0x40006400

08000578 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a1d      	ldr	r2, [pc, #116]	; (800060c <HAL_CAN_MspInit+0x94>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d133      	bne.n	8000602 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
 800059e:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <HAL_CAN_MspInit+0x98>)
 80005a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a2:	4a1b      	ldr	r2, [pc, #108]	; (8000610 <HAL_CAN_MspInit+0x98>)
 80005a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005a8:	6413      	str	r3, [r2, #64]	; 0x40
 80005aa:	4b19      	ldr	r3, [pc, #100]	; (8000610 <HAL_CAN_MspInit+0x98>)
 80005ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <HAL_CAN_MspInit+0x98>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a14      	ldr	r2, [pc, #80]	; (8000610 <HAL_CAN_MspInit+0x98>)
 80005c0:	f043 0308 	orr.w	r3, r3, #8
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b12      	ldr	r3, [pc, #72]	; (8000610 <HAL_CAN_MspInit+0x98>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0308 	and.w	r3, r3, #8
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005d2:	2303      	movs	r3, #3
 80005d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d6:	2302      	movs	r3, #2
 80005d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005de:	2303      	movs	r3, #3
 80005e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005e2:	2309      	movs	r3, #9
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	4809      	ldr	r0, [pc, #36]	; (8000614 <HAL_CAN_MspInit+0x9c>)
 80005ee:	f001 fdc5 	bl	800217c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	2014      	movs	r0, #20
 80005f8:	f001 fd7b 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80005fc:	2014      	movs	r0, #20
 80005fe:	f001 fd94 	bl	800212a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000602:	bf00      	nop
 8000604:	3728      	adds	r7, #40	; 0x28
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40006400 	.word	0x40006400
 8000610:	40023800 	.word	0x40023800
 8000614:	40020c00 	.word	0x40020c00

08000618 <MX_GPIO_Init>:
     PD9   ------> USART3_RX
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08c      	sub	sp, #48	; 0x30
 800061c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]
 8000632:	4b79      	ldr	r3, [pc, #484]	; (8000818 <MX_GPIO_Init+0x200>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a78      	ldr	r2, [pc, #480]	; (8000818 <MX_GPIO_Init+0x200>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b76      	ldr	r3, [pc, #472]	; (8000818 <MX_GPIO_Init+0x200>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0304 	and.w	r3, r3, #4
 8000646:	61bb      	str	r3, [r7, #24]
 8000648:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	4b72      	ldr	r3, [pc, #456]	; (8000818 <MX_GPIO_Init+0x200>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a71      	ldr	r2, [pc, #452]	; (8000818 <MX_GPIO_Init+0x200>)
 8000654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b6f      	ldr	r3, [pc, #444]	; (8000818 <MX_GPIO_Init+0x200>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	4b6b      	ldr	r3, [pc, #428]	; (8000818 <MX_GPIO_Init+0x200>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a6a      	ldr	r2, [pc, #424]	; (8000818 <MX_GPIO_Init+0x200>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b68      	ldr	r3, [pc, #416]	; (8000818 <MX_GPIO_Init+0x200>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	4b64      	ldr	r3, [pc, #400]	; (8000818 <MX_GPIO_Init+0x200>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a63      	ldr	r2, [pc, #396]	; (8000818 <MX_GPIO_Init+0x200>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b61      	ldr	r3, [pc, #388]	; (8000818 <MX_GPIO_Init+0x200>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	4b5d      	ldr	r3, [pc, #372]	; (8000818 <MX_GPIO_Init+0x200>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a5c      	ldr	r2, [pc, #368]	; (8000818 <MX_GPIO_Init+0x200>)
 80006a8:	f043 0308 	orr.w	r3, r3, #8
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b5a      	ldr	r3, [pc, #360]	; (8000818 <MX_GPIO_Init+0x200>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0308 	and.w	r3, r3, #8
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b56      	ldr	r3, [pc, #344]	; (8000818 <MX_GPIO_Init+0x200>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a55      	ldr	r2, [pc, #340]	; (8000818 <MX_GPIO_Init+0x200>)
 80006c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b53      	ldr	r3, [pc, #332]	; (8000818 <MX_GPIO_Init+0x200>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f244 0181 	movw	r1, #16513	; 0x4081
 80006dc:	484f      	ldr	r0, [pc, #316]	; (800081c <MX_GPIO_Init+0x204>)
 80006de:	f001 feeb 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2140      	movs	r1, #64	; 0x40
 80006e6:	484e      	ldr	r0, [pc, #312]	; (8000820 <MX_GPIO_Init+0x208>)
 80006e8:	f001 fee6 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4619      	mov	r1, r3
 8000702:	4848      	ldr	r0, [pc, #288]	; (8000824 <MX_GPIO_Init+0x20c>)
 8000704:	f001 fd3a 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000708:	2332      	movs	r3, #50	; 0x32
 800070a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000714:	2303      	movs	r3, #3
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000718:	230b      	movs	r3, #11
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	4840      	ldr	r0, [pc, #256]	; (8000824 <MX_GPIO_Init+0x20c>)
 8000724:	f001 fd2a 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000728:	2386      	movs	r3, #134	; 0x86
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072c:	2302      	movs	r3, #2
 800072e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000734:	2303      	movs	r3, #3
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000738:	230b      	movs	r3, #11
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4619      	mov	r1, r3
 8000742:	4839      	ldr	r0, [pc, #228]	; (8000828 <MX_GPIO_Init+0x210>)
 8000744:	f001 fd1a 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000748:	f244 0381 	movw	r3, #16513	; 0x4081
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	2301      	movs	r3, #1
 8000750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	4619      	mov	r1, r3
 8000760:	482e      	ldr	r0, [pc, #184]	; (800081c <MX_GPIO_Init+0x204>)
 8000762:	f001 fd0b 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076c:	2302      	movs	r3, #2
 800076e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000774:	2303      	movs	r3, #3
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000778:	230b      	movs	r3, #11
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4619      	mov	r1, r3
 8000782:	4826      	ldr	r0, [pc, #152]	; (800081c <MX_GPIO_Init+0x204>)
 8000784:	f001 fcfa 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000788:	f44f 7340 	mov.w	r3, #768	; 0x300
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	2302      	movs	r3, #2
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000796:	2303      	movs	r3, #3
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800079a:	2307      	movs	r3, #7
 800079c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	4821      	ldr	r0, [pc, #132]	; (800082c <MX_GPIO_Init+0x214>)
 80007a6:	f001 fce9 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007aa:	2340      	movs	r3, #64	; 0x40
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4619      	mov	r1, r3
 80007c0:	4817      	ldr	r0, [pc, #92]	; (8000820 <MX_GPIO_Init+0x208>)
 80007c2:	f001 fcdb 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007c6:	2380      	movs	r3, #128	; 0x80
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	4811      	ldr	r0, [pc, #68]	; (8000820 <MX_GPIO_Init+0x208>)
 80007da:	f001 fccf 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007de:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f0:	230b      	movs	r3, #11
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4809      	ldr	r0, [pc, #36]	; (8000820 <MX_GPIO_Init+0x208>)
 80007fc:	f001 fcbe 	bl	800217c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	2028      	movs	r0, #40	; 0x28
 8000806:	f001 fc74 	bl	80020f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800080a:	2028      	movs	r0, #40	; 0x28
 800080c:	f001 fc8d 	bl	800212a <HAL_NVIC_EnableIRQ>

}
 8000810:	bf00      	nop
 8000812:	3730      	adds	r7, #48	; 0x30
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40020400 	.word	0x40020400
 8000820:	40021800 	.word	0x40021800
 8000824:	40020800 	.word	0x40020800
 8000828:	40020000 	.word	0x40020000
 800082c:	40020c00 	.word	0x40020c00

08000830 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083e:	2b00      	cmp	r3, #0
 8000840:	db0c      	blt.n	800085c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	f003 021f 	and.w	r2, r3, #31
 8000848:	4907      	ldr	r1, [pc, #28]	; (8000868 <__NVIC_ClearPendingIRQ+0x38>)
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	095b      	lsrs	r3, r3, #5
 8000850:	2001      	movs	r0, #1
 8000852:	fa00 f202 	lsl.w	r2, r0, r2
 8000856:	3360      	adds	r3, #96	; 0x60
 8000858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000e100 	.word	0xe000e100

0800086c <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Прерывание на приём сообщения по CAN шине
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
    if(HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8000874:	4b31      	ldr	r3, [pc, #196]	; (800093c <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000876:	4a32      	ldr	r2, [pc, #200]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000878:	2100      	movs	r1, #0
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f000 ffe5 	bl	800184a <HAL_CAN_GetRxMessage>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d156      	bne.n	8000934 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
    	HAL_TIM_Base_Stop_IT(&htim8);
 8000886:	482f      	ldr	r0, [pc, #188]	; (8000944 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000888:	f003 fc9c 	bl	80041c4 <HAL_TIM_Base_Stop_IT>
    	//Если связь была потеряна, отключение светодиодов
    	if (ConnectionErr) {
 800088c:	4b2e      	ldr	r3, [pc, #184]	; (8000948 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d018      	beq.n	80008c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	2101      	movs	r1, #1
 8000898:	482c      	ldr	r0, [pc, #176]	; (800094c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 800089a:	f001 fe0d 	bl	80024b8 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2180      	movs	r1, #128	; 0x80
 80008a2:	482a      	ldr	r0, [pc, #168]	; (800094c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80008a4:	f001 fe08 	bl	80024b8 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ae:	4827      	ldr	r0, [pc, #156]	; (800094c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80008b0:	f001 fe02 	bl	80024b8 <HAL_GPIO_WritePin>
    	    CDC_Transmit_FS(ConResMsg, strlen((char *)ConResMsg));
 80008b4:	4826      	ldr	r0, [pc, #152]	; (8000950 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 80008b6:	f7ff fc85 	bl	80001c4 <strlen>
 80008ba:	4603      	mov	r3, r0
 80008bc:	b29b      	uxth	r3, r3
 80008be:	4619      	mov	r1, r3
 80008c0:	4823      	ldr	r0, [pc, #140]	; (8000950 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 80008c2:	f007 f827 	bl	8007914 <CDC_Transmit_FS>
    	}
    	ConnectionErr = 0;
 80008c6:	4b20      	ldr	r3, [pc, #128]	; (8000948 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
    	if (RxHeader.StdId == ID_DATA) {
 80008cc:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d118      	bne.n	8000906 <HAL_CAN_RxFifo0MsgPendingCallback+0x9a>
        	if (RxData[0]) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d004      	beq.n	80008e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
 80008dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008e0:	481a      	ldr	r0, [pc, #104]	; (800094c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80008e2:	f001 fe01 	bl	80024e8 <HAL_GPIO_TogglePin>
        	if (RxData[1]) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80008e8:	785b      	ldrb	r3, [r3, #1]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d003      	beq.n	80008f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
 80008ee:	2180      	movs	r1, #128	; 0x80
 80008f0:	4816      	ldr	r0, [pc, #88]	; (800094c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80008f2:	f001 fdf9 	bl	80024e8 <HAL_GPIO_TogglePin>
        	if (RxData[2]) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80008f8:	789b      	ldrb	r3, [r3, #2]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d003      	beq.n	8000906 <HAL_CAN_RxFifo0MsgPendingCallback+0x9a>
 80008fe:	2101      	movs	r1, #1
 8000900:	4812      	ldr	r0, [pc, #72]	; (800094c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000902:	f001 fdf1 	bl	80024e8 <HAL_GPIO_TogglePin>
    	}
    	if (RxHeader.StdId == ID_SET_LED) {
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d10b      	bne.n	8000926 <HAL_CAN_RxFifo0MsgPendingCallback+0xba>
			TxData[0] = RxData[0];
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000910:	781a      	ldrb	r2, [r3, #0]
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000914:	701a      	strb	r2, [r3, #0]
			TxData[1] = RxData[1];
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000918:	785a      	ldrb	r2, [r3, #1]
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 800091c:	705a      	strb	r2, [r3, #1]
			TxData[2] = RxData[2];
 800091e:	4b07      	ldr	r3, [pc, #28]	; (800093c <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000920:	789a      	ldrb	r2, [r3, #2]
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000924:	709a      	strb	r2, [r3, #2]
    	}
    	//Сброс счётчика таймера отсутствия соединения и его запуск
    	__HAL_TIM_SetCounter(&htim8,0);
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
    	HAL_TIM_Base_Start_IT(&htim8);
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000930:	f003 fbda 	bl	80040e8 <HAL_TIM_Base_Start_IT>
    }
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2000027c 	.word	0x2000027c
 8000940:	2000030c 	.word	0x2000030c
 8000944:	20000328 	.word	0x20000328
 8000948:	20000284 	.word	0x20000284
 800094c:	40020400 	.word	0x40020400
 8000950:	20000038 	.word	0x20000038
 8000954:	20000274 	.word	0x20000274

08000958 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13) {
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000968:	d144      	bne.n	80009f4 <HAL_GPIO_EXTI_Callback+0x9c>
		//Отключение прерывания для устранения дребезга
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800096a:	2028      	movs	r0, #40	; 0x28
 800096c:	f001 fbeb 	bl	8002146 <HAL_NVIC_DisableIRQ>
		//Есть ли данные от USB. Да = перезапись пинов для зажигания
		//Посылать так "echo -ne "\x1\x1\x1\x1\x1" > /dev/ttyACM1"
		//\x LD3 \x LD2 \x LD1 \x Отправить данные из USB на другую плату по CAN \x Записать данные из USB локально
		USB_Rx = USB_Rx_Msg();
 8000970:	f006 fff6 	bl	8007960 <USB_Rx_Msg>
 8000974:	4603      	mov	r3, r0
 8000976:	4a21      	ldr	r2, [pc, #132]	; (80009fc <HAL_GPIO_EXTI_Callback+0xa4>)
 8000978:	6013      	str	r3, [r2, #0]
		if (USB_Rx) {
 800097a:	4b20      	ldr	r3, [pc, #128]	; (80009fc <HAL_GPIO_EXTI_Callback+0xa4>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d02f      	beq.n	80009e2 <HAL_GPIO_EXTI_Callback+0x8a>
			if (USB_Rx[3]) {
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <HAL_GPIO_EXTI_Callback+0xa4>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	3303      	adds	r3, #3
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d014      	beq.n	80009b8 <HAL_GPIO_EXTI_Callback+0x60>
				TxDataSet[0] = USB_Rx[0];
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <HAL_GPIO_EXTI_Callback+0xa4>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	781a      	ldrb	r2, [r3, #0]
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000996:	701a      	strb	r2, [r3, #0]
				TxDataSet[1] = USB_Rx[1];
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <HAL_GPIO_EXTI_Callback+0xa4>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	785a      	ldrb	r2, [r3, #1]
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <HAL_GPIO_EXTI_Callback+0xa8>)
 80009a0:	705a      	strb	r2, [r3, #1]
				TxDataSet[2] = USB_Rx[2];
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <HAL_GPIO_EXTI_Callback+0xa4>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	789a      	ldrb	r2, [r3, #2]
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_GPIO_EXTI_Callback+0xa8>)
 80009aa:	709a      	strb	r2, [r3, #2]
				HAL_CAN_AddTxMessage(&hcan1, &TxHeader_SetLED, TxDataSet, &TxMailBox);
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_GPIO_EXTI_Callback+0xac>)
 80009ae:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <HAL_GPIO_EXTI_Callback+0xa8>)
 80009b0:	4915      	ldr	r1, [pc, #84]	; (8000a08 <HAL_GPIO_EXTI_Callback+0xb0>)
 80009b2:	4816      	ldr	r0, [pc, #88]	; (8000a0c <HAL_GPIO_EXTI_Callback+0xb4>)
 80009b4:	f000 fe18 	bl	80015e8 <HAL_CAN_AddTxMessage>
			}
			if (USB_Rx[4]) {
 80009b8:	4b10      	ldr	r3, [pc, #64]	; (80009fc <HAL_GPIO_EXTI_Callback+0xa4>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	3304      	adds	r3, #4
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d00e      	beq.n	80009e2 <HAL_GPIO_EXTI_Callback+0x8a>
				TxData[0] = USB_Rx[0];
 80009c4:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <HAL_GPIO_EXTI_Callback+0xa4>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	781a      	ldrb	r2, [r3, #0]
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <HAL_GPIO_EXTI_Callback+0xb8>)
 80009cc:	701a      	strb	r2, [r3, #0]
				TxData[1] = USB_Rx[1];
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <HAL_GPIO_EXTI_Callback+0xa4>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	785a      	ldrb	r2, [r3, #1]
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <HAL_GPIO_EXTI_Callback+0xb8>)
 80009d6:	705a      	strb	r2, [r3, #1]
				TxData[2] = USB_Rx[2];
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <HAL_GPIO_EXTI_Callback+0xa4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	789a      	ldrb	r2, [r3, #2]
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <HAL_GPIO_EXTI_Callback+0xb8>)
 80009e0:	709a      	strb	r2, [r3, #2]
			}
		}
		//Отправка сообщения
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox);
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <HAL_GPIO_EXTI_Callback+0xac>)
 80009e4:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <HAL_GPIO_EXTI_Callback+0xb8>)
 80009e6:	490b      	ldr	r1, [pc, #44]	; (8000a14 <HAL_GPIO_EXTI_Callback+0xbc>)
 80009e8:	4808      	ldr	r0, [pc, #32]	; (8000a0c <HAL_GPIO_EXTI_Callback+0xb4>)
 80009ea:	f000 fdfd 	bl	80015e8 <HAL_CAN_AddTxMessage>
		//Включение прерывания через 250 мс
		HAL_TIM_Base_Start_IT(&htim1);
 80009ee:	480a      	ldr	r0, [pc, #40]	; (8000a18 <HAL_GPIO_EXTI_Callback+0xc0>)
 80009f0:	f003 fb7a 	bl	80040e8 <HAL_TIM_Base_Start_IT>
	}
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200002c0 	.word	0x200002c0
 8000a00:	20000278 	.word	0x20000278
 8000a04:	20000280 	.word	0x20000280
 8000a08:	200002c4 	.word	0x200002c4
 8000a0c:	20000298 	.word	0x20000298
 8000a10:	20000274 	.word	0x20000274
 8000a14:	200002dc 	.word	0x200002dc
 8000a18:	20000370 	.word	0x20000370

08000a1c <HAL_TIM_PeriodElapsedCallback>:
//Прерывания на таймеры
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM1) {
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a32      	ldr	r2, [pc, #200]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d130      	bne.n	8000a90 <HAL_TIM_PeriodElapsedCallback+0x74>
        	HAL_TIM_Base_Stop_IT(&htim1);
 8000a2e:	4832      	ldr	r0, [pc, #200]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000a30:	f003 fbc8 	bl	80041c4 <HAL_TIM_Base_Stop_IT>
        	__HAL_TIM_SetCounter(&htim1,0);
 8000a34:	4b30      	ldr	r3, [pc, #192]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	625a      	str	r2, [r3, #36]	; 0x24
        	if (ConnectionErr) {
 8000a3c:	4b2f      	ldr	r3, [pc, #188]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d01b      	beq.n	8000a7c <HAL_TIM_PeriodElapsedCallback+0x60>
        		//Поскольку таймер настроен на 250мс, для мигания каждые 500мс надо пропускать одно переполнение
        		if (BlinkSkip) BlinkSkip = 0;
 8000a44:	4b2e      	ldr	r3, [pc, #184]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d003      	beq.n	8000a54 <HAL_TIM_PeriodElapsedCallback+0x38>
 8000a4c:	4b2c      	ldr	r3, [pc, #176]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]
 8000a52:	e00f      	b.n	8000a74 <HAL_TIM_PeriodElapsedCallback+0x58>
        		else {
            		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000a54:	2101      	movs	r1, #1
 8000a56:	482b      	ldr	r0, [pc, #172]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000a58:	f001 fd46 	bl	80024e8 <HAL_GPIO_TogglePin>
            		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000a5c:	2180      	movs	r1, #128	; 0x80
 8000a5e:	4829      	ldr	r0, [pc, #164]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000a60:	f001 fd42 	bl	80024e8 <HAL_GPIO_TogglePin>
            		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000a64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a68:	4826      	ldr	r0, [pc, #152]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000a6a:	f001 fd3d 	bl	80024e8 <HAL_GPIO_TogglePin>
            		BlinkSkip = 1;
 8000a6e:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	701a      	strb	r2, [r3, #0]
        		}
        		HAL_TIM_Base_Start_IT(&htim1);
 8000a74:	4820      	ldr	r0, [pc, #128]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000a76:	f003 fb37 	bl	80040e8 <HAL_TIM_Base_Start_IT>
 8000a7a:	e009      	b.n	8000a90 <HAL_TIM_PeriodElapsedCallback+0x74>
        	}
        	else {
                __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);  // очищаем бит EXTI_PR (бит прерывания)
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a82:	615a      	str	r2, [r3, #20]
                NVIC_ClearPendingIRQ(EXTI15_10_IRQn); // очищаем бит NVIC_ICPRx (бит очереди)
 8000a84:	2028      	movs	r0, #40	; 0x28
 8000a86:	f7ff fed3 	bl	8000830 <__NVIC_ClearPendingIRQ>
                HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);   // включаем внешнее прерывание
 8000a8a:	2028      	movs	r0, #40	; 0x28
 8000a8c:	f001 fb4d 	bl	800212a <HAL_NVIC_EnableIRQ>
        	}
        }
        if(htim->Instance == TIM8) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a1d      	ldr	r2, [pc, #116]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d128      	bne.n	8000aec <HAL_TIM_PeriodElapsedCallback+0xd0>
        	HAL_TIM_Base_Stop_IT(&htim8);
 8000a9a:	481d      	ldr	r0, [pc, #116]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000a9c:	f003 fb92 	bl	80041c4 <HAL_TIM_Base_Stop_IT>
        	__HAL_TIM_SetCounter(&htim8,0);
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	625a      	str	r2, [r3, #36]	; 0x24
        	ConnectionErr = 1;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
            BlinkSkip = 1;
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	701a      	strb	r2, [r3, #0]
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4812      	ldr	r0, [pc, #72]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000aba:	f001 fcfd 	bl	80024b8 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2180      	movs	r1, #128	; 0x80
 8000ac2:	4810      	ldr	r0, [pc, #64]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000ac4:	f001 fcf8 	bl	80024b8 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ace:	480d      	ldr	r0, [pc, #52]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000ad0:	f001 fcf2 	bl	80024b8 <HAL_GPIO_WritePin>
            CDC_Transmit_FS(ConErrMsg, strlen((char *)ConErrMsg));
 8000ad4:	480f      	ldr	r0, [pc, #60]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000ad6:	f7ff fb75 	bl	80001c4 <strlen>
 8000ada:	4603      	mov	r3, r0
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	4619      	mov	r1, r3
 8000ae0:	480c      	ldr	r0, [pc, #48]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000ae2:	f006 ff17 	bl	8007914 <CDC_Transmit_FS>
        	//Поскольку TIM1 настроен на 250мс, можно использовать его для мигания светодиодами
        	HAL_TIM_Base_Start_IT(&htim1);
 8000ae6:	4804      	ldr	r0, [pc, #16]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000ae8:	f003 fafe 	bl	80040e8 <HAL_TIM_Base_Start_IT>
        }
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40010000 	.word	0x40010000
 8000af8:	20000370 	.word	0x20000370
 8000afc:	20000284 	.word	0x20000284
 8000b00:	20000285 	.word	0x20000285
 8000b04:	40020400 	.word	0x40020400
 8000b08:	40013c00 	.word	0x40013c00
 8000b0c:	40010400 	.word	0x40010400
 8000b10:	20000328 	.word	0x20000328
 8000b14:	20000000 	.word	0x20000000

08000b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1c:	f000 fab2 	bl	8001084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b20:	f000 f896 	bl	8000c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b24:	f7ff fd78 	bl	8000618 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000b28:	f7ff fcd0 	bl	80004cc <MX_CAN1_Init>
  MX_TIM1_Init();
 8000b2c:	f000 f996 	bl	8000e5c <MX_TIM1_Init>
  MX_TIM8_Init();
 8000b30:	f000 f9e6 	bl	8000f00 <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 8000b34:	f006 fe26 	bl	8007784 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  //Пакет с данными
  TxHeader.StdId = ID_DATA;
 8000b38:	4b3d      	ldr	r3, [pc, #244]	; (8000c30 <main+0x118>)
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	601a      	str	r2, [r3, #0]
  TxHeader.DLC = 3;
 8000b3e:	4b3c      	ldr	r3, [pc, #240]	; (8000c30 <main+0x118>)
 8000b40:	2203      	movs	r2, #3
 8000b42:	611a      	str	r2, [r3, #16]
  //Красный светодиод
  TxData[0] = 1;
 8000b44:	4b3b      	ldr	r3, [pc, #236]	; (8000c34 <main+0x11c>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
  //Синий светодиод
  TxData[1] = 0;
 8000b4a:	4b3a      	ldr	r3, [pc, #232]	; (8000c34 <main+0x11c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	705a      	strb	r2, [r3, #1]
  //Зелёный светодиод
  TxData[2] = 1;
 8000b50:	4b38      	ldr	r3, [pc, #224]	; (8000c34 <main+0x11c>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	709a      	strb	r2, [r3, #2]
  //Пакет проверки соединения
  TxHeader_Connectivity.StdId = ID_CONNECT;
 8000b56:	4b38      	ldr	r3, [pc, #224]	; (8000c38 <main+0x120>)
 8000b58:	2203      	movs	r2, #3
 8000b5a:	601a      	str	r2, [r3, #0]
  TxHeader_Connectivity.DLC = 0;
 8000b5c:	4b36      	ldr	r3, [pc, #216]	; (8000c38 <main+0x120>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  //Пакет установки светодиода
  TxHeader_SetLED.StdId = ID_SET_LED;
 8000b62:	4b36      	ldr	r3, [pc, #216]	; (8000c3c <main+0x124>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	601a      	str	r2, [r3, #0]
  TxHeader_SetLED.DLC = 3;
 8000b68:	4b34      	ldr	r3, [pc, #208]	; (8000c3c <main+0x124>)
 8000b6a:	2203      	movs	r2, #3
 8000b6c:	611a      	str	r2, [r3, #16]
  //Одинаковые параметры пакетов
  TxHeader.ExtId = TxHeader_Connectivity.ExtId = TxHeader_SetLED.ExtId = 0;
 8000b6e:	4b33      	ldr	r3, [pc, #204]	; (8000c3c <main+0x124>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	4b31      	ldr	r3, [pc, #196]	; (8000c3c <main+0x124>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	4a2f      	ldr	r2, [pc, #188]	; (8000c38 <main+0x120>)
 8000b7a:	6053      	str	r3, [r2, #4]
 8000b7c:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <main+0x120>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	4a2b      	ldr	r2, [pc, #172]	; (8000c30 <main+0x118>)
 8000b82:	6053      	str	r3, [r2, #4]
  TxHeader.RTR = TxHeader_Connectivity.RTR = TxHeader_SetLED.RTR = 0;
 8000b84:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <main+0x124>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	4b2c      	ldr	r3, [pc, #176]	; (8000c3c <main+0x124>)
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	4a2a      	ldr	r2, [pc, #168]	; (8000c38 <main+0x120>)
 8000b90:	60d3      	str	r3, [r2, #12]
 8000b92:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <main+0x120>)
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	4a26      	ldr	r2, [pc, #152]	; (8000c30 <main+0x118>)
 8000b98:	60d3      	str	r3, [r2, #12]
  TxHeader.IDE = TxHeader_Connectivity.IDE = TxHeader_SetLED.IDE = 0;
 8000b9a:	4b28      	ldr	r3, [pc, #160]	; (8000c3c <main+0x124>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <main+0x124>)
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	4a24      	ldr	r2, [pc, #144]	; (8000c38 <main+0x120>)
 8000ba6:	6093      	str	r3, [r2, #8]
 8000ba8:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <main+0x120>)
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	4a20      	ldr	r2, [pc, #128]	; (8000c30 <main+0x118>)
 8000bae:	6093      	str	r3, [r2, #8]
  TxHeader.TransmitGlobalTime = TxHeader_Connectivity.TransmitGlobalTime = TxHeader_SetLED.TransmitGlobalTime = 0;
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <main+0x124>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	751a      	strb	r2, [r3, #20]
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <main+0x124>)
 8000bb8:	7d1a      	ldrb	r2, [r3, #20]
 8000bba:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <main+0x120>)
 8000bbc:	751a      	strb	r2, [r3, #20]
 8000bbe:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <main+0x120>)
 8000bc0:	7d1a      	ldrb	r2, [r3, #20]
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <main+0x118>)
 8000bc4:	751a      	strb	r2, [r3, #20]
  HAL_CAN_Start(&hcan1);
 8000bc6:	481e      	ldr	r0, [pc, #120]	; (8000c40 <main+0x128>)
 8000bc8:	f000 fcca 	bl	8001560 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000bcc:	2102      	movs	r1, #2
 8000bce:	481c      	ldr	r0, [pc, #112]	; (8000c40 <main+0x128>)
 8000bd0:	f000 ff4c 	bl	8001a6c <HAL_CAN_ActivateNotification>
  //Если не сбросить флаг, первое прерывание произойдёт непредсказуемо
  __HAL_TIM_CLEAR_FLAG(&htim1, TIM_SR_UIF);
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <main+0x12c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f06f 0201 	mvn.w	r2, #1
 8000bdc:	611a      	str	r2, [r3, #16]
  __HAL_TIM_CLEAR_FLAG(&htim8, TIM_SR_UIF);
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <main+0x130>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f06f 0201 	mvn.w	r2, #1
 8000be6:	611a      	str	r2, [r3, #16]
  //Таймер на 3 секунды для проверки соединения
  HAL_TIM_Base_Start_IT(&htim8);
 8000be8:	4817      	ldr	r0, [pc, #92]	; (8000c48 <main+0x130>)
 8000bea:	f003 fa7d 	bl	80040e8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0);
 8000bee:	bf00      	nop
 8000bf0:	4813      	ldr	r0, [pc, #76]	; (8000c40 <main+0x128>)
 8000bf2:	f000 fdd3 	bl	800179c <HAL_CAN_GetTxMailboxesFreeLevel>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0f9      	beq.n	8000bf0 <main+0xd8>
	if (HAL_OK != HAL_CAN_AddTxMessage(&hcan1, &TxHeader_Connectivity, 0, &TxMailBox))
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <main+0x134>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	490d      	ldr	r1, [pc, #52]	; (8000c38 <main+0x120>)
 8000c02:	480f      	ldr	r0, [pc, #60]	; (8000c40 <main+0x128>)
 8000c04:	f000 fcf0 	bl	80015e8 <HAL_CAN_AddTxMessage>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <main+0xfa>
		Error_Handler();
 8000c0e:	f000 f866 	bl	8000cde <Error_Handler>
	while (HAL_CAN_IsTxMessagePending(&hcan1, TxMailBox));
 8000c12:	bf00      	nop
 8000c14:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <main+0x134>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4809      	ldr	r0, [pc, #36]	; (8000c40 <main+0x128>)
 8000c1c:	f000 fdf2 	bl	8001804 <HAL_CAN_IsTxMessagePending>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1f6      	bne.n	8000c14 <main+0xfc>
  	HAL_Delay(1000);
 8000c26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c2a:	f000 fa99 	bl	8001160 <HAL_Delay>
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0);
 8000c2e:	e7de      	b.n	8000bee <main+0xd6>
 8000c30:	200002dc 	.word	0x200002dc
 8000c34:	20000274 	.word	0x20000274
 8000c38:	200002f4 	.word	0x200002f4
 8000c3c:	200002c4 	.word	0x200002c4
 8000c40:	20000298 	.word	0x20000298
 8000c44:	20000370 	.word	0x20000370
 8000c48:	20000328 	.word	0x20000328
 8000c4c:	20000280 	.word	0x20000280

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b092      	sub	sp, #72	; 0x48
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 0318 	add.w	r3, r7, #24
 8000c5a:	2230      	movs	r2, #48	; 0x30
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f007 fae8 	bl	8008234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c76:	2301      	movs	r3, #1
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c7a:	2310      	movs	r3, #16
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c82:	2300      	movs	r3, #0
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000c86:	230d      	movs	r3, #13
 8000c88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8000c8a:	23c3      	movs	r3, #195	; 0xc3
 8000c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000c92:	2305      	movs	r3, #5
 8000c94:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c96:	f107 0318 	add.w	r3, r7, #24
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f002 fdac 	bl	80037f8 <HAL_RCC_OscConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000ca6:	f000 f81a 	bl	8000cde <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000caa:	230f      	movs	r3, #15
 8000cac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cb6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2103      	movs	r1, #3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f002 ffe6 	bl	8003c98 <HAL_RCC_ClockConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000cd2:	f000 f804 	bl	8000cde <Error_Handler>
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	3748      	adds	r7, #72	; 0x48
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce2:	b672      	cpsid	i
}
 8000ce4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <Error_Handler+0x8>

08000ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <HAL_MspInit+0x48>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <HAL_MspInit+0x48>)
 8000cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_MspInit+0x48>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_MspInit+0x48>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <HAL_MspInit+0x48>)
 8000d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <HAL_MspInit+0x48>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	40023800 	.word	0x40023800

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <MemManage_Handler+0x4>

08000d46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr

08000d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr

08000d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr

08000d76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7a:	f000 f9d5 	bl	8001128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <CAN1_RX0_IRQHandler+0x10>)
 8000d8a:	f000 fe94 	bl	8001ab6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000298 	.word	0x20000298

08000d98 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d9e:	f003 fa3f 	bl	8004220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000370 	.word	0x20000370

08000dac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000db0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000db4:	f001 fbb2 	bl	800251c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000dc2:	f003 fa2d 	bl	8004220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000328 	.word	0x20000328

08000dd0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <OTG_FS_IRQHandler+0x10>)
 8000dd6:	f001 fcf8 	bl	80027ca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20001884 	.word	0x20001884

08000de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dec:	4a14      	ldr	r2, [pc, #80]	; (8000e40 <_sbrk+0x5c>)
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <_sbrk+0x60>)
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <_sbrk+0x64>)
 8000e02:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <_sbrk+0x68>)
 8000e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d207      	bcs.n	8000e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e14:	f007 f9d4 	bl	80081c0 <__errno>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e22:	e009      	b.n	8000e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <_sbrk+0x64>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <_sbrk+0x64>)
 8000e34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e36:	68fb      	ldr	r3, [r7, #12]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20020000 	.word	0x20020000
 8000e44:	00000400 	.word	0x00000400
 8000e48:	20000288 	.word	0x20000288
 8000e4c:	20001c98 	.word	0x20001c98

08000e50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e70:	463b      	mov	r3, r7
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e78:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <MX_TIM1_Init+0x9c>)
 8000e7a:	4a20      	ldr	r2, [pc, #128]	; (8000efc <MX_TIM1_Init+0xa0>)
 8000e7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1199;
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <MX_TIM1_Init+0x9c>)
 8000e80:	f240 42af 	movw	r2, #1199	; 0x4af
 8000e84:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e86:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <MX_TIM1_Init+0x9c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24999;
 8000e8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <MX_TIM1_Init+0x9c>)
 8000e8e:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8000e92:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e94:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <MX_TIM1_Init+0x9c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e9a:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <MX_TIM1_Init+0x9c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea0:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <MX_TIM1_Init+0x9c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ea6:	4814      	ldr	r0, [pc, #80]	; (8000ef8 <MX_TIM1_Init+0x9c>)
 8000ea8:	f003 f8ce 	bl	8004048 <HAL_TIM_Base_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000eb2:	f7ff ff14 	bl	8000cde <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ebc:	f107 0308 	add.w	r3, r7, #8
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480d      	ldr	r0, [pc, #52]	; (8000ef8 <MX_TIM1_Init+0x9c>)
 8000ec4:	f003 fab4 	bl	8004430 <HAL_TIM_ConfigClockSource>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000ece:	f7ff ff06 	bl	8000cde <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eda:	463b      	mov	r3, r7
 8000edc:	4619      	mov	r1, r3
 8000ede:	4806      	ldr	r0, [pc, #24]	; (8000ef8 <MX_TIM1_Init+0x9c>)
 8000ee0:	f003 fcc2 	bl	8004868 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000eea:	f7ff fef8 	bl	8000cde <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000370 	.word	0x20000370
 8000efc:	40010000 	.word	0x40010000

08000f00 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f06:	f107 0308 	add.w	r3, r7, #8
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f14:	463b      	mov	r3, r7
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <MX_TIM8_Init+0x9c>)
 8000f1e:	4a20      	ldr	r2, [pc, #128]	; (8000fa0 <MX_TIM8_Init+0xa0>)
 8000f20:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 9599;
 8000f22:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <MX_TIM8_Init+0x9c>)
 8000f24:	f242 527f 	movw	r2, #9599	; 0x257f
 8000f28:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <MX_TIM8_Init+0x9c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 37499;
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <MX_TIM8_Init+0x9c>)
 8000f32:	f249 227b 	movw	r2, #37499	; 0x927b
 8000f36:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f38:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <MX_TIM8_Init+0x9c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f3e:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <MX_TIM8_Init+0x9c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <MX_TIM8_Init+0x9c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f4a:	4814      	ldr	r0, [pc, #80]	; (8000f9c <MX_TIM8_Init+0x9c>)
 8000f4c:	f003 f87c 	bl	8004048 <HAL_TIM_Base_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8000f56:	f7ff fec2 	bl	8000cde <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f60:	f107 0308 	add.w	r3, r7, #8
 8000f64:	4619      	mov	r1, r3
 8000f66:	480d      	ldr	r0, [pc, #52]	; (8000f9c <MX_TIM8_Init+0x9c>)
 8000f68:	f003 fa62 	bl	8004430 <HAL_TIM_ConfigClockSource>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8000f72:	f7ff feb4 	bl	8000cde <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f7e:	463b      	mov	r3, r7
 8000f80:	4619      	mov	r1, r3
 8000f82:	4806      	ldr	r0, [pc, #24]	; (8000f9c <MX_TIM8_Init+0x9c>)
 8000f84:	f003 fc70 	bl	8004868 <HAL_TIMEx_MasterConfigSynchronization>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8000f8e:	f7ff fea6 	bl	8000cde <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000328 	.word	0x20000328
 8000fa0:	40010400 	.word	0x40010400

08000fa4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a1c      	ldr	r2, [pc, #112]	; (8001024 <HAL_TIM_Base_MspInit+0x80>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d116      	bne.n	8000fe4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <HAL_TIM_Base_MspInit+0x84>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a1a      	ldr	r2, [pc, #104]	; (8001028 <HAL_TIM_Base_MspInit+0x84>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b18      	ldr	r3, [pc, #96]	; (8001028 <HAL_TIM_Base_MspInit+0x84>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2019      	movs	r0, #25
 8000fd8:	f001 f88b 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fdc:	2019      	movs	r0, #25
 8000fde:	f001 f8a4 	bl	800212a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000fe2:	e01a      	b.n	800101a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM8)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a10      	ldr	r2, [pc, #64]	; (800102c <HAL_TIM_Base_MspInit+0x88>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d115      	bne.n	800101a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HAL_TIM_Base_MspInit+0x84>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a0c      	ldr	r2, [pc, #48]	; (8001028 <HAL_TIM_Base_MspInit+0x84>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_TIM_Base_MspInit+0x84>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	202c      	movs	r0, #44	; 0x2c
 8001010:	f001 f86f 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001014:	202c      	movs	r0, #44	; 0x2c
 8001016:	f001 f888 	bl	800212a <HAL_NVIC_EnableIRQ>
}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40010000 	.word	0x40010000
 8001028:	40023800 	.word	0x40023800
 800102c:	40010400 	.word	0x40010400

08001030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001030:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001068 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001036:	490e      	ldr	r1, [pc, #56]	; (8001070 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001038:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800103c:	e002      	b.n	8001044 <LoopCopyDataInit>

0800103e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001042:	3304      	adds	r3, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001048:	d3f9      	bcc.n	800103e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104a:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800104c:	4c0b      	ldr	r4, [pc, #44]	; (800107c <LoopFillZerobss+0x26>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001050:	e001      	b.n	8001056 <LoopFillZerobss>

08001052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001054:	3204      	adds	r2, #4

08001056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001058:	d3fb      	bcc.n	8001052 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800105a:	f7ff fef9 	bl	8000e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800105e:	f007 f8b5 	bl	80081cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001062:	f7ff fd59 	bl	8000b18 <main>
  bx  lr
 8001066:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001068:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8001074:	0800844c 	.word	0x0800844c
  ldr r2, =_sbss
 8001078:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 800107c:	20001c94 	.word	0x20001c94

08001080 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC_IRQHandler>
	...

08001084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <HAL_Init+0x40>)
 800108e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001092:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <HAL_Init+0x40>)
 800109a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800109e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <HAL_Init+0x40>)
 80010a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ac:	2003      	movs	r0, #3
 80010ae:	f001 f815 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 f808 	bl	80010c8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80010b8:	f7ff fe16 	bl	8000ce8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023c00 	.word	0x40023c00

080010c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_InitTick+0x54>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_InitTick+0x58>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010de:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 f83b 	bl	8002162 <HAL_SYSTICK_Config>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00e      	b.n	8001114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b0f      	cmp	r3, #15
 80010fa:	d80a      	bhi.n	8001112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fc:	2200      	movs	r2, #0
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001104:	f000 fff5 	bl	80020f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001108:	4a06      	ldr	r2, [pc, #24]	; (8001124 <HAL_InitTick+0x5c>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	e000      	b.n	8001114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000078 	.word	0x20000078
 8001120:	20000080 	.word	0x20000080
 8001124:	2000007c 	.word	0x2000007c

08001128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HAL_IncTick+0x1c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_IncTick+0x20>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4413      	add	r3, r2
 8001138:	4a03      	ldr	r2, [pc, #12]	; (8001148 <HAL_IncTick+0x20>)
 800113a:	6013      	str	r3, [r2, #0]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	20000080 	.word	0x20000080
 8001148:	200003b8 	.word	0x200003b8

0800114c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b02      	ldr	r3, [pc, #8]	; (800115c <HAL_GetTick+0x10>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	200003b8 	.word	0x200003b8

08001160 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001168:	f7ff fff0 	bl	800114c <HAL_GetTick>
 800116c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001178:	d005      	beq.n	8001186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_Delay+0x44>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001186:	bf00      	nop
 8001188:	f7ff ffe0 	bl	800114c <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	429a      	cmp	r2, r3
 8001196:	d8f7      	bhi.n	8001188 <HAL_Delay+0x28>
  {
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000080 	.word	0x20000080

080011a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e0ed      	b.n	8001396 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d102      	bne.n	80011cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff f9d6 	bl	8000578 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0201 	orr.w	r2, r2, #1
 80011da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011dc:	f7ff ffb6 	bl	800114c <HAL_GetTick>
 80011e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011e2:	e012      	b.n	800120a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011e4:	f7ff ffb2 	bl	800114c <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b0a      	cmp	r3, #10
 80011f0:	d90b      	bls.n	800120a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2205      	movs	r2, #5
 8001202:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e0c5      	b.n	8001396 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0e5      	beq.n	80011e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0202 	bic.w	r2, r2, #2
 8001226:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001228:	f7ff ff90 	bl	800114c <HAL_GetTick>
 800122c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800122e:	e012      	b.n	8001256 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001230:	f7ff ff8c 	bl	800114c <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b0a      	cmp	r3, #10
 800123c:	d90b      	bls.n	8001256 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2205      	movs	r2, #5
 800124e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e09f      	b.n	8001396 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1e5      	bne.n	8001230 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7e1b      	ldrb	r3, [r3, #24]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d108      	bne.n	800127e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	e007      	b.n	800128e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800128c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7e5b      	ldrb	r3, [r3, #25]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d108      	bne.n	80012a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	e007      	b.n	80012b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	7e9b      	ldrb	r3, [r3, #26]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d108      	bne.n	80012d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 0220 	orr.w	r2, r2, #32
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	e007      	b.n	80012e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 0220 	bic.w	r2, r2, #32
 80012e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7edb      	ldrb	r3, [r3, #27]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d108      	bne.n	80012fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 0210 	bic.w	r2, r2, #16
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	e007      	b.n	800130c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 0210 	orr.w	r2, r2, #16
 800130a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7f1b      	ldrb	r3, [r3, #28]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d108      	bne.n	8001326 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0208 	orr.w	r2, r2, #8
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	e007      	b.n	8001336 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0208 	bic.w	r2, r2, #8
 8001334:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	7f5b      	ldrb	r3, [r3, #29]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d108      	bne.n	8001350 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f042 0204 	orr.w	r2, r2, #4
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	e007      	b.n	8001360 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0204 	bic.w	r2, r2, #4
 800135e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	431a      	orrs	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	ea42 0103 	orr.w	r1, r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	1e5a      	subs	r2, r3, #1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	430a      	orrs	r2, r1
 8001384:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b087      	sub	sp, #28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80013b8:	7cfb      	ldrb	r3, [r7, #19]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d003      	beq.n	80013c6 <HAL_CAN_ConfigFilter+0x26>
 80013be:	7cfb      	ldrb	r3, [r7, #19]
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	f040 80be 	bne.w	8001542 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80013c6:	4b65      	ldr	r3, [pc, #404]	; (800155c <HAL_CAN_ConfigFilter+0x1bc>)
 80013c8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013d0:	f043 0201 	orr.w	r2, r3, #1
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013e0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	431a      	orrs	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	f003 031f 	and.w	r3, r3, #31
 8001406:	2201      	movs	r2, #1
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43db      	mvns	r3, r3
 8001418:	401a      	ands	r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d123      	bne.n	8001470 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	43db      	mvns	r3, r3
 8001432:	401a      	ands	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800144a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	3248      	adds	r2, #72	; 0x48
 8001450:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001464:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001466:	6979      	ldr	r1, [r7, #20]
 8001468:	3348      	adds	r3, #72	; 0x48
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d122      	bne.n	80014be <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	431a      	orrs	r2, r3
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001498:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3248      	adds	r2, #72	; 0x48
 800149e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014b2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014b4:	6979      	ldr	r1, [r7, #20]
 80014b6:	3348      	adds	r3, #72	; 0x48
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d109      	bne.n	80014da <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	401a      	ands	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80014d8:	e007      	b.n	80014ea <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d109      	bne.n	8001506 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	401a      	ands	r2, r3
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001504:	e007      	b.n	8001516 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	431a      	orrs	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d107      	bne.n	800152e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	431a      	orrs	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001534:	f023 0201 	bic.w	r2, r3, #1
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	e006      	b.n	8001550 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
  }
}
 8001550:	4618      	mov	r0, r3
 8001552:	371c      	adds	r7, #28
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40006400 	.word	0x40006400

08001560 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b01      	cmp	r3, #1
 8001572:	d12e      	bne.n	80015d2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2202      	movs	r2, #2
 8001578:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0201 	bic.w	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800158c:	f7ff fdde 	bl	800114c <HAL_GetTick>
 8001590:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001592:	e012      	b.n	80015ba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001594:	f7ff fdda 	bl	800114c <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b0a      	cmp	r3, #10
 80015a0:	d90b      	bls.n	80015ba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2205      	movs	r2, #5
 80015b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e012      	b.n	80015e0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1e5      	bne.n	8001594 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e006      	b.n	80015e0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
  }
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015fc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001606:	7ffb      	ldrb	r3, [r7, #31]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d003      	beq.n	8001614 <HAL_CAN_AddTxMessage+0x2c>
 800160c:	7ffb      	ldrb	r3, [r7, #31]
 800160e:	2b02      	cmp	r3, #2
 8001610:	f040 80b8 	bne.w	8001784 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10a      	bne.n	8001634 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001624:	2b00      	cmp	r3, #0
 8001626:	d105      	bne.n	8001634 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 80a0 	beq.w	8001774 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	0e1b      	lsrs	r3, r3, #24
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	2b02      	cmp	r3, #2
 8001642:	d907      	bls.n	8001654 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e09e      	b.n	8001792 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001654:	2201      	movs	r2, #1
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	409a      	lsls	r2, r3
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10d      	bne.n	8001682 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001670:	68f9      	ldr	r1, [r7, #12]
 8001672:	6809      	ldr	r1, [r1, #0]
 8001674:	431a      	orrs	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	3318      	adds	r3, #24
 800167a:	011b      	lsls	r3, r3, #4
 800167c:	440b      	add	r3, r1
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	e00f      	b.n	80016a2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800168c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001692:	68f9      	ldr	r1, [r7, #12]
 8001694:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001696:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	3318      	adds	r3, #24
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	440b      	add	r3, r1
 80016a0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6819      	ldr	r1, [r3, #0]
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	3318      	adds	r3, #24
 80016ae:	011b      	lsls	r3, r3, #4
 80016b0:	440b      	add	r3, r1
 80016b2:	3304      	adds	r3, #4
 80016b4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	7d1b      	ldrb	r3, [r3, #20]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d111      	bne.n	80016e2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3318      	adds	r3, #24
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	4413      	add	r3, r2
 80016ca:	3304      	adds	r3, #4
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	6811      	ldr	r1, [r2, #0]
 80016d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3318      	adds	r3, #24
 80016da:	011b      	lsls	r3, r3, #4
 80016dc:	440b      	add	r3, r1
 80016de:	3304      	adds	r3, #4
 80016e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3307      	adds	r3, #7
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	061a      	lsls	r2, r3, #24
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3306      	adds	r3, #6
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3305      	adds	r3, #5
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	021b      	lsls	r3, r3, #8
 80016fc:	4313      	orrs	r3, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	3204      	adds	r2, #4
 8001702:	7812      	ldrb	r2, [r2, #0]
 8001704:	4610      	mov	r0, r2
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	6811      	ldr	r1, [r2, #0]
 800170a:	ea43 0200 	orr.w	r2, r3, r0
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	440b      	add	r3, r1
 8001714:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001718:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3303      	adds	r3, #3
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	061a      	lsls	r2, r3, #24
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3302      	adds	r3, #2
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	041b      	lsls	r3, r3, #16
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3301      	adds	r3, #1
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	4313      	orrs	r3, r2
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	7812      	ldrb	r2, [r2, #0]
 800173a:	4610      	mov	r0, r2
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	6811      	ldr	r1, [r2, #0]
 8001740:	ea43 0200 	orr.w	r2, r3, r0
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	011b      	lsls	r3, r3, #4
 8001748:	440b      	add	r3, r1
 800174a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800174e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3318      	adds	r3, #24
 8001758:	011b      	lsls	r3, r3, #4
 800175a:	4413      	add	r3, r2
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	6811      	ldr	r1, [r2, #0]
 8001762:	f043 0201 	orr.w	r2, r3, #1
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3318      	adds	r3, #24
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	440b      	add	r3, r1
 800176e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	e00e      	b.n	8001792 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e006      	b.n	8001792 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
  }
}
 8001792:	4618      	mov	r0, r3
 8001794:	3724      	adds	r7, #36	; 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ae:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80017b0:	7afb      	ldrb	r3, [r7, #11]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d002      	beq.n	80017bc <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80017b6:	7afb      	ldrb	r3, [r7, #11]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d11d      	bne.n	80017f8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d002      	beq.n	80017d0 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	3301      	adds	r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	3301      	adds	r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d002      	beq.n	80017f8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3301      	adds	r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80017f8:	68fb      	ldr	r3, [r7, #12]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001818:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800181a:	7afb      	ldrb	r3, [r7, #11]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d002      	beq.n	8001826 <HAL_CAN_IsTxMessagePending+0x22>
 8001820:	7afb      	ldrb	r3, [r7, #11]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d10b      	bne.n	800183e <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	069b      	lsls	r3, r3, #26
 8001830:	401a      	ands	r2, r3
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	069b      	lsls	r3, r3, #26
 8001836:	429a      	cmp	r2, r3
 8001838:	d001      	beq.n	800183e <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800183a:	2301      	movs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800184a:	b480      	push	{r7}
 800184c:	b087      	sub	sp, #28
 800184e:	af00      	add	r7, sp, #0
 8001850:	60f8      	str	r0, [r7, #12]
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800185e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001860:	7dfb      	ldrb	r3, [r7, #23]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d003      	beq.n	800186e <HAL_CAN_GetRxMessage+0x24>
 8001866:	7dfb      	ldrb	r3, [r7, #23]
 8001868:	2b02      	cmp	r3, #2
 800186a:	f040 80f3 	bne.w	8001a54 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d10e      	bne.n	8001892 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d116      	bne.n	80018b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e0e7      	b.n	8001a62 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d107      	bne.n	80018b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0d8      	b.n	8001a62 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	331b      	adds	r3, #27
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	4413      	add	r3, r2
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0204 	and.w	r2, r3, #4
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10c      	bne.n	80018e8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	331b      	adds	r3, #27
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	4413      	add	r3, r2
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	0d5b      	lsrs	r3, r3, #21
 80018de:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	e00b      	b.n	8001900 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	331b      	adds	r3, #27
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	4413      	add	r3, r2
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	08db      	lsrs	r3, r3, #3
 80018f8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	331b      	adds	r3, #27
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	4413      	add	r3, r2
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0202 	and.w	r2, r3, #2
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	331b      	adds	r3, #27
 800191e:	011b      	lsls	r3, r3, #4
 8001920:	4413      	add	r3, r2
 8001922:	3304      	adds	r3, #4
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 020f 	and.w	r2, r3, #15
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	331b      	adds	r3, #27
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	4413      	add	r3, r2
 800193a:	3304      	adds	r3, #4
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	0a1b      	lsrs	r3, r3, #8
 8001940:	b2da      	uxtb	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	331b      	adds	r3, #27
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	4413      	add	r3, r2
 8001952:	3304      	adds	r3, #4
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	b29a      	uxth	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	4413      	add	r3, r2
 8001968:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	4413      	add	r3, r2
 800197e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	0a1a      	lsrs	r2, r3, #8
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	3301      	adds	r3, #1
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	4413      	add	r3, r2
 8001998:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	0c1a      	lsrs	r2, r3, #16
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	3302      	adds	r3, #2
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	0e1a      	lsrs	r2, r3, #24
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	3303      	adds	r3, #3
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	4413      	add	r3, r2
 80019cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	3304      	adds	r3, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	4413      	add	r3, r2
 80019e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	0a1a      	lsrs	r2, r3, #8
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	3305      	adds	r3, #5
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	4413      	add	r3, r2
 80019fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	0c1a      	lsrs	r2, r3, #16
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	3306      	adds	r3, #6
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	4413      	add	r3, r2
 8001a18:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	0e1a      	lsrs	r2, r3, #24
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	3307      	adds	r3, #7
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d108      	bne.n	8001a40 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f042 0220 	orr.w	r2, r2, #32
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	e007      	b.n	8001a50 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	691a      	ldr	r2, [r3, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0220 	orr.w	r2, r2, #32
 8001a4e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	e006      	b.n	8001a62 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
  }
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	371c      	adds	r7, #28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a7c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d002      	beq.n	8001a8a <HAL_CAN_ActivateNotification+0x1e>
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d109      	bne.n	8001a9e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6959      	ldr	r1, [r3, #20]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e006      	b.n	8001aac <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
  }
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b08a      	sub	sp, #40	; 0x28
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d07c      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d023      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f983 	bl	8001e24 <HAL_CAN_TxMailbox0CompleteCallback>
 8001b1e:	e016      	b.n	8001b4e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d004      	beq.n	8001b34 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
 8001b32:	e00c      	b.n	8001b4e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d004      	beq.n	8001b48 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
 8001b46:	e002      	b.n	8001b4e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f986 	bl	8001e5a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d024      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f962 	bl	8001e36 <HAL_CAN_TxMailbox1CompleteCallback>
 8001b72:	e016      	b.n	8001ba2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d004      	beq.n	8001b88 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
 8001b86:	e00c      	b.n	8001ba2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d004      	beq.n	8001b9c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
 8001b9a:	e002      	b.n	8001ba2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f965 	bl	8001e6c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d024      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bb4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f941 	bl	8001e48 <HAL_CAN_TxMailbox2CompleteCallback>
 8001bc6:	e016      	b.n	8001bf6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d004      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bda:	e00c      	b.n	8001bf6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d004      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
 8001bee:	e002      	b.n	8001bf6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f944 	bl	8001e7e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00c      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2210      	movs	r2, #16
 8001c18:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00b      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d006      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2208      	movs	r2, #8
 8001c34:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f92a 	bl	8001e90 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d009      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7fe fe09 	bl	800086c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00c      	beq.n	8001c7e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2210      	movs	r2, #16
 8001c7c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00b      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d006      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2208      	movs	r2, #8
 8001c98:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f90a 	bl	8001eb4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d009      	beq.n	8001cbe <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f8f2 	bl	8001ea2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00b      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d006      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2210      	movs	r2, #16
 8001cd8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f8f3 	bl	8001ec6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00b      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d006      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2208      	movs	r2, #8
 8001cfa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f8eb 	bl	8001ed8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d07b      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d072      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d008      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	f043 0304 	orr.w	r3, r3, #4
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d043      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d03e      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d84:	2b60      	cmp	r3, #96	; 0x60
 8001d86:	d02b      	beq.n	8001de0 <HAL_CAN_IRQHandler+0x32a>
 8001d88:	2b60      	cmp	r3, #96	; 0x60
 8001d8a:	d82e      	bhi.n	8001dea <HAL_CAN_IRQHandler+0x334>
 8001d8c:	2b50      	cmp	r3, #80	; 0x50
 8001d8e:	d022      	beq.n	8001dd6 <HAL_CAN_IRQHandler+0x320>
 8001d90:	2b50      	cmp	r3, #80	; 0x50
 8001d92:	d82a      	bhi.n	8001dea <HAL_CAN_IRQHandler+0x334>
 8001d94:	2b40      	cmp	r3, #64	; 0x40
 8001d96:	d019      	beq.n	8001dcc <HAL_CAN_IRQHandler+0x316>
 8001d98:	2b40      	cmp	r3, #64	; 0x40
 8001d9a:	d826      	bhi.n	8001dea <HAL_CAN_IRQHandler+0x334>
 8001d9c:	2b30      	cmp	r3, #48	; 0x30
 8001d9e:	d010      	beq.n	8001dc2 <HAL_CAN_IRQHandler+0x30c>
 8001da0:	2b30      	cmp	r3, #48	; 0x30
 8001da2:	d822      	bhi.n	8001dea <HAL_CAN_IRQHandler+0x334>
 8001da4:	2b10      	cmp	r3, #16
 8001da6:	d002      	beq.n	8001dae <HAL_CAN_IRQHandler+0x2f8>
 8001da8:	2b20      	cmp	r3, #32
 8001daa:	d005      	beq.n	8001db8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001dac:	e01d      	b.n	8001dea <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	f043 0308 	orr.w	r3, r3, #8
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001db6:	e019      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	f043 0310 	orr.w	r3, r3, #16
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dc0:	e014      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	f043 0320 	orr.w	r3, r3, #32
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dca:	e00f      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dd4:	e00a      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dde:	e005      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001de8:	e000      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            break;
 8001dea:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699a      	ldr	r2, [r3, #24]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001dfa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2204      	movs	r2, #4
 8001e02:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d008      	beq.n	8001e1c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f867 	bl	8001eea <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	3728      	adds	r7, #40	; 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr

08001e36 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr

08001e5a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr

08001eea <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <__NVIC_SetPriorityGrouping>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2e:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <__NVIC_SetPriorityGrouping+0x44>)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	60d3      	str	r3, [r2, #12]
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_GetPriorityGrouping>:
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <__NVIC_GetPriorityGrouping+0x18>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	f003 0307 	and.w	r3, r3, #7
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_EnableIRQ>:
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	db0b      	blt.n	8001f8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	f003 021f 	and.w	r2, r3, #31
 8001f78:	4906      	ldr	r1, [pc, #24]	; (8001f94 <__NVIC_EnableIRQ+0x34>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	2001      	movs	r0, #1
 8001f82:	fa00 f202 	lsl.w	r2, r0, r2
 8001f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	e000e100 	.word	0xe000e100

08001f98 <__NVIC_DisableIRQ>:
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	db12      	blt.n	8001fd0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	f003 021f 	and.w	r2, r3, #31
 8001fb0:	490a      	ldr	r1, [pc, #40]	; (8001fdc <__NVIC_DisableIRQ+0x44>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	2001      	movs	r0, #1
 8001fba:	fa00 f202 	lsl.w	r2, r0, r2
 8001fbe:	3320      	adds	r3, #32
 8001fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001fc4:	f3bf 8f4f 	dsb	sy
}
 8001fc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fca:	f3bf 8f6f 	isb	sy
}
 8001fce:	bf00      	nop
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	e000e100 	.word	0xe000e100

08001fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	6039      	str	r1, [r7, #0]
 8001fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	db0a      	blt.n	800200a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	490c      	ldr	r1, [pc, #48]	; (800202c <__NVIC_SetPriority+0x4c>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	0112      	lsls	r2, r2, #4
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	440b      	add	r3, r1
 8002004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002008:	e00a      	b.n	8002020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	b2da      	uxtb	r2, r3
 800200e:	4908      	ldr	r1, [pc, #32]	; (8002030 <__NVIC_SetPriority+0x50>)
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	3b04      	subs	r3, #4
 8002018:	0112      	lsls	r2, r2, #4
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	440b      	add	r3, r1
 800201e:	761a      	strb	r2, [r3, #24]
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000e100 	.word	0xe000e100
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f1c3 0307 	rsb	r3, r3, #7
 800204e:	2b04      	cmp	r3, #4
 8002050:	bf28      	it	cs
 8002052:	2304      	movcs	r3, #4
 8002054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3304      	adds	r3, #4
 800205a:	2b06      	cmp	r3, #6
 800205c:	d902      	bls.n	8002064 <NVIC_EncodePriority+0x30>
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3b03      	subs	r3, #3
 8002062:	e000      	b.n	8002066 <NVIC_EncodePriority+0x32>
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43da      	mvns	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	401a      	ands	r2, r3
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800207c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	fa01 f303 	lsl.w	r3, r1, r3
 8002086:	43d9      	mvns	r1, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	4313      	orrs	r3, r2
         );
}
 800208e:	4618      	mov	r0, r3
 8002090:	3724      	adds	r7, #36	; 0x24
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a8:	d301      	bcc.n	80020ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00f      	b.n	80020ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <SysTick_Config+0x40>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b6:	210f      	movs	r1, #15
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020bc:	f7ff ff90 	bl	8001fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <SysTick_Config+0x40>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <SysTick_Config+0x40>)
 80020c8:	2207      	movs	r2, #7
 80020ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	e000e010 	.word	0xe000e010

080020dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ff09 	bl	8001efc <__NVIC_SetPriorityGrouping>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002104:	f7ff ff1e 	bl	8001f44 <__NVIC_GetPriorityGrouping>
 8002108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	6978      	ldr	r0, [r7, #20]
 8002110:	f7ff ff90 	bl	8002034 <NVIC_EncodePriority>
 8002114:	4602      	mov	r2, r0
 8002116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff5f 	bl	8001fe0 <__NVIC_SetPriority>
}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff11 	bl	8001f60 <__NVIC_EnableIRQ>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff1f 	bl	8001f98 <__NVIC_DisableIRQ>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff ff94 	bl	8002098 <SysTick_Config>
 8002170:	4603      	mov	r3, r0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218a:	e16f      	b.n	800246c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	2101      	movs	r1, #1
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	4013      	ands	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8161 	beq.w	8002466 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d005      	beq.n	80021bc <HAL_GPIO_Init+0x40>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d130      	bne.n	800221e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	2203      	movs	r2, #3
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4013      	ands	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021f2:	2201      	movs	r2, #1
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	091b      	lsrs	r3, r3, #4
 8002208:	f003 0201 	and.w	r2, r3, #1
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	2b03      	cmp	r3, #3
 8002228:	d017      	beq.n	800225a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	2203      	movs	r2, #3
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d123      	bne.n	80022ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	08da      	lsrs	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3208      	adds	r2, #8
 800226e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002272:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	220f      	movs	r2, #15
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4013      	ands	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	691a      	ldr	r2, [r3, #16]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	08da      	lsrs	r2, r3, #3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3208      	adds	r2, #8
 80022a8:	6939      	ldr	r1, [r7, #16]
 80022aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	2203      	movs	r2, #3
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4013      	ands	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 0203 	and.w	r2, r3, #3
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 80bb 	beq.w	8002466 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f0:	2300      	movs	r3, #0
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	4b64      	ldr	r3, [pc, #400]	; (8002488 <HAL_GPIO_Init+0x30c>)
 80022f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f8:	4a63      	ldr	r2, [pc, #396]	; (8002488 <HAL_GPIO_Init+0x30c>)
 80022fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022fe:	6453      	str	r3, [r2, #68]	; 0x44
 8002300:	4b61      	ldr	r3, [pc, #388]	; (8002488 <HAL_GPIO_Init+0x30c>)
 8002302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800230c:	4a5f      	ldr	r2, [pc, #380]	; (800248c <HAL_GPIO_Init+0x310>)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	089b      	lsrs	r3, r3, #2
 8002312:	3302      	adds	r3, #2
 8002314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002318:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	220f      	movs	r2, #15
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a57      	ldr	r2, [pc, #348]	; (8002490 <HAL_GPIO_Init+0x314>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d031      	beq.n	800239c <HAL_GPIO_Init+0x220>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a56      	ldr	r2, [pc, #344]	; (8002494 <HAL_GPIO_Init+0x318>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d02b      	beq.n	8002398 <HAL_GPIO_Init+0x21c>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a55      	ldr	r2, [pc, #340]	; (8002498 <HAL_GPIO_Init+0x31c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d025      	beq.n	8002394 <HAL_GPIO_Init+0x218>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a54      	ldr	r2, [pc, #336]	; (800249c <HAL_GPIO_Init+0x320>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d01f      	beq.n	8002390 <HAL_GPIO_Init+0x214>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a53      	ldr	r2, [pc, #332]	; (80024a0 <HAL_GPIO_Init+0x324>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d019      	beq.n	800238c <HAL_GPIO_Init+0x210>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a52      	ldr	r2, [pc, #328]	; (80024a4 <HAL_GPIO_Init+0x328>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d013      	beq.n	8002388 <HAL_GPIO_Init+0x20c>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a51      	ldr	r2, [pc, #324]	; (80024a8 <HAL_GPIO_Init+0x32c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d00d      	beq.n	8002384 <HAL_GPIO_Init+0x208>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a50      	ldr	r2, [pc, #320]	; (80024ac <HAL_GPIO_Init+0x330>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d007      	beq.n	8002380 <HAL_GPIO_Init+0x204>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a4f      	ldr	r2, [pc, #316]	; (80024b0 <HAL_GPIO_Init+0x334>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d101      	bne.n	800237c <HAL_GPIO_Init+0x200>
 8002378:	2308      	movs	r3, #8
 800237a:	e010      	b.n	800239e <HAL_GPIO_Init+0x222>
 800237c:	2309      	movs	r3, #9
 800237e:	e00e      	b.n	800239e <HAL_GPIO_Init+0x222>
 8002380:	2307      	movs	r3, #7
 8002382:	e00c      	b.n	800239e <HAL_GPIO_Init+0x222>
 8002384:	2306      	movs	r3, #6
 8002386:	e00a      	b.n	800239e <HAL_GPIO_Init+0x222>
 8002388:	2305      	movs	r3, #5
 800238a:	e008      	b.n	800239e <HAL_GPIO_Init+0x222>
 800238c:	2304      	movs	r3, #4
 800238e:	e006      	b.n	800239e <HAL_GPIO_Init+0x222>
 8002390:	2303      	movs	r3, #3
 8002392:	e004      	b.n	800239e <HAL_GPIO_Init+0x222>
 8002394:	2302      	movs	r3, #2
 8002396:	e002      	b.n	800239e <HAL_GPIO_Init+0x222>
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <HAL_GPIO_Init+0x222>
 800239c:	2300      	movs	r3, #0
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	f002 0203 	and.w	r2, r2, #3
 80023a4:	0092      	lsls	r2, r2, #2
 80023a6:	4093      	lsls	r3, r2
 80023a8:	461a      	mov	r2, r3
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023b0:	4936      	ldr	r1, [pc, #216]	; (800248c <HAL_GPIO_Init+0x310>)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	089b      	lsrs	r3, r3, #2
 80023b6:	3302      	adds	r3, #2
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023be:	4b3d      	ldr	r3, [pc, #244]	; (80024b4 <HAL_GPIO_Init+0x338>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023e2:	4a34      	ldr	r2, [pc, #208]	; (80024b4 <HAL_GPIO_Init+0x338>)
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023e8:	4b32      	ldr	r3, [pc, #200]	; (80024b4 <HAL_GPIO_Init+0x338>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4013      	ands	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800240c:	4a29      	ldr	r2, [pc, #164]	; (80024b4 <HAL_GPIO_Init+0x338>)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002412:	4b28      	ldr	r3, [pc, #160]	; (80024b4 <HAL_GPIO_Init+0x338>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	43db      	mvns	r3, r3
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4013      	ands	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002436:	4a1f      	ldr	r2, [pc, #124]	; (80024b4 <HAL_GPIO_Init+0x338>)
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800243c:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_GPIO_Init+0x338>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	43db      	mvns	r3, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002460:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <HAL_GPIO_Init+0x338>)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	3301      	adds	r3, #1
 800246a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	fa22 f303 	lsr.w	r3, r2, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	f47f ae88 	bne.w	800218c <HAL_GPIO_Init+0x10>
  }
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	371c      	adds	r7, #28
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	40023800 	.word	0x40023800
 800248c:	40013800 	.word	0x40013800
 8002490:	40020000 	.word	0x40020000
 8002494:	40020400 	.word	0x40020400
 8002498:	40020800 	.word	0x40020800
 800249c:	40020c00 	.word	0x40020c00
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40021400 	.word	0x40021400
 80024a8:	40021800 	.word	0x40021800
 80024ac:	40021c00 	.word	0x40021c00
 80024b0:	40022000 	.word	0x40022000
 80024b4:	40013c00 	.word	0x40013c00

080024b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
 80024c4:	4613      	mov	r3, r2
 80024c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024c8:	787b      	ldrb	r3, [r7, #1]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024d4:	e003      	b.n	80024de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024d6:	887b      	ldrh	r3, [r7, #2]
 80024d8:	041a      	lsls	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	619a      	str	r2, [r3, #24]
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024fa:	887a      	ldrh	r2, [r7, #2]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4013      	ands	r3, r2
 8002500:	041a      	lsls	r2, r3, #16
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	43d9      	mvns	r1, r3
 8002506:	887b      	ldrh	r3, [r7, #2]
 8002508:	400b      	ands	r3, r1
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	619a      	str	r2, [r3, #24]
}
 8002510:	bf00      	nop
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
	...

0800251c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002526:	4b08      	ldr	r3, [pc, #32]	; (8002548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002528:	695a      	ldr	r2, [r3, #20]
 800252a:	88fb      	ldrh	r3, [r7, #6]
 800252c:	4013      	ands	r3, r2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d006      	beq.n	8002540 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002532:	4a05      	ldr	r2, [pc, #20]	; (8002548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002534:	88fb      	ldrh	r3, [r7, #6]
 8002536:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe fa0c 	bl	8000958 <HAL_GPIO_EXTI_Callback>
  }
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40013c00 	.word	0x40013c00

0800254c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800254c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254e:	b08f      	sub	sp, #60	; 0x3c
 8002550:	af0a      	add	r7, sp, #40	; 0x28
 8002552:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e10f      	b.n	800277e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d106      	bne.n	800257e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f005 fb15 	bl	8007ba8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2203      	movs	r2, #3
 8002582:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258e:	2b00      	cmp	r3, #0
 8002590:	d102      	bne.n	8002598 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f002 faf9 	bl	8004b94 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	687e      	ldr	r6, [r7, #4]
 80025aa:	466d      	mov	r5, sp
 80025ac:	f106 0410 	add.w	r4, r6, #16
 80025b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80025c0:	1d33      	adds	r3, r6, #4
 80025c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025c4:	6838      	ldr	r0, [r7, #0]
 80025c6:	f002 f9db 	bl	8004980 <USB_CoreInit>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0d0      	b.n	800277e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2100      	movs	r1, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f002 fae6 	bl	8004bb4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e8:	2300      	movs	r3, #0
 80025ea:	73fb      	strb	r3, [r7, #15]
 80025ec:	e04a      	b.n	8002684 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025ee:	7bfa      	ldrb	r2, [r7, #15]
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	1a9b      	subs	r3, r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	333d      	adds	r3, #61	; 0x3d
 80025fe:	2201      	movs	r2, #1
 8002600:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002602:	7bfa      	ldrb	r2, [r7, #15]
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	333c      	adds	r3, #60	; 0x3c
 8002612:	7bfa      	ldrb	r2, [r7, #15]
 8002614:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002616:	7bfa      	ldrb	r2, [r7, #15]
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	b298      	uxth	r0, r3
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	3342      	adds	r3, #66	; 0x42
 800262a:	4602      	mov	r2, r0
 800262c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800262e:	7bfa      	ldrb	r2, [r7, #15]
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	1a9b      	subs	r3, r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	333f      	adds	r3, #63	; 0x3f
 800263e:	2200      	movs	r2, #0
 8002640:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002642:	7bfa      	ldrb	r2, [r7, #15]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	1a9b      	subs	r3, r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	3344      	adds	r3, #68	; 0x44
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002656:	7bfa      	ldrb	r2, [r7, #15]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	3348      	adds	r3, #72	; 0x48
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	1a9b      	subs	r3, r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	3350      	adds	r3, #80	; 0x50
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	3301      	adds	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
 8002684:	7bfa      	ldrb	r2, [r7, #15]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	429a      	cmp	r2, r3
 800268c:	d3af      	bcc.n	80025ee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800268e:	2300      	movs	r3, #0
 8002690:	73fb      	strb	r3, [r7, #15]
 8002692:	e044      	b.n	800271e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002694:	7bfa      	ldrb	r2, [r7, #15]
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026aa:	7bfa      	ldrb	r2, [r7, #15]
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	1a9b      	subs	r3, r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80026bc:	7bfa      	ldrb	r2, [r7, #15]
 80026be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026c0:	7bfa      	ldrb	r2, [r7, #15]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026d6:	7bfa      	ldrb	r2, [r7, #15]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026ec:	7bfa      	ldrb	r2, [r7, #15]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002702:	7bfa      	ldrb	r2, [r7, #15]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	3301      	adds	r3, #1
 800271c:	73fb      	strb	r3, [r7, #15]
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	429a      	cmp	r2, r3
 8002726:	d3b5      	bcc.n	8002694 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	603b      	str	r3, [r7, #0]
 800272e:	687e      	ldr	r6, [r7, #4]
 8002730:	466d      	mov	r5, sp
 8002732:	f106 0410 	add.w	r4, r6, #16
 8002736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002738:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800273a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800273c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800273e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002742:	e885 0003 	stmia.w	r5, {r0, r1}
 8002746:	1d33      	adds	r3, r6, #4
 8002748:	cb0e      	ldmia	r3, {r1, r2, r3}
 800274a:	6838      	ldr	r0, [r7, #0]
 800274c:	f002 fa7e 	bl	8004c4c <USB_DevInit>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2202      	movs	r2, #2
 800275a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e00d      	b.n	800277e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f003 faef 	bl	8005d5a <USB_DevDisconnect>

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002786 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_PCD_Start+0x16>
 8002798:	2302      	movs	r3, #2
 800279a:	e012      	b.n	80027c2 <HAL_PCD_Start+0x3c>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f002 f9e3 	bl	8004b74 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f003 fab1 	bl	8005d1a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027ca:	b590      	push	{r4, r7, lr}
 80027cc:	b08d      	sub	sp, #52	; 0x34
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f003 fb68 	bl	8005eb6 <USB_GetMode>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f040 838f 	bne.w	8002f0c <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 fad1 	bl	8005d9a <USB_ReadInterrupts>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 8385 	beq.w	8002f0a <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f003 fac8 	bl	8005d9a <USB_ReadInterrupts>
 800280a:	4603      	mov	r3, r0
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b02      	cmp	r3, #2
 8002812:	d107      	bne.n	8002824 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f002 0202 	and.w	r2, r2, #2
 8002822:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f003 fab6 	bl	8005d9a <USB_ReadInterrupts>
 800282e:	4603      	mov	r3, r0
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	2b10      	cmp	r3, #16
 8002836:	d161      	bne.n	80028fc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699a      	ldr	r2, [r3, #24]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0210 	bic.w	r2, r2, #16
 8002846:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	f003 020f 	and.w	r2, r3, #15
 8002854:	4613      	mov	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	4413      	add	r3, r2
 8002864:	3304      	adds	r3, #4
 8002866:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	0c5b      	lsrs	r3, r3, #17
 800286c:	f003 030f 	and.w	r3, r3, #15
 8002870:	2b02      	cmp	r3, #2
 8002872:	d124      	bne.n	80028be <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800287a:	4013      	ands	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d035      	beq.n	80028ec <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	091b      	lsrs	r3, r3, #4
 8002888:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800288a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800288e:	b29b      	uxth	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	6a38      	ldr	r0, [r7, #32]
 8002894:	f003 f8f3 	bl	8005a7e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	091b      	lsrs	r3, r3, #4
 80028a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028a4:	441a      	add	r2, r3
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	699a      	ldr	r2, [r3, #24]
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028b6:	441a      	add	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	619a      	str	r2, [r3, #24]
 80028bc:	e016      	b.n	80028ec <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	0c5b      	lsrs	r3, r3, #17
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	2b06      	cmp	r3, #6
 80028c8:	d110      	bne.n	80028ec <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028d0:	2208      	movs	r2, #8
 80028d2:	4619      	mov	r1, r3
 80028d4:	6a38      	ldr	r0, [r7, #32]
 80028d6:	f003 f8d2 	bl	8005a7e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	699a      	ldr	r2, [r3, #24]
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	091b      	lsrs	r3, r3, #4
 80028e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028e6:	441a      	add	r2, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699a      	ldr	r2, [r3, #24]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0210 	orr.w	r2, r2, #16
 80028fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f003 fa4a 	bl	8005d9a <USB_ReadInterrupts>
 8002906:	4603      	mov	r3, r0
 8002908:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800290c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002910:	d16e      	bne.n	80029f0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f003 fa4f 	bl	8005dbe <USB_ReadDevAllOutEpInterrupt>
 8002920:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002922:	e062      	b.n	80029ea <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d057      	beq.n	80029de <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f003 fa72 	bl	8005e22 <USB_ReadDevOutEPInterrupt>
 800293e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00c      	beq.n	8002964 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	4413      	add	r3, r2
 8002952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002956:	461a      	mov	r2, r3
 8002958:	2301      	movs	r3, #1
 800295a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800295c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fda2 	bl	80034a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00c      	beq.n	8002988 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	4413      	add	r3, r2
 8002976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800297a:	461a      	mov	r2, r3
 800297c:	2308      	movs	r3, #8
 800297e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002980:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 fe9c 	bl	80036c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f003 0310 	and.w	r3, r3, #16
 800298e:	2b00      	cmp	r3, #0
 8002990:	d008      	beq.n	80029a4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	4413      	add	r3, r2
 800299a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800299e:	461a      	mov	r2, r3
 80029a0:	2310      	movs	r3, #16
 80029a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d008      	beq.n	80029c0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ba:	461a      	mov	r2, r3
 80029bc:	2320      	movs	r3, #32
 80029be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d009      	beq.n	80029de <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d6:	461a      	mov	r2, r3
 80029d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029dc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	3301      	adds	r3, #1
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80029e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e6:	085b      	lsrs	r3, r3, #1
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d199      	bne.n	8002924 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f003 f9d0 	bl	8005d9a <USB_ReadInterrupts>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a04:	f040 80c0 	bne.w	8002b88 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f003 f9ef 	bl	8005df0 <USB_ReadDevAllInEpInterrupt>
 8002a12:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002a18:	e0b2      	b.n	8002b80 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80a7 	beq.w	8002b74 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	4611      	mov	r1, r2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f003 fa13 	bl	8005e5c <USB_ReadDevInEPInterrupt>
 8002a36:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d057      	beq.n	8002af2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	2201      	movs	r2, #1
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69f9      	ldr	r1, [r7, #28]
 8002a5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a62:	4013      	ands	r3, r2
 8002a64:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	015a      	lsls	r2, r3, #5
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a72:	461a      	mov	r2, r3
 8002a74:	2301      	movs	r3, #1
 8002a76:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d132      	bne.n	8002ae6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	3348      	adds	r3, #72	; 0x48
 8002a90:	6819      	ldr	r1, [r3, #0]
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4403      	add	r3, r0
 8002aa0:	3344      	adds	r3, #68	; 0x44
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4419      	add	r1, r3
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	1a9b      	subs	r3, r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4403      	add	r3, r0
 8002ab4:	3348      	adds	r3, #72	; 0x48
 8002ab6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d113      	bne.n	8002ae6 <HAL_PCD_IRQHandler+0x31c>
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	1a9b      	subs	r3, r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	3350      	adds	r3, #80	; 0x50
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d108      	bne.n	8002ae6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	f003 fa17 	bl	8005f14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	4619      	mov	r1, r3
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f005 f8ea 	bl	8007cc6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2308      	movs	r3, #8
 8002b0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b24:	461a      	mov	r2, r3
 8002b26:	2310      	movs	r3, #16
 8002b28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b40:	461a      	mov	r2, r3
 8002b42:	2340      	movs	r3, #64	; 0x40
 8002b44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	2302      	movs	r3, #2
 8002b60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fc0c 	bl	800338c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	3301      	adds	r3, #1
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7c:	085b      	lsrs	r3, r3, #1
 8002b7e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f47f af49 	bne.w	8002a1a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f003 f904 	bl	8005d9a <USB_ReadInterrupts>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b9c:	d114      	bne.n	8002bc8 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	69fa      	ldr	r2, [r7, #28]
 8002ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bac:	f023 0301 	bic.w	r3, r3, #1
 8002bb0:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f005 f8fe 	bl	8007db4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002bc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f003 f8e4 	bl	8005d9a <USB_ReadInterrupts>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bdc:	d112      	bne.n	8002c04 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d102      	bne.n	8002bf4 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f005 f8ba 	bl	8007d68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002c02:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f003 f8c6 	bl	8005d9a <USB_ReadInterrupts>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c18:	f040 80c7 	bne.w	8002daa <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c2a:	f023 0301 	bic.w	r3, r3, #1
 8002c2e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2110      	movs	r1, #16
 8002c36:	4618      	mov	r0, r3
 8002c38:	f002 f96c 	bl	8004f14 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c40:	e056      	b.n	8002cf0 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c4e:	461a      	mov	r2, r3
 8002c50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c54:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c66:	0151      	lsls	r1, r2, #5
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	440a      	add	r2, r1
 8002c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c74:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c86:	0151      	lsls	r1, r2, #5
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	440a      	add	r2, r1
 8002c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c94:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ca8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cba:	0151      	lsls	r1, r2, #5
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	440a      	add	r2, r1
 8002cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cc8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cda:	0151      	lsls	r1, r2, #5
 8002cdc:	69fa      	ldr	r2, [r7, #28]
 8002cde:	440a      	add	r2, r1
 8002ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ce4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ce8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cec:	3301      	adds	r3, #1
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d3a3      	bcc.n	8002c42 <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d08:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002d0c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d016      	beq.n	8002d44 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d20:	69fa      	ldr	r2, [r7, #28]
 8002d22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d26:	f043 030b 	orr.w	r3, r3, #11
 8002d2a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d3c:	f043 030b 	orr.w	r3, r3, #11
 8002d40:	6453      	str	r3, [r2, #68]	; 0x44
 8002d42:	e015      	b.n	8002d70 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	69fa      	ldr	r2, [r7, #28]
 8002d4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d56:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002d5a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	69fa      	ldr	r2, [r7, #28]
 8002d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d6a:	f043 030b 	orr.w	r3, r3, #11
 8002d6e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d82:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d94:	461a      	mov	r2, r3
 8002d96:	f003 f8bd 	bl	8005f14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002da8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f002 fff3 	bl	8005d9a <USB_ReadInterrupts>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dbe:	d124      	bne.n	8002e0a <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f003 f883 	bl	8005ed0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f002 f8fc 	bl	8004fcc <USB_GetDevSpeed>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681c      	ldr	r4, [r3, #0]
 8002de0:	f001 f928 	bl	8004034 <HAL_RCC_GetHCLKFreq>
 8002de4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	4620      	mov	r0, r4
 8002df0:	f001 fe1e 	bl	8004a30 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f004 ff8e 	bl	8007d16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002e08:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f002 ffc3 	bl	8005d9a <USB_ReadInterrupts>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d10a      	bne.n	8002e34 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f004 ff6b 	bl	8007cfa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f002 0208 	and.w	r2, r2, #8
 8002e32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f002 ffae 	bl	8005d9a <USB_ReadInterrupts>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e48:	d10f      	bne.n	8002e6a <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	4619      	mov	r1, r3
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f004 ffcd 	bl	8007df4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002e68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f002 ff93 	bl	8005d9a <USB_ReadInterrupts>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e7e:	d10f      	bne.n	8002ea0 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	4619      	mov	r1, r3
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f004 ffa0 	bl	8007dd0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002e9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f002 ff78 	bl	8005d9a <USB_ReadInterrupts>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb4:	d10a      	bne.n	8002ecc <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f004 ffae 	bl	8007e18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002eca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f002 ff62 	bl	8005d9a <USB_ReadInterrupts>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d115      	bne.n	8002f0c <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f004 ff9e 	bl	8007e34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6859      	ldr	r1, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	605a      	str	r2, [r3, #4]
 8002f08:	e000      	b.n	8002f0c <HAL_PCD_IRQHandler+0x742>
      return;
 8002f0a:	bf00      	nop
    }
  }
}
 8002f0c:	3734      	adds	r7, #52	; 0x34
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd90      	pop	{r4, r7, pc}

08002f12 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_PCD_SetAddress+0x1a>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e013      	b.n	8002f54 <HAL_PCD_SetAddress+0x42>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f002 fec3 	bl	8005cd0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	4608      	mov	r0, r1
 8002f66:	4611      	mov	r1, r2
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	70fb      	strb	r3, [r7, #3]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	803b      	strh	r3, [r7, #0]
 8002f72:	4613      	mov	r3, r2
 8002f74:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	da0f      	bge.n	8002fa2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	f003 020f 	and.w	r2, r3, #15
 8002f88:	4613      	mov	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	1a9b      	subs	r3, r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	3338      	adds	r3, #56	; 0x38
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	3304      	adds	r3, #4
 8002f98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	705a      	strb	r2, [r3, #1]
 8002fa0:	e00f      	b.n	8002fc2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	f003 020f 	and.w	r2, r3, #15
 8002fa8:	4613      	mov	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3304      	adds	r3, #4
 8002fba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002fc2:	78fb      	ldrb	r3, [r7, #3]
 8002fc4:	f003 030f 	and.w	r3, r3, #15
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002fce:	883a      	ldrh	r2, [r7, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	78ba      	ldrb	r2, [r7, #2]
 8002fd8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	785b      	ldrb	r3, [r3, #1]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d004      	beq.n	8002fec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fec:	78bb      	ldrb	r3, [r7, #2]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d102      	bne.n	8002ff8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_PCD_EP_Open+0xaa>
 8003002:	2302      	movs	r3, #2
 8003004:	e00e      	b.n	8003024 <HAL_PCD_EP_Open+0xc8>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68f9      	ldr	r1, [r7, #12]
 8003014:	4618      	mov	r0, r3
 8003016:	f001 fffd 	bl	8005014 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003022:	7afb      	ldrb	r3, [r7, #11]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003038:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800303c:	2b00      	cmp	r3, #0
 800303e:	da0f      	bge.n	8003060 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	f003 020f 	and.w	r2, r3, #15
 8003046:	4613      	mov	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	1a9b      	subs	r3, r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	3338      	adds	r3, #56	; 0x38
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	4413      	add	r3, r2
 8003054:	3304      	adds	r3, #4
 8003056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2201      	movs	r2, #1
 800305c:	705a      	strb	r2, [r3, #1]
 800305e:	e00f      	b.n	8003080 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003060:	78fb      	ldrb	r3, [r7, #3]
 8003062:	f003 020f 	and.w	r2, r3, #15
 8003066:	4613      	mov	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	1a9b      	subs	r3, r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	4413      	add	r3, r2
 8003076:	3304      	adds	r3, #4
 8003078:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	b2da      	uxtb	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_PCD_EP_Close+0x6e>
 8003096:	2302      	movs	r3, #2
 8003098:	e00e      	b.n	80030b8 <HAL_PCD_EP_Close+0x8c>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68f9      	ldr	r1, [r7, #12]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f002 f839 	bl	8005120 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	607a      	str	r2, [r7, #4]
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	460b      	mov	r3, r1
 80030ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030d0:	7afb      	ldrb	r3, [r7, #11]
 80030d2:	f003 020f 	and.w	r2, r3, #15
 80030d6:	4613      	mov	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4413      	add	r3, r2
 80030e6:	3304      	adds	r3, #4
 80030e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2200      	movs	r2, #0
 80030fa:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2200      	movs	r2, #0
 8003100:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003102:	7afb      	ldrb	r3, [r7, #11]
 8003104:	f003 030f 	and.w	r3, r3, #15
 8003108:	b2da      	uxtb	r2, r3
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d102      	bne.n	800311c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800311c:	7afb      	ldrb	r3, [r7, #11]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	461a      	mov	r2, r3
 8003132:	6979      	ldr	r1, [r7, #20]
 8003134:	f002 fb14 	bl	8005760 <USB_EP0StartXfer>
 8003138:	e008      	b.n	800314c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	b2db      	uxtb	r3, r3
 8003144:	461a      	mov	r2, r3
 8003146:	6979      	ldr	r1, [r7, #20]
 8003148:	f002 f8c6 	bl	80052d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	460b      	mov	r3, r1
 8003160:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	f003 020f 	and.w	r2, r3, #15
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	1a9b      	subs	r3, r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003178:	681b      	ldr	r3, [r3, #0]
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	607a      	str	r2, [r7, #4]
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	460b      	mov	r3, r1
 8003192:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003194:	7afb      	ldrb	r3, [r7, #11]
 8003196:	f003 020f 	and.w	r2, r3, #15
 800319a:	4613      	mov	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	3338      	adds	r3, #56	; 0x38
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	4413      	add	r3, r2
 80031a8:	3304      	adds	r3, #4
 80031aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2200      	movs	r2, #0
 80031bc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2201      	movs	r2, #1
 80031c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031c4:	7afb      	ldrb	r3, [r7, #11]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d102      	bne.n	80031de <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031de:	7afb      	ldrb	r3, [r7, #11]
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d109      	bne.n	80031fc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	461a      	mov	r2, r3
 80031f4:	6979      	ldr	r1, [r7, #20]
 80031f6:	f002 fab3 	bl	8005760 <USB_EP0StartXfer>
 80031fa:	e008      	b.n	800320e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6818      	ldr	r0, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	6979      	ldr	r1, [r7, #20]
 800320a:	f002 f865 	bl	80052d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	f003 020f 	and.w	r2, r3, #15
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	429a      	cmp	r2, r3
 8003230:	d901      	bls.n	8003236 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e050      	b.n	80032d8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800323a:	2b00      	cmp	r3, #0
 800323c:	da0f      	bge.n	800325e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	f003 020f 	and.w	r2, r3, #15
 8003244:	4613      	mov	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	3338      	adds	r3, #56	; 0x38
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	4413      	add	r3, r2
 8003252:	3304      	adds	r3, #4
 8003254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	705a      	strb	r2, [r3, #1]
 800325c:	e00d      	b.n	800327a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800325e:	78fa      	ldrb	r2, [r7, #3]
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	4413      	add	r3, r2
 8003270:	3304      	adds	r3, #4
 8003272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	b2da      	uxtb	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_PCD_EP_SetStall+0x82>
 8003296:	2302      	movs	r3, #2
 8003298:	e01e      	b.n	80032d8 <HAL_PCD_EP_SetStall+0xc0>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68f9      	ldr	r1, [r7, #12]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f002 fc3f 	bl	8005b2c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032ae:	78fb      	ldrb	r3, [r7, #3]
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10a      	bne.n	80032ce <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6818      	ldr	r0, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	b2d9      	uxtb	r1, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032c8:	461a      	mov	r2, r3
 80032ca:	f002 fe23 	bl	8005f14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	f003 020f 	and.w	r2, r3, #15
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d901      	bls.n	80032fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e042      	b.n	8003384 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003302:	2b00      	cmp	r3, #0
 8003304:	da0f      	bge.n	8003326 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	f003 020f 	and.w	r2, r3, #15
 800330c:	4613      	mov	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	1a9b      	subs	r3, r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	3338      	adds	r3, #56	; 0x38
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4413      	add	r3, r2
 800331a:	3304      	adds	r3, #4
 800331c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2201      	movs	r2, #1
 8003322:	705a      	strb	r2, [r3, #1]
 8003324:	e00f      	b.n	8003346 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003326:	78fb      	ldrb	r3, [r7, #3]
 8003328:	f003 020f 	and.w	r2, r3, #15
 800332c:	4613      	mov	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	4413      	add	r3, r2
 800333c:	3304      	adds	r3, #4
 800333e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	b2da      	uxtb	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_PCD_EP_ClrStall+0x86>
 8003362:	2302      	movs	r3, #2
 8003364:	e00e      	b.n	8003384 <HAL_PCD_EP_ClrStall+0xa4>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68f9      	ldr	r1, [r7, #12]
 8003374:	4618      	mov	r0, r3
 8003376:	f002 fc46 	bl	8005c06 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08a      	sub	sp, #40	; 0x28
 8003390:	af02      	add	r7, sp, #8
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	4613      	mov	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	3338      	adds	r3, #56	; 0x38
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	4413      	add	r3, r2
 80033b0:	3304      	adds	r3, #4
 80033b2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	699a      	ldr	r2, [r3, #24]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d901      	bls.n	80033c4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e06c      	b.n	800349e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	695a      	ldr	r2, [r3, #20]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	69fa      	ldr	r2, [r7, #28]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d902      	bls.n	80033e0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	3303      	adds	r3, #3
 80033e4:	089b      	lsrs	r3, r3, #2
 80033e6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033e8:	e02b      	b.n	8003442 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	695a      	ldr	r2, [r3, #20]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d902      	bls.n	8003406 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3303      	adds	r3, #3
 800340a:	089b      	lsrs	r3, r3, #2
 800340c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	68d9      	ldr	r1, [r3, #12]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	b2da      	uxtb	r2, r3
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800341e:	b2db      	uxtb	r3, r3
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	4603      	mov	r3, r0
 8003424:	6978      	ldr	r0, [r7, #20]
 8003426:	f002 faed 	bl	8005a04 <USB_WritePacket>

    ep->xfer_buff  += len;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	441a      	add	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	441a      	add	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4413      	add	r3, r2
 800344a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	b29b      	uxth	r3, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	429a      	cmp	r2, r3
 8003456:	d809      	bhi.n	800346c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	699a      	ldr	r2, [r3, #24]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003460:	429a      	cmp	r2, r3
 8003462:	d203      	bcs.n	800346c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1be      	bne.n	80033ea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	429a      	cmp	r2, r3
 8003476:	d811      	bhi.n	800349c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	2201      	movs	r2, #1
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800348c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	43db      	mvns	r3, r3
 8003492:	6939      	ldr	r1, [r7, #16]
 8003494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003498:	4013      	ands	r3, r2
 800349a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3720      	adds	r7, #32
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	333c      	adds	r3, #60	; 0x3c
 80034c0:	3304      	adds	r3, #4
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	f040 80a0 	bne.w	8003620 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d015      	beq.n	8003516 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4a72      	ldr	r2, [pc, #456]	; (80036b8 <PCD_EP_OutXfrComplete_int+0x210>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	f240 80dd 	bls.w	80036ae <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 80d7 	beq.w	80036ae <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4413      	add	r3, r2
 8003508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350c:	461a      	mov	r2, r3
 800350e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003512:	6093      	str	r3, [r2, #8]
 8003514:	e0cb      	b.n	80036ae <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	d009      	beq.n	8003534 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352c:	461a      	mov	r2, r3
 800352e:	2320      	movs	r3, #32
 8003530:	6093      	str	r3, [r2, #8]
 8003532:	e0bc      	b.n	80036ae <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800353a:	2b00      	cmp	r3, #0
 800353c:	f040 80b7 	bne.w	80036ae <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4a5d      	ldr	r2, [pc, #372]	; (80036b8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d90f      	bls.n	8003568 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4413      	add	r3, r2
 800355a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355e:	461a      	mov	r2, r3
 8003560:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003564:	6093      	str	r3, [r2, #8]
 8003566:	e0a2      	b.n	80036ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	4613      	mov	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800357a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	0159      	lsls	r1, r3, #5
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	440b      	add	r3, r1
 8003584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800358e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4403      	add	r3, r0
 800359e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80035a2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	4613      	mov	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035b6:	6819      	ldr	r1, [r3, #0]
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4403      	add	r3, r0
 80035c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4419      	add	r1, r3
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	4613      	mov	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4403      	add	r3, r0
 80035dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035e0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d114      	bne.n	8003612 <PCD_EP_OutXfrComplete_int+0x16a>
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d108      	bne.n	8003612 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800360a:	461a      	mov	r2, r3
 800360c:	2101      	movs	r1, #1
 800360e:	f002 fc81 	bl	8005f14 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	4619      	mov	r1, r3
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f004 fb39 	bl	8007c90 <HAL_PCD_DataOutStageCallback>
 800361e:	e046      	b.n	80036ae <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4a26      	ldr	r2, [pc, #152]	; (80036bc <PCD_EP_OutXfrComplete_int+0x214>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d124      	bne.n	8003672 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800363e:	461a      	mov	r2, r3
 8003640:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003644:	6093      	str	r3, [r2, #8]
 8003646:	e032      	b.n	80036ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b00      	cmp	r3, #0
 8003650:	d008      	beq.n	8003664 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4413      	add	r3, r2
 800365a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365e:	461a      	mov	r2, r3
 8003660:	2320      	movs	r3, #32
 8003662:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	4619      	mov	r1, r3
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f004 fb10 	bl	8007c90 <HAL_PCD_DataOutStageCallback>
 8003670:	e01d      	b.n	80036ae <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d114      	bne.n	80036a2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	4613      	mov	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d108      	bne.n	80036a2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800369a:	461a      	mov	r2, r3
 800369c:	2100      	movs	r1, #0
 800369e:	f002 fc39 	bl	8005f14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	4619      	mov	r1, r3
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f004 faf1 	bl	8007c90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	4f54300a 	.word	0x4f54300a
 80036bc:	4f54310a 	.word	0x4f54310a

080036c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	333c      	adds	r3, #60	; 0x3c
 80036d8:	3304      	adds	r3, #4
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	015a      	lsls	r2, r3, #5
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	4413      	add	r3, r2
 80036e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4a15      	ldr	r2, [pc, #84]	; (8003748 <PCD_EP_OutSetupPacket_int+0x88>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d90e      	bls.n	8003714 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d009      	beq.n	8003714 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4413      	add	r3, r2
 8003708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370c:	461a      	mov	r2, r3
 800370e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003712:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f004 faa9 	bl	8007c6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4a0a      	ldr	r2, [pc, #40]	; (8003748 <PCD_EP_OutSetupPacket_int+0x88>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d90c      	bls.n	800373c <PCD_EP_OutSetupPacket_int+0x7c>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d108      	bne.n	800373c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003734:	461a      	mov	r2, r3
 8003736:	2101      	movs	r1, #1
 8003738:	f002 fbec 	bl	8005f14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	4f54300a 	.word	0x4f54300a

0800374c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	70fb      	strb	r3, [r7, #3]
 8003758:	4613      	mov	r3, r2
 800375a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d107      	bne.n	800377a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800376a:	883b      	ldrh	r3, [r7, #0]
 800376c:	0419      	lsls	r1, r3, #16
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	430a      	orrs	r2, r1
 8003776:	629a      	str	r2, [r3, #40]	; 0x28
 8003778:	e028      	b.n	80037cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	0c1b      	lsrs	r3, r3, #16
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	4413      	add	r3, r2
 8003786:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003788:	2300      	movs	r3, #0
 800378a:	73fb      	strb	r3, [r7, #15]
 800378c:	e00d      	b.n	80037aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	3340      	adds	r3, #64	; 0x40
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	0c1b      	lsrs	r3, r3, #16
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	4413      	add	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	3301      	adds	r3, #1
 80037a8:	73fb      	strb	r3, [r7, #15]
 80037aa:	7bfa      	ldrb	r2, [r7, #15]
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d3ec      	bcc.n	800378e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80037b4:	883b      	ldrh	r3, [r7, #0]
 80037b6:	0418      	lsls	r0, r3, #16
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6819      	ldr	r1, [r3, #0]
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	3b01      	subs	r3, #1
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	4302      	orrs	r2, r0
 80037c4:	3340      	adds	r3, #64	; 0x40
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr

080037d8 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	887a      	ldrh	r2, [r7, #2]
 80037ea:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr

080037f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08a      	sub	sp, #40	; 0x28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e237      	b.n	8003c7a <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d050      	beq.n	80038b8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003816:	4ba3      	ldr	r3, [pc, #652]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b04      	cmp	r3, #4
 8003820:	d00c      	beq.n	800383c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003822:	4ba0      	ldr	r3, [pc, #640]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800382a:	2b08      	cmp	r3, #8
 800382c:	d112      	bne.n	8003854 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800382e:	4b9d      	ldr	r3, [pc, #628]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800383a:	d10b      	bne.n	8003854 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383c:	4b99      	ldr	r3, [pc, #612]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d036      	beq.n	80038b6 <HAL_RCC_OscConfig+0xbe>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d132      	bne.n	80038b6 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e212      	b.n	8003c7a <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	4b93      	ldr	r3, [pc, #588]	; (8003aa8 <HAL_RCC_OscConfig+0x2b0>)
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d013      	beq.n	800388e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003866:	f7fd fc71 	bl	800114c <HAL_GetTick>
 800386a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800386e:	f7fd fc6d 	bl	800114c <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b64      	cmp	r3, #100	; 0x64
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e1fc      	b.n	8003c7a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003880:	4b88      	ldr	r3, [pc, #544]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCC_OscConfig+0x76>
 800388c:	e014      	b.n	80038b8 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388e:	f7fd fc5d 	bl	800114c <HAL_GetTick>
 8003892:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003896:	f7fd fc59 	bl	800114c <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b64      	cmp	r3, #100	; 0x64
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e1e8      	b.n	8003c7a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a8:	4b7e      	ldr	r3, [pc, #504]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1f0      	bne.n	8003896 <HAL_RCC_OscConfig+0x9e>
 80038b4:	e000      	b.n	80038b8 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d077      	beq.n	80039b4 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038c4:	4b77      	ldr	r3, [pc, #476]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 030c 	and.w	r3, r3, #12
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00b      	beq.n	80038e8 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038d0:	4b74      	ldr	r3, [pc, #464]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d126      	bne.n	800392a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038dc:	4b71      	ldr	r3, [pc, #452]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d120      	bne.n	800392a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e8:	4b6e      	ldr	r3, [pc, #440]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <HAL_RCC_OscConfig+0x108>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d001      	beq.n	8003900 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e1bc      	b.n	8003c7a <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003900:	4b68      	ldr	r3, [pc, #416]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	21f8      	movs	r1, #248	; 0xf8
 800390e:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003910:	69b9      	ldr	r1, [r7, #24]
 8003912:	fa91 f1a1 	rbit	r1, r1
 8003916:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003918:	6979      	ldr	r1, [r7, #20]
 800391a:	fab1 f181 	clz	r1, r1
 800391e:	b2c9      	uxtb	r1, r1
 8003920:	408b      	lsls	r3, r1
 8003922:	4960      	ldr	r1, [pc, #384]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003924:	4313      	orrs	r3, r2
 8003926:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003928:	e044      	b.n	80039b4 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d02a      	beq.n	8003988 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003932:	4b5e      	ldr	r3, [pc, #376]	; (8003aac <HAL_RCC_OscConfig+0x2b4>)
 8003934:	2201      	movs	r2, #1
 8003936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003938:	f7fd fc08 	bl	800114c <HAL_GetTick>
 800393c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003940:	f7fd fc04 	bl	800114c <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e193      	b.n	8003c7a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003952:	4b54      	ldr	r3, [pc, #336]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f0      	beq.n	8003940 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395e:	4b51      	ldr	r3, [pc, #324]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	21f8      	movs	r1, #248	; 0xf8
 800396c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396e:	6939      	ldr	r1, [r7, #16]
 8003970:	fa91 f1a1 	rbit	r1, r1
 8003974:	60f9      	str	r1, [r7, #12]
  return result;
 8003976:	68f9      	ldr	r1, [r7, #12]
 8003978:	fab1 f181 	clz	r1, r1
 800397c:	b2c9      	uxtb	r1, r1
 800397e:	408b      	lsls	r3, r1
 8003980:	4948      	ldr	r1, [pc, #288]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003982:	4313      	orrs	r3, r2
 8003984:	600b      	str	r3, [r1, #0]
 8003986:	e015      	b.n	80039b4 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003988:	4b48      	ldr	r3, [pc, #288]	; (8003aac <HAL_RCC_OscConfig+0x2b4>)
 800398a:	2200      	movs	r2, #0
 800398c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398e:	f7fd fbdd 	bl	800114c <HAL_GetTick>
 8003992:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003996:	f7fd fbd9 	bl	800114c <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e168      	b.n	8003c7a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a8:	4b3e      	ldr	r3, [pc, #248]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1f0      	bne.n	8003996 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d030      	beq.n	8003a22 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d016      	beq.n	80039f6 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039c8:	4b39      	ldr	r3, [pc, #228]	; (8003ab0 <HAL_RCC_OscConfig+0x2b8>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ce:	f7fd fbbd 	bl	800114c <HAL_GetTick>
 80039d2:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039d6:	f7fd fbb9 	bl	800114c <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e148      	b.n	8003c7a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e8:	4b2e      	ldr	r3, [pc, #184]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 80039ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0f0      	beq.n	80039d6 <HAL_RCC_OscConfig+0x1de>
 80039f4:	e015      	b.n	8003a22 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f6:	4b2e      	ldr	r3, [pc, #184]	; (8003ab0 <HAL_RCC_OscConfig+0x2b8>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fc:	f7fd fba6 	bl	800114c <HAL_GetTick>
 8003a00:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a04:	f7fd fba2 	bl	800114c <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e131      	b.n	8003c7a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a16:	4b23      	ldr	r3, [pc, #140]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 8088 	beq.w	8003b40 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a30:	2300      	movs	r3, #0
 8003a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a36:	4b1b      	ldr	r3, [pc, #108]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d110      	bne.n	8003a64 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a42:	2300      	movs	r3, #0
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	4b17      	ldr	r3, [pc, #92]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	4a16      	ldr	r2, [pc, #88]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a50:	6413      	str	r3, [r2, #64]	; 0x40
 8003a52:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	60bb      	str	r3, [r7, #8]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003a64:	4b13      	ldr	r3, [pc, #76]	; (8003ab4 <HAL_RCC_OscConfig+0x2bc>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a12      	ldr	r2, [pc, #72]	; (8003ab4 <HAL_RCC_OscConfig+0x2bc>)
 8003a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a70:	4b10      	ldr	r3, [pc, #64]	; (8003ab4 <HAL_RCC_OscConfig+0x2bc>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d123      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a7c:	4b0d      	ldr	r3, [pc, #52]	; (8003ab4 <HAL_RCC_OscConfig+0x2bc>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a0c      	ldr	r2, [pc, #48]	; (8003ab4 <HAL_RCC_OscConfig+0x2bc>)
 8003a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a88:	f7fd fb60 	bl	800114c <HAL_GetTick>
 8003a8c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8e:	e013      	b.n	8003ab8 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a90:	f7fd fb5c 	bl	800114c <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d90c      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e0eb      	b.n	8003c7a <HAL_RCC_OscConfig+0x482>
 8003aa2:	bf00      	nop
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	40023802 	.word	0x40023802
 8003aac:	42470000 	.word	0x42470000
 8003ab0:	42470e80 	.word	0x42470e80
 8003ab4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab8:	4b72      	ldr	r3, [pc, #456]	; (8003c84 <HAL_RCC_OscConfig+0x48c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0e5      	beq.n	8003a90 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	4b6f      	ldr	r3, [pc, #444]	; (8003c88 <HAL_RCC_OscConfig+0x490>)
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d015      	beq.n	8003b02 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad6:	f7fd fb39 	bl	800114c <HAL_GetTick>
 8003ada:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003adc:	e00a      	b.n	8003af4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ade:	f7fd fb35 	bl	800114c <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e0c2      	b.n	8003c7a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af4:	4b65      	ldr	r3, [pc, #404]	; (8003c8c <HAL_RCC_OscConfig+0x494>)
 8003af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0ee      	beq.n	8003ade <HAL_RCC_OscConfig+0x2e6>
 8003b00:	e014      	b.n	8003b2c <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b02:	f7fd fb23 	bl	800114c <HAL_GetTick>
 8003b06:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b08:	e00a      	b.n	8003b20 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b0a:	f7fd fb1f 	bl	800114c <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e0ac      	b.n	8003c7a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b20:	4b5a      	ldr	r3, [pc, #360]	; (8003c8c <HAL_RCC_OscConfig+0x494>)
 8003b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1ee      	bne.n	8003b0a <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d105      	bne.n	8003b40 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b34:	4b55      	ldr	r3, [pc, #340]	; (8003c8c <HAL_RCC_OscConfig+0x494>)
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	4a54      	ldr	r2, [pc, #336]	; (8003c8c <HAL_RCC_OscConfig+0x494>)
 8003b3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 8097 	beq.w	8003c78 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b4a:	4b50      	ldr	r3, [pc, #320]	; (8003c8c <HAL_RCC_OscConfig+0x494>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d061      	beq.n	8003c1a <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d146      	bne.n	8003bec <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5e:	4b4c      	ldr	r3, [pc, #304]	; (8003c90 <HAL_RCC_OscConfig+0x498>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b64:	f7fd faf2 	bl	800114c <HAL_GetTick>
 8003b68:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6c:	f7fd faee 	bl	800114c <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b64      	cmp	r3, #100	; 0x64
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e07d      	b.n	8003c7a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7e:	4b43      	ldr	r3, [pc, #268]	; (8003c8c <HAL_RCC_OscConfig+0x494>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b8a:	4b40      	ldr	r3, [pc, #256]	; (8003c8c <HAL_RCC_OscConfig+0x494>)
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	4b41      	ldr	r3, [pc, #260]	; (8003c94 <HAL_RCC_OscConfig+0x49c>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	69d1      	ldr	r1, [r2, #28]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6a12      	ldr	r2, [r2, #32]
 8003b9a:	4311      	orrs	r1, r2
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ba0:	0192      	lsls	r2, r2, #6
 8003ba2:	4311      	orrs	r1, r2
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ba8:	0612      	lsls	r2, r2, #24
 8003baa:	4311      	orrs	r1, r2
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003bb0:	0852      	lsrs	r2, r2, #1
 8003bb2:	3a01      	subs	r2, #1
 8003bb4:	0412      	lsls	r2, r2, #16
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	4934      	ldr	r1, [pc, #208]	; (8003c8c <HAL_RCC_OscConfig+0x494>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bbe:	4b34      	ldr	r3, [pc, #208]	; (8003c90 <HAL_RCC_OscConfig+0x498>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc4:	f7fd fac2 	bl	800114c <HAL_GetTick>
 8003bc8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bcc:	f7fd fabe 	bl	800114c <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b64      	cmp	r3, #100	; 0x64
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e04d      	b.n	8003c7a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bde:	4b2b      	ldr	r3, [pc, #172]	; (8003c8c <HAL_RCC_OscConfig+0x494>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0x3d4>
 8003bea:	e045      	b.n	8003c78 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bec:	4b28      	ldr	r3, [pc, #160]	; (8003c90 <HAL_RCC_OscConfig+0x498>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf2:	f7fd faab 	bl	800114c <HAL_GetTick>
 8003bf6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bfa:	f7fd faa7 	bl	800114c <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b64      	cmp	r3, #100	; 0x64
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e036      	b.n	8003c7a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0c:	4b1f      	ldr	r3, [pc, #124]	; (8003c8c <HAL_RCC_OscConfig+0x494>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1f0      	bne.n	8003bfa <HAL_RCC_OscConfig+0x402>
 8003c18:	e02e      	b.n	8003c78 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e029      	b.n	8003c7a <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8003c26:	4b19      	ldr	r3, [pc, #100]	; (8003c8c <HAL_RCC_OscConfig+0x494>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d11c      	bne.n	8003c74 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d115      	bne.n	8003c74 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	099b      	lsrs	r3, r3, #6
 8003c4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d10d      	bne.n	8003c74 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d106      	bne.n	8003c74 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d001      	beq.n	8003c78 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e000      	b.n	8003c7a <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3728      	adds	r7, #40	; 0x28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40007000 	.word	0x40007000
 8003c88:	40023870 	.word	0x40023870
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	42470060 	.word	0x42470060
 8003c94:	f0bc8000 	.word	0xf0bc8000

08003c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0d2      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cac:	4b6b      	ldr	r3, [pc, #428]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d90c      	bls.n	8003cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cba:	4b68      	ldr	r3, [pc, #416]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc2:	4b66      	ldr	r3, [pc, #408]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0be      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d020      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cec:	4b5c      	ldr	r3, [pc, #368]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	4a5b      	ldr	r2, [pc, #364]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8003d04:	4b56      	ldr	r3, [pc, #344]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4a55      	ldr	r2, [pc, #340]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003d0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d10:	4b53      	ldr	r3, [pc, #332]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	4950      	ldr	r1, [pc, #320]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d040      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d107      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d36:	4b4a      	ldr	r3, [pc, #296]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d115      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e085      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d4e:	4b44      	ldr	r3, [pc, #272]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d109      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e079      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d5e:	4b40      	ldr	r3, [pc, #256]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e071      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d6e:	4b3c      	ldr	r3, [pc, #240]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f023 0203 	bic.w	r2, r3, #3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	4939      	ldr	r1, [pc, #228]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d80:	f7fd f9e4 	bl	800114c <HAL_GetTick>
 8003d84:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d86:	e00a      	b.n	8003d9e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d88:	f7fd f9e0 	bl	800114c <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e059      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9e:	4b30      	ldr	r3, [pc, #192]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 020c 	and.w	r2, r3, #12
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d1eb      	bne.n	8003d88 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003db0:	4b2a      	ldr	r3, [pc, #168]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d20c      	bcs.n	8003dd8 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dbe:	4b27      	ldr	r3, [pc, #156]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc6:	4b25      	ldr	r3, [pc, #148]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e03c      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003de4:	4b1e      	ldr	r3, [pc, #120]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	491b      	ldr	r1, [pc, #108]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d009      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e02:	4b17      	ldr	r3, [pc, #92]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4913      	ldr	r1, [pc, #76]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003e16:	f000 f82b 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 8003e1a:	4601      	mov	r1, r0
 8003e1c:	4b10      	ldr	r3, [pc, #64]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e24:	22f0      	movs	r2, #240	; 0xf0
 8003e26:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	fa92 f2a2 	rbit	r2, r2
 8003e2e:	60fa      	str	r2, [r7, #12]
  return result;
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	fab2 f282 	clz	r2, r2
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	40d3      	lsrs	r3, r2
 8003e3a:	4a0a      	ldr	r2, [pc, #40]	; (8003e64 <HAL_RCC_ClockConfig+0x1cc>)
 8003e3c:	5cd3      	ldrb	r3, [r2, r3]
 8003e3e:	fa21 f303 	lsr.w	r3, r1, r3
 8003e42:	4a09      	ldr	r2, [pc, #36]	; (8003e68 <HAL_RCC_ClockConfig+0x1d0>)
 8003e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e46:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <HAL_RCC_ClockConfig+0x1d4>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fd f93c 	bl	80010c8 <HAL_InitTick>

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40023c00 	.word	0x40023c00
 8003e60:	40023800 	.word	0x40023800
 8003e64:	0800842c 	.word	0x0800842c
 8003e68:	20000078 	.word	0x20000078
 8003e6c:	2000007c 	.word	0x2000007c

08003e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e74:	b084      	sub	sp, #16
 8003e76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	607b      	str	r3, [r7, #4]
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	2300      	movs	r3, #0
 8003e82:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e88:	4b67      	ldr	r3, [pc, #412]	; (8004028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 030c 	and.w	r3, r3, #12
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d00d      	beq.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x40>
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	f200 80bd 	bhi.w	8004014 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d003      	beq.n	8003eaa <HAL_RCC_GetSysClockFreq+0x3a>
 8003ea2:	e0b7      	b.n	8004014 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ea4:	4b61      	ldr	r3, [pc, #388]	; (800402c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ea6:	60bb      	str	r3, [r7, #8]
       break;
 8003ea8:	e0b7      	b.n	800401a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eaa:	4b61      	ldr	r3, [pc, #388]	; (8004030 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003eac:	60bb      	str	r3, [r7, #8]
      break;
 8003eae:	e0b4      	b.n	800401a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eb0:	4b5d      	ldr	r3, [pc, #372]	; (8004028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eba:	4b5b      	ldr	r3, [pc, #364]	; (8004028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d04d      	beq.n	8003f62 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ec6:	4b58      	ldr	r3, [pc, #352]	; (8004028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	099b      	lsrs	r3, r3, #6
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ed6:	f04f 0100 	mov.w	r1, #0
 8003eda:	ea02 0800 	and.w	r8, r2, r0
 8003ede:	ea03 0901 	and.w	r9, r3, r1
 8003ee2:	4640      	mov	r0, r8
 8003ee4:	4649      	mov	r1, r9
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	014b      	lsls	r3, r1, #5
 8003ef0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ef4:	0142      	lsls	r2, r0, #5
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	4619      	mov	r1, r3
 8003efa:	ebb0 0008 	subs.w	r0, r0, r8
 8003efe:	eb61 0109 	sbc.w	r1, r1, r9
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	018b      	lsls	r3, r1, #6
 8003f0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f10:	0182      	lsls	r2, r0, #6
 8003f12:	1a12      	subs	r2, r2, r0
 8003f14:	eb63 0301 	sbc.w	r3, r3, r1
 8003f18:	f04f 0000 	mov.w	r0, #0
 8003f1c:	f04f 0100 	mov.w	r1, #0
 8003f20:	00d9      	lsls	r1, r3, #3
 8003f22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f26:	00d0      	lsls	r0, r2, #3
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	eb12 0208 	adds.w	r2, r2, r8
 8003f30:	eb43 0309 	adc.w	r3, r3, r9
 8003f34:	f04f 0000 	mov.w	r0, #0
 8003f38:	f04f 0100 	mov.w	r1, #0
 8003f3c:	0259      	lsls	r1, r3, #9
 8003f3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003f42:	0250      	lsls	r0, r2, #9
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4610      	mov	r0, r2
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	f7fc f93e 	bl	80001d4 <__aeabi_uldivmod>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	e04a      	b.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f62:	4b31      	ldr	r3, [pc, #196]	; (8004028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	099b      	lsrs	r3, r3, #6
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f72:	f04f 0100 	mov.w	r1, #0
 8003f76:	ea02 0400 	and.w	r4, r2, r0
 8003f7a:	ea03 0501 	and.w	r5, r3, r1
 8003f7e:	4620      	mov	r0, r4
 8003f80:	4629      	mov	r1, r5
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	014b      	lsls	r3, r1, #5
 8003f8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f90:	0142      	lsls	r2, r0, #5
 8003f92:	4610      	mov	r0, r2
 8003f94:	4619      	mov	r1, r3
 8003f96:	1b00      	subs	r0, r0, r4
 8003f98:	eb61 0105 	sbc.w	r1, r1, r5
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	018b      	lsls	r3, r1, #6
 8003fa6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003faa:	0182      	lsls	r2, r0, #6
 8003fac:	1a12      	subs	r2, r2, r0
 8003fae:	eb63 0301 	sbc.w	r3, r3, r1
 8003fb2:	f04f 0000 	mov.w	r0, #0
 8003fb6:	f04f 0100 	mov.w	r1, #0
 8003fba:	00d9      	lsls	r1, r3, #3
 8003fbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fc0:	00d0      	lsls	r0, r2, #3
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	1912      	adds	r2, r2, r4
 8003fc8:	eb45 0303 	adc.w	r3, r5, r3
 8003fcc:	f04f 0000 	mov.w	r0, #0
 8003fd0:	f04f 0100 	mov.w	r1, #0
 8003fd4:	0299      	lsls	r1, r3, #10
 8003fd6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003fda:	0290      	lsls	r0, r2, #10
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	f7fc f8f2 	bl	80001d4 <__aeabi_uldivmod>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	0c1b      	lsrs	r3, r3, #16
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	3301      	adds	r3, #1
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004010:	60bb      	str	r3, [r7, #8]
      break;
 8004012:	e002      	b.n	800401a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004016:	60bb      	str	r3, [r7, #8]
      break;
 8004018:	bf00      	nop
    }
  }
  return sysclockfreq;
 800401a:	68bb      	ldr	r3, [r7, #8]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004026:	bf00      	nop
 8004028:	40023800 	.word	0x40023800
 800402c:	00f42400 	.word	0x00f42400
 8004030:	007a1200 	.word	0x007a1200

08004034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004038:	4b02      	ldr	r3, [pc, #8]	; (8004044 <HAL_RCC_GetHCLKFreq+0x10>)
 800403a:	681b      	ldr	r3, [r3, #0]
}
 800403c:	4618      	mov	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr
 8004044:	20000078 	.word	0x20000078

08004048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e041      	b.n	80040de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fc ff98 	bl	8000fa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	4619      	mov	r1, r3
 8004086:	4610      	mov	r0, r2
 8004088:	f000 faba 	bl	8004600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d001      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e04e      	b.n	800419e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a22      	ldr	r2, [pc, #136]	; (80041a8 <HAL_TIM_Base_Start_IT+0xc0>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d022      	beq.n	8004168 <HAL_TIM_Base_Start_IT+0x80>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412a:	d01d      	beq.n	8004168 <HAL_TIM_Base_Start_IT+0x80>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a1e      	ldr	r2, [pc, #120]	; (80041ac <HAL_TIM_Base_Start_IT+0xc4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d018      	beq.n	8004168 <HAL_TIM_Base_Start_IT+0x80>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a1d      	ldr	r2, [pc, #116]	; (80041b0 <HAL_TIM_Base_Start_IT+0xc8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d013      	beq.n	8004168 <HAL_TIM_Base_Start_IT+0x80>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1b      	ldr	r2, [pc, #108]	; (80041b4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00e      	beq.n	8004168 <HAL_TIM_Base_Start_IT+0x80>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a1a      	ldr	r2, [pc, #104]	; (80041b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d009      	beq.n	8004168 <HAL_TIM_Base_Start_IT+0x80>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a18      	ldr	r2, [pc, #96]	; (80041bc <HAL_TIM_Base_Start_IT+0xd4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d004      	beq.n	8004168 <HAL_TIM_Base_Start_IT+0x80>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a17      	ldr	r2, [pc, #92]	; (80041c0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d111      	bne.n	800418c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b06      	cmp	r3, #6
 8004178:	d010      	beq.n	800419c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f042 0201 	orr.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418a:	e007      	b.n	800419c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr
 80041a8:	40010000 	.word	0x40010000
 80041ac:	40000400 	.word	0x40000400
 80041b0:	40000800 	.word	0x40000800
 80041b4:	40000c00 	.word	0x40000c00
 80041b8:	40010400 	.word	0x40010400
 80041bc:	40014000 	.word	0x40014000
 80041c0:	40001800 	.word	0x40001800

080041c4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0201 	bic.w	r2, r2, #1
 80041da:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6a1a      	ldr	r2, [r3, #32]
 80041e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80041e6:	4013      	ands	r3, r2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10f      	bne.n	800420c <HAL_TIM_Base_Stop_IT+0x48>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6a1a      	ldr	r2, [r3, #32]
 80041f2:	f240 4344 	movw	r3, #1092	; 0x444
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d107      	bne.n	800420c <HAL_TIM_Base_Stop_IT+0x48>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0201 	bic.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr

08004220 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b02      	cmp	r3, #2
 8004234:	d122      	bne.n	800427c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b02      	cmp	r3, #2
 8004242:	d11b      	bne.n	800427c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0202 	mvn.w	r2, #2
 800424c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f9b1 	bl	80045ca <HAL_TIM_IC_CaptureCallback>
 8004268:	e005      	b.n	8004276 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f9a4 	bl	80045b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f9b3 	bl	80045dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b04      	cmp	r3, #4
 8004288:	d122      	bne.n	80042d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b04      	cmp	r3, #4
 8004296:	d11b      	bne.n	80042d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f06f 0204 	mvn.w	r2, #4
 80042a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2202      	movs	r2, #2
 80042a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f987 	bl	80045ca <HAL_TIM_IC_CaptureCallback>
 80042bc:	e005      	b.n	80042ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f97a 	bl	80045b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 f989 	bl	80045dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d122      	bne.n	8004324 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f003 0308 	and.w	r3, r3, #8
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d11b      	bne.n	8004324 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f06f 0208 	mvn.w	r2, #8
 80042f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2204      	movs	r2, #4
 80042fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f95d 	bl	80045ca <HAL_TIM_IC_CaptureCallback>
 8004310:	e005      	b.n	800431e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f950 	bl	80045b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f95f 	bl	80045dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f003 0310 	and.w	r3, r3, #16
 800432e:	2b10      	cmp	r3, #16
 8004330:	d122      	bne.n	8004378 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0310 	and.w	r3, r3, #16
 800433c:	2b10      	cmp	r3, #16
 800433e:	d11b      	bne.n	8004378 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f06f 0210 	mvn.w	r2, #16
 8004348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2208      	movs	r2, #8
 800434e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f933 	bl	80045ca <HAL_TIM_IC_CaptureCallback>
 8004364:	e005      	b.n	8004372 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f926 	bl	80045b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f935 	bl	80045dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b01      	cmp	r3, #1
 8004384:	d10e      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b01      	cmp	r3, #1
 8004392:	d107      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0201 	mvn.w	r2, #1
 800439c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fc fb3c 	bl	8000a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ae:	2b80      	cmp	r3, #128	; 0x80
 80043b0:	d10e      	bne.n	80043d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043bc:	2b80      	cmp	r3, #128	; 0x80
 80043be:	d107      	bne.n	80043d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 facf 	bl	800496e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b40      	cmp	r3, #64	; 0x40
 80043dc:	d10e      	bne.n	80043fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e8:	2b40      	cmp	r3, #64	; 0x40
 80043ea:	d107      	bne.n	80043fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f8f9 	bl	80045ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b20      	cmp	r3, #32
 8004408:	d10e      	bne.n	8004428 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f003 0320 	and.w	r3, r3, #32
 8004414:	2b20      	cmp	r3, #32
 8004416:	d107      	bne.n	8004428 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f06f 0220 	mvn.w	r2, #32
 8004420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fa9a 	bl	800495c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004428:	bf00      	nop
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_TIM_ConfigClockSource+0x18>
 8004444:	2302      	movs	r3, #2
 8004446:	e0b3      	b.n	80045b0 <HAL_TIM_ConfigClockSource+0x180>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004466:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800446e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004480:	d03e      	beq.n	8004500 <HAL_TIM_ConfigClockSource+0xd0>
 8004482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004486:	f200 8087 	bhi.w	8004598 <HAL_TIM_ConfigClockSource+0x168>
 800448a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448e:	f000 8085 	beq.w	800459c <HAL_TIM_ConfigClockSource+0x16c>
 8004492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004496:	d87f      	bhi.n	8004598 <HAL_TIM_ConfigClockSource+0x168>
 8004498:	2b70      	cmp	r3, #112	; 0x70
 800449a:	d01a      	beq.n	80044d2 <HAL_TIM_ConfigClockSource+0xa2>
 800449c:	2b70      	cmp	r3, #112	; 0x70
 800449e:	d87b      	bhi.n	8004598 <HAL_TIM_ConfigClockSource+0x168>
 80044a0:	2b60      	cmp	r3, #96	; 0x60
 80044a2:	d050      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0x116>
 80044a4:	2b60      	cmp	r3, #96	; 0x60
 80044a6:	d877      	bhi.n	8004598 <HAL_TIM_ConfigClockSource+0x168>
 80044a8:	2b50      	cmp	r3, #80	; 0x50
 80044aa:	d03c      	beq.n	8004526 <HAL_TIM_ConfigClockSource+0xf6>
 80044ac:	2b50      	cmp	r3, #80	; 0x50
 80044ae:	d873      	bhi.n	8004598 <HAL_TIM_ConfigClockSource+0x168>
 80044b0:	2b40      	cmp	r3, #64	; 0x40
 80044b2:	d058      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0x136>
 80044b4:	2b40      	cmp	r3, #64	; 0x40
 80044b6:	d86f      	bhi.n	8004598 <HAL_TIM_ConfigClockSource+0x168>
 80044b8:	2b30      	cmp	r3, #48	; 0x30
 80044ba:	d064      	beq.n	8004586 <HAL_TIM_ConfigClockSource+0x156>
 80044bc:	2b30      	cmp	r3, #48	; 0x30
 80044be:	d86b      	bhi.n	8004598 <HAL_TIM_ConfigClockSource+0x168>
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d060      	beq.n	8004586 <HAL_TIM_ConfigClockSource+0x156>
 80044c4:	2b20      	cmp	r3, #32
 80044c6:	d867      	bhi.n	8004598 <HAL_TIM_ConfigClockSource+0x168>
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d05c      	beq.n	8004586 <HAL_TIM_ConfigClockSource+0x156>
 80044cc:	2b10      	cmp	r3, #16
 80044ce:	d05a      	beq.n	8004586 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80044d0:	e062      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6818      	ldr	r0, [r3, #0]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	6899      	ldr	r1, [r3, #8]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f000 f9a2 	bl	800482a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	609a      	str	r2, [r3, #8]
      break;
 80044fe:	e04e      	b.n	800459e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	6899      	ldr	r1, [r3, #8]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f000 f98b 	bl	800482a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004522:	609a      	str	r2, [r3, #8]
      break;
 8004524:	e03b      	b.n	800459e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6818      	ldr	r0, [r3, #0]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	6859      	ldr	r1, [r3, #4]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	461a      	mov	r2, r3
 8004534:	f000 f902 	bl	800473c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2150      	movs	r1, #80	; 0x50
 800453e:	4618      	mov	r0, r3
 8004540:	f000 f959 	bl	80047f6 <TIM_ITRx_SetConfig>
      break;
 8004544:	e02b      	b.n	800459e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6818      	ldr	r0, [r3, #0]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	6859      	ldr	r1, [r3, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	461a      	mov	r2, r3
 8004554:	f000 f920 	bl	8004798 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2160      	movs	r1, #96	; 0x60
 800455e:	4618      	mov	r0, r3
 8004560:	f000 f949 	bl	80047f6 <TIM_ITRx_SetConfig>
      break;
 8004564:	e01b      	b.n	800459e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	6859      	ldr	r1, [r3, #4]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	461a      	mov	r2, r3
 8004574:	f000 f8e2 	bl	800473c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2140      	movs	r1, #64	; 0x40
 800457e:	4618      	mov	r0, r3
 8004580:	f000 f939 	bl	80047f6 <TIM_ITRx_SetConfig>
      break;
 8004584:	e00b      	b.n	800459e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4619      	mov	r1, r3
 8004590:	4610      	mov	r0, r2
 8004592:	f000 f930 	bl	80047f6 <TIM_ITRx_SetConfig>
        break;
 8004596:	e002      	b.n	800459e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004598:	bf00      	nop
 800459a:	e000      	b.n	800459e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800459c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr

080045ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr

080045dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr

080045ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a3f      	ldr	r2, [pc, #252]	; (8004710 <TIM_Base_SetConfig+0x110>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d013      	beq.n	8004640 <TIM_Base_SetConfig+0x40>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800461e:	d00f      	beq.n	8004640 <TIM_Base_SetConfig+0x40>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a3c      	ldr	r2, [pc, #240]	; (8004714 <TIM_Base_SetConfig+0x114>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00b      	beq.n	8004640 <TIM_Base_SetConfig+0x40>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a3b      	ldr	r2, [pc, #236]	; (8004718 <TIM_Base_SetConfig+0x118>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d007      	beq.n	8004640 <TIM_Base_SetConfig+0x40>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a3a      	ldr	r2, [pc, #232]	; (800471c <TIM_Base_SetConfig+0x11c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d003      	beq.n	8004640 <TIM_Base_SetConfig+0x40>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a39      	ldr	r2, [pc, #228]	; (8004720 <TIM_Base_SetConfig+0x120>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d108      	bne.n	8004652 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a2e      	ldr	r2, [pc, #184]	; (8004710 <TIM_Base_SetConfig+0x110>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d02b      	beq.n	80046b2 <TIM_Base_SetConfig+0xb2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004660:	d027      	beq.n	80046b2 <TIM_Base_SetConfig+0xb2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a2b      	ldr	r2, [pc, #172]	; (8004714 <TIM_Base_SetConfig+0x114>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d023      	beq.n	80046b2 <TIM_Base_SetConfig+0xb2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a2a      	ldr	r2, [pc, #168]	; (8004718 <TIM_Base_SetConfig+0x118>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d01f      	beq.n	80046b2 <TIM_Base_SetConfig+0xb2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a29      	ldr	r2, [pc, #164]	; (800471c <TIM_Base_SetConfig+0x11c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d01b      	beq.n	80046b2 <TIM_Base_SetConfig+0xb2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a28      	ldr	r2, [pc, #160]	; (8004720 <TIM_Base_SetConfig+0x120>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d017      	beq.n	80046b2 <TIM_Base_SetConfig+0xb2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a27      	ldr	r2, [pc, #156]	; (8004724 <TIM_Base_SetConfig+0x124>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d013      	beq.n	80046b2 <TIM_Base_SetConfig+0xb2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a26      	ldr	r2, [pc, #152]	; (8004728 <TIM_Base_SetConfig+0x128>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d00f      	beq.n	80046b2 <TIM_Base_SetConfig+0xb2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a25      	ldr	r2, [pc, #148]	; (800472c <TIM_Base_SetConfig+0x12c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00b      	beq.n	80046b2 <TIM_Base_SetConfig+0xb2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a24      	ldr	r2, [pc, #144]	; (8004730 <TIM_Base_SetConfig+0x130>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d007      	beq.n	80046b2 <TIM_Base_SetConfig+0xb2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a23      	ldr	r2, [pc, #140]	; (8004734 <TIM_Base_SetConfig+0x134>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d003      	beq.n	80046b2 <TIM_Base_SetConfig+0xb2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a22      	ldr	r2, [pc, #136]	; (8004738 <TIM_Base_SetConfig+0x138>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d108      	bne.n	80046c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a09      	ldr	r2, [pc, #36]	; (8004710 <TIM_Base_SetConfig+0x110>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d003      	beq.n	80046f8 <TIM_Base_SetConfig+0xf8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a0b      	ldr	r2, [pc, #44]	; (8004720 <TIM_Base_SetConfig+0x120>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d103      	bne.n	8004700 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	615a      	str	r2, [r3, #20]
}
 8004706:	bf00      	nop
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr
 8004710:	40010000 	.word	0x40010000
 8004714:	40000400 	.word	0x40000400
 8004718:	40000800 	.word	0x40000800
 800471c:	40000c00 	.word	0x40000c00
 8004720:	40010400 	.word	0x40010400
 8004724:	40014000 	.word	0x40014000
 8004728:	40014400 	.word	0x40014400
 800472c:	40014800 	.word	0x40014800
 8004730:	40001800 	.word	0x40001800
 8004734:	40001c00 	.word	0x40001c00
 8004738:	40002000 	.word	0x40002000

0800473c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	f023 0201 	bic.w	r2, r3, #1
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4313      	orrs	r3, r2
 8004770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f023 030a 	bic.w	r3, r3, #10
 8004778:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	621a      	str	r2, [r3, #32]
}
 800478e:	bf00      	nop
 8004790:	371c      	adds	r7, #28
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr

08004798 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	f023 0210 	bic.w	r2, r3, #16
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	031b      	lsls	r3, r3, #12
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	4313      	orrs	r3, r2
 80047de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	621a      	str	r2, [r3, #32]
}
 80047ec:	bf00      	nop
 80047ee:	371c      	adds	r7, #28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr

080047f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b085      	sub	sp, #20
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	f043 0307 	orr.w	r3, r3, #7
 8004818:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	609a      	str	r2, [r3, #8]
}
 8004820:	bf00      	nop
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr

0800482a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800482a:	b480      	push	{r7}
 800482c:	b087      	sub	sp, #28
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	607a      	str	r2, [r7, #4]
 8004836:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004844:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	021a      	lsls	r2, r3, #8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	431a      	orrs	r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	4313      	orrs	r3, r2
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	609a      	str	r2, [r3, #8]
}
 800485e:	bf00      	nop
 8004860:	371c      	adds	r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr

08004868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800487c:	2302      	movs	r3, #2
 800487e:	e05a      	b.n	8004936 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a20      	ldr	r2, [pc, #128]	; (8004940 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d022      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048cc:	d01d      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a1c      	ldr	r2, [pc, #112]	; (8004944 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d018      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a1a      	ldr	r2, [pc, #104]	; (8004948 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d013      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a19      	ldr	r2, [pc, #100]	; (800494c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00e      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a17      	ldr	r2, [pc, #92]	; (8004950 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d009      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a16      	ldr	r2, [pc, #88]	; (8004954 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d004      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a14      	ldr	r2, [pc, #80]	; (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d10c      	bne.n	8004924 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004910:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	4313      	orrs	r3, r2
 800491a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr
 8004940:	40010000 	.word	0x40010000
 8004944:	40000400 	.word	0x40000400
 8004948:	40000800 	.word	0x40000800
 800494c:	40000c00 	.word	0x40000c00
 8004950:	40010400 	.word	0x40010400
 8004954:	40014000 	.word	0x40014000
 8004958:	40001800 	.word	0x40001800

0800495c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	bc80      	pop	{r7}
 800496c:	4770      	bx	lr

0800496e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	bc80      	pop	{r7}
 800497e:	4770      	bx	lr

08004980 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004980:	b084      	sub	sp, #16
 8004982:	b580      	push	{r7, lr}
 8004984:	b084      	sub	sp, #16
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	f107 001c 	add.w	r0, r7, #28
 800498e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	2b01      	cmp	r3, #1
 8004996:	d122      	bne.n	80049de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80049ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d105      	bne.n	80049d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f001 fafa 	bl	8005fcc <USB_CoreReset>
 80049d8:	4603      	mov	r3, r0
 80049da:	73fb      	strb	r3, [r7, #15]
 80049dc:	e010      	b.n	8004a00 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f001 faee 	bl	8005fcc <USB_CoreReset>
 80049f0:	4603      	mov	r3, r0
 80049f2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d10b      	bne.n	8004a1e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f043 0206 	orr.w	r2, r3, #6
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f043 0220 	orr.w	r2, r3, #32
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a2a:	b004      	add	sp, #16
 8004a2c:	4770      	bx	lr
	...

08004a30 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d165      	bne.n	8004b10 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	4a41      	ldr	r2, [pc, #260]	; (8004b4c <USB_SetTurnaroundTime+0x11c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d906      	bls.n	8004a5a <USB_SetTurnaroundTime+0x2a>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	4a40      	ldr	r2, [pc, #256]	; (8004b50 <USB_SetTurnaroundTime+0x120>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d202      	bcs.n	8004a5a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a54:	230f      	movs	r3, #15
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	e062      	b.n	8004b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	4a3c      	ldr	r2, [pc, #240]	; (8004b50 <USB_SetTurnaroundTime+0x120>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d306      	bcc.n	8004a70 <USB_SetTurnaroundTime+0x40>
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	4a3b      	ldr	r2, [pc, #236]	; (8004b54 <USB_SetTurnaroundTime+0x124>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d202      	bcs.n	8004a70 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a6a:	230e      	movs	r3, #14
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	e057      	b.n	8004b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	4a38      	ldr	r2, [pc, #224]	; (8004b54 <USB_SetTurnaroundTime+0x124>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d306      	bcc.n	8004a86 <USB_SetTurnaroundTime+0x56>
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4a37      	ldr	r2, [pc, #220]	; (8004b58 <USB_SetTurnaroundTime+0x128>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d202      	bcs.n	8004a86 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004a80:	230d      	movs	r3, #13
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	e04c      	b.n	8004b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	4a33      	ldr	r2, [pc, #204]	; (8004b58 <USB_SetTurnaroundTime+0x128>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d306      	bcc.n	8004a9c <USB_SetTurnaroundTime+0x6c>
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	4a32      	ldr	r2, [pc, #200]	; (8004b5c <USB_SetTurnaroundTime+0x12c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d802      	bhi.n	8004a9c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a96:	230c      	movs	r3, #12
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	e041      	b.n	8004b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4a2f      	ldr	r2, [pc, #188]	; (8004b5c <USB_SetTurnaroundTime+0x12c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d906      	bls.n	8004ab2 <USB_SetTurnaroundTime+0x82>
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	4a2e      	ldr	r2, [pc, #184]	; (8004b60 <USB_SetTurnaroundTime+0x130>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d802      	bhi.n	8004ab2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004aac:	230b      	movs	r3, #11
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	e036      	b.n	8004b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	4a2a      	ldr	r2, [pc, #168]	; (8004b60 <USB_SetTurnaroundTime+0x130>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d906      	bls.n	8004ac8 <USB_SetTurnaroundTime+0x98>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	4a29      	ldr	r2, [pc, #164]	; (8004b64 <USB_SetTurnaroundTime+0x134>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d802      	bhi.n	8004ac8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004ac2:	230a      	movs	r3, #10
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	e02b      	b.n	8004b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4a26      	ldr	r2, [pc, #152]	; (8004b64 <USB_SetTurnaroundTime+0x134>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d906      	bls.n	8004ade <USB_SetTurnaroundTime+0xae>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4a25      	ldr	r2, [pc, #148]	; (8004b68 <USB_SetTurnaroundTime+0x138>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d202      	bcs.n	8004ade <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ad8:	2309      	movs	r3, #9
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	e020      	b.n	8004b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	4a21      	ldr	r2, [pc, #132]	; (8004b68 <USB_SetTurnaroundTime+0x138>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d306      	bcc.n	8004af4 <USB_SetTurnaroundTime+0xc4>
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4a20      	ldr	r2, [pc, #128]	; (8004b6c <USB_SetTurnaroundTime+0x13c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d802      	bhi.n	8004af4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004aee:	2308      	movs	r3, #8
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	e015      	b.n	8004b20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4a1d      	ldr	r2, [pc, #116]	; (8004b6c <USB_SetTurnaroundTime+0x13c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d906      	bls.n	8004b0a <USB_SetTurnaroundTime+0xda>
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4a1c      	ldr	r2, [pc, #112]	; (8004b70 <USB_SetTurnaroundTime+0x140>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d202      	bcs.n	8004b0a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004b04:	2307      	movs	r3, #7
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	e00a      	b.n	8004b20 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b0a:	2306      	movs	r3, #6
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	e007      	b.n	8004b20 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b10:	79fb      	ldrb	r3, [r7, #7]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d102      	bne.n	8004b1c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b16:	2309      	movs	r3, #9
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	e001      	b.n	8004b20 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b1c:	2309      	movs	r3, #9
 8004b1e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	029b      	lsls	r3, r3, #10
 8004b34:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bc80      	pop	{r7}
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	00d8acbf 	.word	0x00d8acbf
 8004b50:	00e4e1c0 	.word	0x00e4e1c0
 8004b54:	00f42400 	.word	0x00f42400
 8004b58:	01067380 	.word	0x01067380
 8004b5c:	011a499f 	.word	0x011a499f
 8004b60:	01312cff 	.word	0x01312cff
 8004b64:	014ca43f 	.word	0x014ca43f
 8004b68:	016e3600 	.word	0x016e3600
 8004b6c:	01a6ab1f 	.word	0x01a6ab1f
 8004b70:	01e84800 	.word	0x01e84800

08004b74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f043 0201 	orr.w	r2, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr

08004b94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f023 0201 	bic.w	r2, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr

08004bb4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bd0:	78fb      	ldrb	r3, [r7, #3]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d115      	bne.n	8004c02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004be2:	2001      	movs	r0, #1
 8004be4:	f7fc fabc 	bl	8001160 <HAL_Delay>
      ms++;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	3301      	adds	r3, #1
 8004bec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f001 f961 	bl	8005eb6 <USB_GetMode>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d01e      	beq.n	8004c38 <USB_SetCurrentMode+0x84>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b31      	cmp	r3, #49	; 0x31
 8004bfe:	d9f0      	bls.n	8004be2 <USB_SetCurrentMode+0x2e>
 8004c00:	e01a      	b.n	8004c38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d115      	bne.n	8004c34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c14:	2001      	movs	r0, #1
 8004c16:	f7fc faa3 	bl	8001160 <HAL_Delay>
      ms++;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f001 f948 	bl	8005eb6 <USB_GetMode>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <USB_SetCurrentMode+0x84>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b31      	cmp	r3, #49	; 0x31
 8004c30:	d9f0      	bls.n	8004c14 <USB_SetCurrentMode+0x60>
 8004c32:	e001      	b.n	8004c38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e005      	b.n	8004c44 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b32      	cmp	r3, #50	; 0x32
 8004c3c:	d101      	bne.n	8004c42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c4c:	b084      	sub	sp, #16
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b086      	sub	sp, #24
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c66:	2300      	movs	r3, #0
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	e009      	b.n	8004c80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	3340      	adds	r3, #64	; 0x40
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	2200      	movs	r2, #0
 8004c78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	613b      	str	r3, [r7, #16]
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	2b0e      	cmp	r3, #14
 8004c84:	d9f2      	bls.n	8004c6c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d11c      	bne.n	8004cc6 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c9a:	f043 0302 	orr.w	r3, r3, #2
 8004c9e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	639a      	str	r2, [r3, #56]	; 0x38
 8004cc4:	e00b      	b.n	8004cde <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	680b      	ldr	r3, [r1, #0]
 8004cfc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d10c      	bne.n	8004d1e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d104      	bne.n	8004d14 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f945 	bl	8004f9c <USB_SetDevSpeed>
 8004d12:	e008      	b.n	8004d26 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d14:	2101      	movs	r1, #1
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f940 	bl	8004f9c <USB_SetDevSpeed>
 8004d1c:	e003      	b.n	8004d26 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d1e:	2103      	movs	r1, #3
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f93b 	bl	8004f9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d26:	2110      	movs	r1, #16
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f8f3 	bl	8004f14 <USB_FlushTxFifo>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f90f 	bl	8004f5c <USB_FlushRxFifo>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4e:	461a      	mov	r2, r3
 8004d50:	2300      	movs	r3, #0
 8004d52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d66:	461a      	mov	r2, r3
 8004d68:	2300      	movs	r3, #0
 8004d6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	613b      	str	r3, [r7, #16]
 8004d70:	e043      	b.n	8004dfa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d88:	d118      	bne.n	8004dbc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10a      	bne.n	8004da6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	e013      	b.n	8004dce <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db2:	461a      	mov	r2, r3
 8004db4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	e008      	b.n	8004dce <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc8:	461a      	mov	r2, r3
 8004dca:	2300      	movs	r3, #0
 8004dcc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dda:	461a      	mov	r2, r3
 8004ddc:	2300      	movs	r3, #0
 8004dde:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dec:	461a      	mov	r2, r3
 8004dee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004df2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	3301      	adds	r3, #1
 8004df8:	613b      	str	r3, [r7, #16]
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d3b7      	bcc.n	8004d72 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e02:	2300      	movs	r3, #0
 8004e04:	613b      	str	r3, [r7, #16]
 8004e06:	e043      	b.n	8004e90 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e1e:	d118      	bne.n	8004e52 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10a      	bne.n	8004e3c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e32:	461a      	mov	r2, r3
 8004e34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	e013      	b.n	8004e64 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e48:	461a      	mov	r2, r3
 8004e4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e4e:	6013      	str	r3, [r2, #0]
 8004e50:	e008      	b.n	8004e64 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5e:	461a      	mov	r2, r3
 8004e60:	2300      	movs	r3, #0
 8004e62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e70:	461a      	mov	r2, r3
 8004e72:	2300      	movs	r3, #0
 8004e74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e82:	461a      	mov	r2, r3
 8004e84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	613b      	str	r3, [r7, #16]
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d3b7      	bcc.n	8004e08 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ea6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eaa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004eb8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d105      	bne.n	8004ecc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	f043 0210 	orr.w	r2, r3, #16
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	699a      	ldr	r2, [r3, #24]
 8004ed0:	4b0f      	ldr	r3, [pc, #60]	; (8004f10 <USB_DevInit+0x2c4>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d005      	beq.n	8004eea <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	f043 0208 	orr.w	r2, r3, #8
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d107      	bne.n	8004f00 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ef8:	f043 0304 	orr.w	r3, r3, #4
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f0c:	b004      	add	sp, #16
 8004f0e:	4770      	bx	lr
 8004f10:	803c3800 	.word	0x803c3800

08004f14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	019b      	lsls	r3, r3, #6
 8004f26:	f043 0220 	orr.w	r2, r3, #32
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	3301      	adds	r3, #1
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4a08      	ldr	r2, [pc, #32]	; (8004f58 <USB_FlushTxFifo+0x44>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d901      	bls.n	8004f40 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e006      	b.n	8004f4e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b20      	cmp	r3, #32
 8004f4a:	d0f0      	beq.n	8004f2e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bc80      	pop	{r7}
 8004f56:	4770      	bx	lr
 8004f58:	00030d40 	.word	0x00030d40

08004f5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004f64:	2300      	movs	r3, #0
 8004f66:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2210      	movs	r2, #16
 8004f6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	3301      	adds	r3, #1
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4a08      	ldr	r2, [pc, #32]	; (8004f98 <USB_FlushRxFifo+0x3c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d901      	bls.n	8004f80 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e006      	b.n	8004f8e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f003 0310 	and.w	r3, r3, #16
 8004f88:	2b10      	cmp	r3, #16
 8004f8a:	d0f0      	beq.n	8004f6e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bc80      	pop	{r7}
 8004f96:	4770      	bx	lr
 8004f98:	00030d40 	.word	0x00030d40

08004f9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	68f9      	ldr	r1, [r7, #12]
 8004fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr

08004fcc <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 0306 	and.w	r3, r3, #6
 8004fe4:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d102      	bne.n	8004ff2 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004fec:	2300      	movs	r3, #0
 8004fee:	75fb      	strb	r3, [r7, #23]
 8004ff0:	e00a      	b.n	8005008 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d002      	beq.n	8004ffe <USB_GetDevSpeed+0x32>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b06      	cmp	r3, #6
 8004ffc:	d102      	bne.n	8005004 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ffe:	2302      	movs	r3, #2
 8005000:	75fb      	strb	r3, [r7, #23]
 8005002:	e001      	b.n	8005008 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005004:	230f      	movs	r3, #15
 8005006:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005008:	7dfb      	ldrb	r3, [r7, #23]
}
 800500a:	4618      	mov	r0, r3
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	bc80      	pop	{r7}
 8005012:	4770      	bx	lr

08005014 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	785b      	ldrb	r3, [r3, #1]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d13a      	bne.n	80050a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005036:	69da      	ldr	r2, [r3, #28]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	2101      	movs	r1, #1
 8005042:	fa01 f303 	lsl.w	r3, r1, r3
 8005046:	b29b      	uxth	r3, r3
 8005048:	68f9      	ldr	r1, [r7, #12]
 800504a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800504e:	4313      	orrs	r3, r2
 8005050:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4413      	add	r3, r2
 800505a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d155      	bne.n	8005114 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	78db      	ldrb	r3, [r3, #3]
 8005082:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005084:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	059b      	lsls	r3, r3, #22
 800508a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800508c:	4313      	orrs	r3, r2
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	0151      	lsls	r1, r2, #5
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	440a      	add	r2, r1
 8005096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800509a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800509e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	e036      	b.n	8005114 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ac:	69da      	ldr	r2, [r3, #28]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	2101      	movs	r1, #1
 80050b8:	fa01 f303 	lsl.w	r3, r1, r3
 80050bc:	041b      	lsls	r3, r3, #16
 80050be:	68f9      	ldr	r1, [r7, #12]
 80050c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050c4:	4313      	orrs	r3, r2
 80050c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d11a      	bne.n	8005114 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	78db      	ldrb	r3, [r3, #3]
 80050f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050fa:	430b      	orrs	r3, r1
 80050fc:	4313      	orrs	r3, r2
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	0151      	lsls	r1, r2, #5
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	440a      	add	r2, r1
 8005106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800510a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800510e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005112:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	bc80      	pop	{r7}
 800511e:	4770      	bx	lr

08005120 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	785b      	ldrb	r3, [r3, #1]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d161      	bne.n	8005200 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800514e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005152:	d11f      	bne.n	8005194 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	0151      	lsls	r1, r2, #5
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	440a      	add	r2, r1
 800516a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800516e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005172:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	0151      	lsls	r1, r2, #5
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	440a      	add	r2, r1
 800518a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800518e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005192:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	f003 030f 	and.w	r3, r3, #15
 80051a4:	2101      	movs	r1, #1
 80051a6:	fa01 f303 	lsl.w	r3, r1, r3
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	43db      	mvns	r3, r3
 80051ae:	68f9      	ldr	r1, [r7, #12]
 80051b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051b4:	4013      	ands	r3, r2
 80051b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051be:	69da      	ldr	r2, [r3, #28]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	f003 030f 	and.w	r3, r3, #15
 80051c8:	2101      	movs	r1, #1
 80051ca:	fa01 f303 	lsl.w	r3, r1, r3
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	43db      	mvns	r3, r3
 80051d2:	68f9      	ldr	r1, [r7, #12]
 80051d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051d8:	4013      	ands	r3, r2
 80051da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	0159      	lsls	r1, r3, #5
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	440b      	add	r3, r1
 80051f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f6:	4619      	mov	r1, r3
 80051f8:	4b35      	ldr	r3, [pc, #212]	; (80052d0 <USB_DeactivateEndpoint+0x1b0>)
 80051fa:	4013      	ands	r3, r2
 80051fc:	600b      	str	r3, [r1, #0]
 80051fe:	e060      	b.n	80052c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005212:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005216:	d11f      	bne.n	8005258 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4413      	add	r3, r2
 8005220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	0151      	lsls	r1, r2, #5
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	440a      	add	r2, r1
 800522e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005232:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005236:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	0151      	lsls	r1, r2, #5
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	440a      	add	r2, r1
 800524e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005252:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005256:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	f003 030f 	and.w	r3, r3, #15
 8005268:	2101      	movs	r1, #1
 800526a:	fa01 f303 	lsl.w	r3, r1, r3
 800526e:	041b      	lsls	r3, r3, #16
 8005270:	43db      	mvns	r3, r3
 8005272:	68f9      	ldr	r1, [r7, #12]
 8005274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005278:	4013      	ands	r3, r2
 800527a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005282:	69da      	ldr	r2, [r3, #28]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	f003 030f 	and.w	r3, r3, #15
 800528c:	2101      	movs	r1, #1
 800528e:	fa01 f303 	lsl.w	r3, r1, r3
 8005292:	041b      	lsls	r3, r3, #16
 8005294:	43db      	mvns	r3, r3
 8005296:	68f9      	ldr	r1, [r7, #12]
 8005298:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800529c:	4013      	ands	r3, r2
 800529e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	0159      	lsls	r1, r3, #5
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	440b      	add	r3, r1
 80052b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ba:	4619      	mov	r1, r3
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <USB_DeactivateEndpoint+0x1b4>)
 80052be:	4013      	ands	r3, r2
 80052c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bc80      	pop	{r7}
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	ec337800 	.word	0xec337800
 80052d4:	eff37800 	.word	0xeff37800

080052d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08a      	sub	sp, #40	; 0x28
 80052dc:	af02      	add	r7, sp, #8
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	4613      	mov	r3, r2
 80052e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	785b      	ldrb	r3, [r3, #1]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	f040 815c 	bne.w	80055b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d132      	bne.n	8005368 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	4413      	add	r3, r2
 800530a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	0151      	lsls	r1, r2, #5
 8005314:	69fa      	ldr	r2, [r7, #28]
 8005316:	440a      	add	r2, r1
 8005318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800531c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005320:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005324:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	0151      	lsls	r1, r2, #5
 8005338:	69fa      	ldr	r2, [r7, #28]
 800533a:	440a      	add	r2, r1
 800533c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005340:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005344:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	4413      	add	r3, r2
 800534e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	0151      	lsls	r1, r2, #5
 8005358:	69fa      	ldr	r2, [r7, #28]
 800535a:	440a      	add	r2, r1
 800535c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005360:	0cdb      	lsrs	r3, r3, #19
 8005362:	04db      	lsls	r3, r3, #19
 8005364:	6113      	str	r3, [r2, #16]
 8005366:	e074      	b.n	8005452 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	0151      	lsls	r1, r2, #5
 800537a:	69fa      	ldr	r2, [r7, #28]
 800537c:	440a      	add	r2, r1
 800537e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005382:	0cdb      	lsrs	r3, r3, #19
 8005384:	04db      	lsls	r3, r3, #19
 8005386:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	0151      	lsls	r1, r2, #5
 800539a:	69fa      	ldr	r2, [r7, #28]
 800539c:	440a      	add	r2, r1
 800539e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	6959      	ldr	r1, [r3, #20]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	440b      	add	r3, r1
 80053c4:	1e59      	subs	r1, r3, #1
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80053ce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80053d0:	4b9d      	ldr	r3, [pc, #628]	; (8005648 <USB_EPStartXfer+0x370>)
 80053d2:	400b      	ands	r3, r1
 80053d4:	69b9      	ldr	r1, [r7, #24]
 80053d6:	0148      	lsls	r0, r1, #5
 80053d8:	69f9      	ldr	r1, [r7, #28]
 80053da:	4401      	add	r1, r0
 80053dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053e0:	4313      	orrs	r3, r2
 80053e2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053fa:	69b9      	ldr	r1, [r7, #24]
 80053fc:	0148      	lsls	r0, r1, #5
 80053fe:	69f9      	ldr	r1, [r7, #28]
 8005400:	4401      	add	r1, r0
 8005402:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005406:	4313      	orrs	r3, r2
 8005408:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	78db      	ldrb	r3, [r3, #3]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d11f      	bne.n	8005452 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	0151      	lsls	r1, r2, #5
 8005424:	69fa      	ldr	r2, [r7, #28]
 8005426:	440a      	add	r2, r1
 8005428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800542c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005430:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	0151      	lsls	r1, r2, #5
 8005444:	69fa      	ldr	r2, [r7, #28]
 8005446:	440a      	add	r2, r1
 8005448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800544c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005450:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005452:	79fb      	ldrb	r3, [r7, #7]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d14b      	bne.n	80054f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d009      	beq.n	8005474 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546c:	461a      	mov	r2, r3
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	78db      	ldrb	r3, [r3, #3]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d128      	bne.n	80054ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005488:	2b00      	cmp	r3, #0
 800548a:	d110      	bne.n	80054ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	0151      	lsls	r1, r2, #5
 800549e:	69fa      	ldr	r2, [r7, #28]
 80054a0:	440a      	add	r2, r1
 80054a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054aa:	6013      	str	r3, [r2, #0]
 80054ac:	e00f      	b.n	80054ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	0151      	lsls	r1, r2, #5
 80054c0:	69fa      	ldr	r2, [r7, #28]
 80054c2:	440a      	add	r2, r1
 80054c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	0151      	lsls	r1, r2, #5
 80054e0:	69fa      	ldr	r2, [r7, #28]
 80054e2:	440a      	add	r2, r1
 80054e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	e12f      	b.n	8005750 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	0151      	lsls	r1, r2, #5
 8005502:	69fa      	ldr	r2, [r7, #28]
 8005504:	440a      	add	r2, r1
 8005506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800550a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800550e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	78db      	ldrb	r3, [r3, #3]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d015      	beq.n	8005544 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 8117 	beq.w	8005750 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	2101      	movs	r1, #1
 8005534:	fa01 f303 	lsl.w	r3, r1, r3
 8005538:	69f9      	ldr	r1, [r7, #28]
 800553a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800553e:	4313      	orrs	r3, r2
 8005540:	634b      	str	r3, [r1, #52]	; 0x34
 8005542:	e105      	b.n	8005750 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005550:	2b00      	cmp	r3, #0
 8005552:	d110      	bne.n	8005576 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	0151      	lsls	r1, r2, #5
 8005566:	69fa      	ldr	r2, [r7, #28]
 8005568:	440a      	add	r2, r1
 800556a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800556e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	e00f      	b.n	8005596 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	4413      	add	r3, r2
 800557e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	0151      	lsls	r1, r2, #5
 8005588:	69fa      	ldr	r2, [r7, #28]
 800558a:	440a      	add	r2, r1
 800558c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005594:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	68d9      	ldr	r1, [r3, #12]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	781a      	ldrb	r2, [r3, #0]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	b298      	uxth	r0, r3
 80055a4:	79fb      	ldrb	r3, [r7, #7]
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	4603      	mov	r3, r0
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 fa2a 	bl	8005a04 <USB_WritePacket>
 80055b0:	e0ce      	b.n	8005750 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	0151      	lsls	r1, r2, #5
 80055c4:	69fa      	ldr	r2, [r7, #28]
 80055c6:	440a      	add	r2, r1
 80055c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055cc:	0cdb      	lsrs	r3, r3, #19
 80055ce:	04db      	lsls	r3, r3, #19
 80055d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	0151      	lsls	r1, r2, #5
 80055e4:	69fa      	ldr	r2, [r7, #28]
 80055e6:	440a      	add	r2, r1
 80055e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d126      	bne.n	800564c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005614:	69b9      	ldr	r1, [r7, #24]
 8005616:	0148      	lsls	r0, r1, #5
 8005618:	69f9      	ldr	r1, [r7, #28]
 800561a:	4401      	add	r1, r0
 800561c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005620:	4313      	orrs	r3, r2
 8005622:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	0151      	lsls	r1, r2, #5
 8005636:	69fa      	ldr	r2, [r7, #28]
 8005638:	440a      	add	r2, r1
 800563a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800563e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005642:	6113      	str	r3, [r2, #16]
 8005644:	e036      	b.n	80056b4 <USB_EPStartXfer+0x3dc>
 8005646:	bf00      	nop
 8005648:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	695a      	ldr	r2, [r3, #20]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	4413      	add	r3, r2
 8005656:	1e5a      	subs	r2, r3, #1
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005660:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	8afb      	ldrh	r3, [r7, #22]
 8005672:	04d9      	lsls	r1, r3, #19
 8005674:	4b39      	ldr	r3, [pc, #228]	; (800575c <USB_EPStartXfer+0x484>)
 8005676:	400b      	ands	r3, r1
 8005678:	69b9      	ldr	r1, [r7, #24]
 800567a:	0148      	lsls	r0, r1, #5
 800567c:	69f9      	ldr	r1, [r7, #28]
 800567e:	4401      	add	r1, r0
 8005680:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005684:	4313      	orrs	r3, r2
 8005686:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005694:	691a      	ldr	r2, [r3, #16]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	8af9      	ldrh	r1, [r7, #22]
 800569c:	fb01 f303 	mul.w	r3, r1, r3
 80056a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056a4:	69b9      	ldr	r1, [r7, #24]
 80056a6:	0148      	lsls	r0, r1, #5
 80056a8:	69f9      	ldr	r1, [r7, #28]
 80056aa:	4401      	add	r1, r0
 80056ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056b0:	4313      	orrs	r3, r2
 80056b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80056b4:	79fb      	ldrb	r3, [r7, #7]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d10d      	bne.n	80056d6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d009      	beq.n	80056d6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	68d9      	ldr	r1, [r3, #12]
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d2:	460a      	mov	r2, r1
 80056d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	78db      	ldrb	r3, [r3, #3]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d128      	bne.n	8005730 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d110      	bne.n	8005710 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	0151      	lsls	r1, r2, #5
 8005700:	69fa      	ldr	r2, [r7, #28]
 8005702:	440a      	add	r2, r1
 8005704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005708:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	e00f      	b.n	8005730 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	0151      	lsls	r1, r2, #5
 8005722:	69fa      	ldr	r2, [r7, #28]
 8005724:	440a      	add	r2, r1
 8005726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800572a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800572e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	0151      	lsls	r1, r2, #5
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	440a      	add	r2, r1
 8005746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800574a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800574e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3720      	adds	r7, #32
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	1ff80000 	.word	0x1ff80000

08005760 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	4613      	mov	r3, r2
 800576c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	785b      	ldrb	r3, [r3, #1]
 800577c:	2b01      	cmp	r3, #1
 800577e:	f040 80cd 	bne.w	800591c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d132      	bne.n	80057f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	0151      	lsls	r1, r2, #5
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	440a      	add	r2, r1
 80057a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	0151      	lsls	r1, r2, #5
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	440a      	add	r2, r1
 80057c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	0151      	lsls	r1, r2, #5
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	440a      	add	r2, r1
 80057e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e8:	0cdb      	lsrs	r3, r3, #19
 80057ea:	04db      	lsls	r3, r3, #19
 80057ec:	6113      	str	r3, [r2, #16]
 80057ee:	e04e      	b.n	800588e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	0151      	lsls	r1, r2, #5
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	440a      	add	r2, r1
 8005806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800580a:	0cdb      	lsrs	r3, r3, #19
 800580c:	04db      	lsls	r3, r3, #19
 800580e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	0151      	lsls	r1, r2, #5
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	440a      	add	r2, r1
 8005826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800582a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800582e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005832:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	695a      	ldr	r2, [r3, #20]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	429a      	cmp	r2, r3
 800583e:	d903      	bls.n	8005848 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	0151      	lsls	r1, r2, #5
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	440a      	add	r2, r1
 800585e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005862:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005866:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005874:	691a      	ldr	r2, [r3, #16]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800587e:	6939      	ldr	r1, [r7, #16]
 8005880:	0148      	lsls	r0, r1, #5
 8005882:	6979      	ldr	r1, [r7, #20]
 8005884:	4401      	add	r1, r0
 8005886:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800588a:	4313      	orrs	r3, r2
 800588c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d11e      	bne.n	80058d2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d009      	beq.n	80058b0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a8:	461a      	mov	r2, r3
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	0151      	lsls	r1, r2, #5
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	440a      	add	r2, r1
 80058c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058ce:	6013      	str	r3, [r2, #0]
 80058d0:	e092      	b.n	80059f8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	0151      	lsls	r1, r2, #5
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	440a      	add	r2, r1
 80058e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058f0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d07e      	beq.n	80059f8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	2101      	movs	r1, #1
 800590c:	fa01 f303 	lsl.w	r3, r1, r3
 8005910:	6979      	ldr	r1, [r7, #20]
 8005912:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005916:	4313      	orrs	r3, r2
 8005918:	634b      	str	r3, [r1, #52]	; 0x34
 800591a:	e06d      	b.n	80059f8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	0151      	lsls	r1, r2, #5
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	440a      	add	r2, r1
 8005932:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005936:	0cdb      	lsrs	r3, r3, #19
 8005938:	04db      	lsls	r3, r3, #19
 800593a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	0151      	lsls	r1, r2, #5
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	440a      	add	r2, r1
 8005952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005956:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800595a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800595e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	0151      	lsls	r1, r2, #5
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	440a      	add	r2, r1
 8005986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800598a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800598e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599c:	691a      	ldr	r2, [r3, #16]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059a6:	6939      	ldr	r1, [r7, #16]
 80059a8:	0148      	lsls	r0, r1, #5
 80059aa:	6979      	ldr	r1, [r7, #20]
 80059ac:	4401      	add	r1, r0
 80059ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059b2:	4313      	orrs	r3, r2
 80059b4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80059b6:	79fb      	ldrb	r3, [r7, #7]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d10d      	bne.n	80059d8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d009      	beq.n	80059d8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	68d9      	ldr	r1, [r3, #12]
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d4:	460a      	mov	r2, r1
 80059d6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	0151      	lsls	r1, r2, #5
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	440a      	add	r2, r1
 80059ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bc80      	pop	{r7}
 8005a02:	4770      	bx	lr

08005a04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b089      	sub	sp, #36	; 0x24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	4611      	mov	r1, r2
 8005a10:	461a      	mov	r2, r3
 8005a12:	460b      	mov	r3, r1
 8005a14:	71fb      	strb	r3, [r7, #7]
 8005a16:	4613      	mov	r3, r2
 8005a18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d123      	bne.n	8005a72 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a2a:	88bb      	ldrh	r3, [r7, #4]
 8005a2c:	3303      	adds	r3, #3
 8005a2e:	089b      	lsrs	r3, r3, #2
 8005a30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a32:	2300      	movs	r3, #0
 8005a34:	61bb      	str	r3, [r7, #24]
 8005a36:	e018      	b.n	8005a6a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a38:	79fb      	ldrb	r3, [r7, #7]
 8005a3a:	031a      	lsls	r2, r3, #12
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a44:	461a      	mov	r2, r3
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	3301      	adds	r3, #1
 8005a56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	3301      	adds	r3, #1
 8005a62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	3301      	adds	r3, #1
 8005a68:	61bb      	str	r3, [r7, #24]
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d3e2      	bcc.n	8005a38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3724      	adds	r7, #36	; 0x24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bc80      	pop	{r7}
 8005a7c:	4770      	bx	lr

08005a7e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b08b      	sub	sp, #44	; 0x2c
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a94:	88fb      	ldrh	r3, [r7, #6]
 8005a96:	089b      	lsrs	r3, r3, #2
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a9c:	88fb      	ldrh	r3, [r7, #6]
 8005a9e:	f003 0303 	and.w	r3, r3, #3
 8005aa2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	623b      	str	r3, [r7, #32]
 8005aa8:	e014      	b.n	8005ad4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	3301      	adds	r3, #1
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	3301      	adds	r3, #1
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	3301      	adds	r3, #1
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	623b      	str	r3, [r7, #32]
 8005ad4:	6a3a      	ldr	r2, [r7, #32]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d3e6      	bcc.n	8005aaa <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005adc:	8bfb      	ldrh	r3, [r7, #30]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d01e      	beq.n	8005b20 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aec:	461a      	mov	r2, r3
 8005aee:	f107 0310 	add.w	r3, r7, #16
 8005af2:	6812      	ldr	r2, [r2, #0]
 8005af4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	fa22 f303 	lsr.w	r3, r2, r3
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	701a      	strb	r2, [r3, #0]
      i++;
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	3301      	adds	r3, #1
 8005b12:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005b14:	8bfb      	ldrh	r3, [r7, #30]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b1a:	8bfb      	ldrh	r3, [r7, #30]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1ea      	bne.n	8005af6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	372c      	adds	r7, #44	; 0x2c
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bc80      	pop	{r7}
 8005b2a:	4770      	bx	lr

08005b2c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	785b      	ldrb	r3, [r3, #1]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d12c      	bne.n	8005ba2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	db12      	blt.n	8005b80 <USB_EPSetStall+0x54>
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00f      	beq.n	8005b80 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	0151      	lsls	r1, r2, #5
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	440a      	add	r2, r1
 8005b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b7e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	0151      	lsls	r1, r2, #5
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	440a      	add	r2, r1
 8005b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	e02b      	b.n	8005bfa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	db12      	blt.n	8005bda <USB_EPSetStall+0xae>
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00f      	beq.n	8005bda <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	0151      	lsls	r1, r2, #5
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	440a      	add	r2, r1
 8005bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bd8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	0151      	lsls	r1, r2, #5
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	440a      	add	r2, r1
 8005bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bf8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bc80      	pop	{r7}
 8005c04:	4770      	bx	lr

08005c06 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b085      	sub	sp, #20
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
 8005c0e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	785b      	ldrb	r3, [r3, #1]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d128      	bne.n	8005c74 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	0151      	lsls	r1, r2, #5
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	440a      	add	r2, r1
 8005c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c40:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	78db      	ldrb	r3, [r3, #3]
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d003      	beq.n	8005c52 <USB_EPClearStall+0x4c>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	78db      	ldrb	r3, [r3, #3]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d138      	bne.n	8005cc4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	0151      	lsls	r1, r2, #5
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	440a      	add	r2, r1
 8005c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c70:	6013      	str	r3, [r2, #0]
 8005c72:	e027      	b.n	8005cc4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	0151      	lsls	r1, r2, #5
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	440a      	add	r2, r1
 8005c8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	78db      	ldrb	r3, [r3, #3]
 8005c98:	2b03      	cmp	r3, #3
 8005c9a:	d003      	beq.n	8005ca4 <USB_EPClearStall+0x9e>
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	78db      	ldrb	r3, [r3, #3]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d10f      	bne.n	8005cc4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	0151      	lsls	r1, r2, #5
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	440a      	add	r2, r1
 8005cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bc80      	pop	{r7}
 8005cce:	4770      	bx	lr

08005cd0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005cf2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005d04:	68f9      	ldr	r1, [r7, #12]
 8005d06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bc80      	pop	{r7}
 8005d18:	4770      	bx	lr

08005d1a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b085      	sub	sp, #20
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d34:	f023 0303 	bic.w	r3, r3, #3
 8005d38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d48:	f023 0302 	bic.w	r3, r3, #2
 8005d4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bc80      	pop	{r7}
 8005d58:	4770      	bx	lr

08005d5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d74:	f023 0303 	bic.w	r3, r3, #3
 8005d78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d88:	f043 0302 	orr.w	r3, r3, #2
 8005d8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bc80      	pop	{r7}
 8005d98:	4770      	bx	lr

08005d9a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b085      	sub	sp, #20
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4013      	ands	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005db2:	68fb      	ldr	r3, [r7, #12]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bc80      	pop	{r7}
 8005dbc:	4770      	bx	lr

08005dbe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b085      	sub	sp, #20
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	4013      	ands	r3, r2
 8005de0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	0c1b      	lsrs	r3, r3, #16
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bc80      	pop	{r7}
 8005dee:	4770      	bx	lr

08005df0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	4013      	ands	r3, r2
 8005e12:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	b29b      	uxth	r3, r3
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bc80      	pop	{r7}
 8005e20:	4770      	bx	lr

08005e22 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b085      	sub	sp, #20
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e32:	78fb      	ldrb	r3, [r7, #3]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e50:	68bb      	ldr	r3, [r7, #8]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bc80      	pop	{r7}
 8005e5a:	4770      	bx	lr

08005e5c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	460b      	mov	r3, r1
 8005e66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005e80:	78fb      	ldrb	r3, [r7, #3]
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	fa22 f303 	lsr.w	r3, r2, r3
 8005e8c:	01db      	lsls	r3, r3, #7
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e96:	78fb      	ldrb	r3, [r7, #3]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	371c      	adds	r7, #28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bc80      	pop	{r7}
 8005eb4:	4770      	bx	lr

08005eb6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bc80      	pop	{r7}
 8005ece:	4770      	bx	lr

08005ed0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005eee:	f023 0307 	bic.w	r3, r3, #7
 8005ef2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f06:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bc80      	pop	{r7}
 8005f12:	4770      	bx	lr

08005f14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	333c      	adds	r3, #60	; 0x3c
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	4a25      	ldr	r2, [pc, #148]	; (8005fc8 <USB_EP0_OutStart+0xb4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d90a      	bls.n	8005f4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f48:	d101      	bne.n	8005f4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e037      	b.n	8005fbe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f54:	461a      	mov	r2, r3
 8005f56:	2300      	movs	r3, #0
 8005f58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f7c:	f043 0318 	orr.w	r3, r3, #24
 8005f80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f90:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005f94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005f96:	7afb      	ldrb	r3, [r7, #11]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d10f      	bne.n	8005fbc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005fba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	371c      	adds	r7, #28
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bc80      	pop	{r7}
 8005fc6:	4770      	bx	lr
 8005fc8:	4f54300a 	.word	0x4f54300a

08005fcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4a12      	ldr	r2, [pc, #72]	; (800602c <USB_CoreReset+0x60>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d901      	bls.n	8005fea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e01b      	b.n	8006022 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	daf2      	bge.n	8005fd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f043 0201 	orr.w	r2, r3, #1
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	3301      	adds	r3, #1
 8006006:	60fb      	str	r3, [r7, #12]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4a08      	ldr	r2, [pc, #32]	; (800602c <USB_CoreReset+0x60>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d901      	bls.n	8006014 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e006      	b.n	8006022 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b01      	cmp	r3, #1
 800601e:	d0f0      	beq.n	8006002 <USB_CoreReset+0x36>

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	bc80      	pop	{r7}
 800602a:	4770      	bx	lr
 800602c:	00030d40 	.word	0x00030d40

08006030 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	460b      	mov	r3, r1
 800603a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800603c:	2300      	movs	r3, #0
 800603e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	7c1b      	ldrb	r3, [r3, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d115      	bne.n	8006074 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800604c:	2202      	movs	r2, #2
 800604e:	2181      	movs	r1, #129	; 0x81
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f001 ff62 	bl	8007f1a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800605c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006060:	2202      	movs	r2, #2
 8006062:	2101      	movs	r1, #1
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f001 ff58 	bl	8007f1a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006072:	e012      	b.n	800609a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006074:	2340      	movs	r3, #64	; 0x40
 8006076:	2202      	movs	r2, #2
 8006078:	2181      	movs	r1, #129	; 0x81
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f001 ff4d 	bl	8007f1a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006086:	2340      	movs	r3, #64	; 0x40
 8006088:	2202      	movs	r2, #2
 800608a:	2101      	movs	r1, #1
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f001 ff44 	bl	8007f1a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800609a:	2308      	movs	r3, #8
 800609c:	2203      	movs	r2, #3
 800609e:	2182      	movs	r1, #130	; 0x82
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f001 ff3a 	bl	8007f1a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80060ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80060b0:	f002 f8b0 	bl	8008214 <malloc>
 80060b4:	4603      	mov	r3, r0
 80060b6:	461a      	mov	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d102      	bne.n	80060ce <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80060c8:	2301      	movs	r3, #1
 80060ca:	73fb      	strb	r3, [r7, #15]
 80060cc:	e026      	b.n	800611c <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060d4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	7c1b      	ldrb	r3, [r3, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d109      	bne.n	800610c <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006102:	2101      	movs	r1, #1
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f001 fff8 	bl	80080fa <USBD_LL_PrepareReceive>
 800610a:	e007      	b.n	800611c <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006112:	2340      	movs	r3, #64	; 0x40
 8006114:	2101      	movs	r1, #1
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f001 ffef 	bl	80080fa <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800611c:	7bfb      	ldrb	r3, [r7, #15]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b084      	sub	sp, #16
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	460b      	mov	r3, r1
 8006130:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006136:	2181      	movs	r1, #129	; 0x81
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f001 ff14 	bl	8007f66 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006144:	2101      	movs	r1, #1
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f001 ff0d 	bl	8007f66 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006154:	2182      	movs	r1, #130	; 0x82
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f001 ff05 	bl	8007f66 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00e      	beq.n	800618a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800617c:	4618      	mov	r0, r3
 800617e:	f002 f851 	bl	8008224 <free>
    pdev->pClassData = NULL;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800618a:	7bfb      	ldrb	r3, [r7, #15]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80061a6:	2300      	movs	r3, #0
 80061a8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d039      	beq.n	8006232 <USBD_CDC_Setup+0x9e>
 80061be:	2b20      	cmp	r3, #32
 80061c0:	d17f      	bne.n	80062c2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	88db      	ldrh	r3, [r3, #6]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d029      	beq.n	800621e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	b25b      	sxtb	r3, r3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	da11      	bge.n	80061f8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80061e0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	88d2      	ldrh	r2, [r2, #6]
 80061e6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80061e8:	6939      	ldr	r1, [r7, #16]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	88db      	ldrh	r3, [r3, #6]
 80061ee:	461a      	mov	r2, r3
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f001 fa42 	bl	800767a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80061f6:	e06b      	b.n	80062d0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	785a      	ldrb	r2, [r3, #1]
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	88db      	ldrh	r3, [r3, #6]
 8006206:	b2da      	uxtb	r2, r3
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800620e:	6939      	ldr	r1, [r7, #16]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	88db      	ldrh	r3, [r3, #6]
 8006214:	461a      	mov	r2, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f001 fa5d 	bl	80076d6 <USBD_CtlPrepareRx>
      break;
 800621c:	e058      	b.n	80062d0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	7850      	ldrb	r0, [r2, #1]
 800622a:	2200      	movs	r2, #0
 800622c:	6839      	ldr	r1, [r7, #0]
 800622e:	4798      	blx	r3
      break;
 8006230:	e04e      	b.n	80062d0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	785b      	ldrb	r3, [r3, #1]
 8006236:	2b0b      	cmp	r3, #11
 8006238:	d02e      	beq.n	8006298 <USBD_CDC_Setup+0x104>
 800623a:	2b0b      	cmp	r3, #11
 800623c:	dc38      	bgt.n	80062b0 <USBD_CDC_Setup+0x11c>
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <USBD_CDC_Setup+0xb4>
 8006242:	2b0a      	cmp	r3, #10
 8006244:	d014      	beq.n	8006270 <USBD_CDC_Setup+0xdc>
 8006246:	e033      	b.n	80062b0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800624e:	2b03      	cmp	r3, #3
 8006250:	d107      	bne.n	8006262 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006252:	f107 030c 	add.w	r3, r7, #12
 8006256:	2202      	movs	r2, #2
 8006258:	4619      	mov	r1, r3
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f001 fa0d 	bl	800767a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006260:	e02e      	b.n	80062c0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006262:	6839      	ldr	r1, [r7, #0]
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f001 f99e 	bl	80075a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800626a:	2302      	movs	r3, #2
 800626c:	75fb      	strb	r3, [r7, #23]
          break;
 800626e:	e027      	b.n	80062c0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006276:	2b03      	cmp	r3, #3
 8006278:	d107      	bne.n	800628a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800627a:	f107 030f 	add.w	r3, r7, #15
 800627e:	2201      	movs	r2, #1
 8006280:	4619      	mov	r1, r3
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f001 f9f9 	bl	800767a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006288:	e01a      	b.n	80062c0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f001 f98a 	bl	80075a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006292:	2302      	movs	r3, #2
 8006294:	75fb      	strb	r3, [r7, #23]
          break;
 8006296:	e013      	b.n	80062c0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d00d      	beq.n	80062be <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80062a2:	6839      	ldr	r1, [r7, #0]
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f001 f97e 	bl	80075a6 <USBD_CtlError>
            ret = USBD_FAIL;
 80062aa:	2302      	movs	r3, #2
 80062ac:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80062ae:	e006      	b.n	80062be <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80062b0:	6839      	ldr	r1, [r7, #0]
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f001 f977 	bl	80075a6 <USBD_CtlError>
          ret = USBD_FAIL;
 80062b8:	2302      	movs	r3, #2
 80062ba:	75fb      	strb	r3, [r7, #23]
          break;
 80062bc:	e000      	b.n	80062c0 <USBD_CDC_Setup+0x12c>
          break;
 80062be:	bf00      	nop
      }
      break;
 80062c0:	e006      	b.n	80062d0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f001 f96e 	bl	80075a6 <USBD_CtlError>
      ret = USBD_FAIL;
 80062ca:	2302      	movs	r3, #2
 80062cc:	75fb      	strb	r3, [r7, #23]
      break;
 80062ce:	bf00      	nop
  }

  return ret;
 80062d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3718      	adds	r7, #24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b084      	sub	sp, #16
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
 80062e2:	460b      	mov	r3, r1
 80062e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ec:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062f4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d03a      	beq.n	8006376 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006300:	78fa      	ldrb	r2, [r7, #3]
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	4613      	mov	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	440b      	add	r3, r1
 800630e:	331c      	adds	r3, #28
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d029      	beq.n	800636a <USBD_CDC_DataIn+0x90>
 8006316:	78fa      	ldrb	r2, [r7, #3]
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	4613      	mov	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	440b      	add	r3, r1
 8006324:	331c      	adds	r3, #28
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	78f9      	ldrb	r1, [r7, #3]
 800632a:	68b8      	ldr	r0, [r7, #8]
 800632c:	460b      	mov	r3, r1
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	1a5b      	subs	r3, r3, r1
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4403      	add	r3, r0
 8006336:	3344      	adds	r3, #68	; 0x44
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	fbb2 f1f3 	udiv	r1, r2, r3
 800633e:	fb03 f301 	mul.w	r3, r3, r1
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b00      	cmp	r3, #0
 8006346:	d110      	bne.n	800636a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006348:	78fa      	ldrb	r2, [r7, #3]
 800634a:	6879      	ldr	r1, [r7, #4]
 800634c:	4613      	mov	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4413      	add	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	440b      	add	r3, r1
 8006356:	331c      	adds	r3, #28
 8006358:	2200      	movs	r2, #0
 800635a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800635c:	78f9      	ldrb	r1, [r7, #3]
 800635e:	2300      	movs	r3, #0
 8006360:	2200      	movs	r2, #0
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f001 fea6 	bl	80080b4 <USBD_LL_Transmit>
 8006368:	e003      	b.n	8006372 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	e000      	b.n	8006378 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006376:	2302      	movs	r3, #2
  }
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	460b      	mov	r3, r1
 800638a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006392:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006394:	78fb      	ldrb	r3, [r7, #3]
 8006396:	4619      	mov	r1, r3
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f001 fed1 	bl	8008140 <USBD_LL_GetRxDataSize>
 800639e:	4602      	mov	r2, r0
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00d      	beq.n	80063cc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80063c4:	4611      	mov	r1, r2
 80063c6:	4798      	blx	r3

    return USBD_OK;
 80063c8:	2300      	movs	r3, #0
 80063ca:	e000      	b.n	80063ce <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80063cc:	2302      	movs	r3, #2
  }
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b084      	sub	sp, #16
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d015      	beq.n	800641c <USBD_CDC_EP0_RxReady+0x46>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80063f6:	2bff      	cmp	r3, #255	; 0xff
 80063f8:	d010      	beq.n	800641c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006408:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006410:	b292      	uxth	r2, r2
 8006412:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	22ff      	movs	r2, #255	; 0xff
 8006418:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
	...

08006428 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2243      	movs	r2, #67	; 0x43
 8006434:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006436:	4b03      	ldr	r3, [pc, #12]	; (8006444 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006438:	4618      	mov	r0, r3
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	bc80      	pop	{r7}
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	2000010c 	.word	0x2000010c

08006448 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2243      	movs	r2, #67	; 0x43
 8006454:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006456:	4b03      	ldr	r3, [pc, #12]	; (8006464 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006458:	4618      	mov	r0, r3
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	bc80      	pop	{r7}
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	200000c8 	.word	0x200000c8

08006468 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2243      	movs	r2, #67	; 0x43
 8006474:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006476:	4b03      	ldr	r3, [pc, #12]	; (8006484 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006478:	4618      	mov	r0, r3
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	bc80      	pop	{r7}
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	20000150 	.word	0x20000150

08006488 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	220a      	movs	r2, #10
 8006494:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006496:	4b03      	ldr	r3, [pc, #12]	; (80064a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	bc80      	pop	{r7}
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	20000084 	.word	0x20000084

080064a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80064b2:	2302      	movs	r3, #2
 80064b4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d005      	beq.n	80064c8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bc80      	pop	{r7}
 80064d2:	4770      	bx	lr

080064d4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	4613      	mov	r3, r2
 80064e0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064e8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80064f2:	88fa      	ldrh	r2, [r7, #6]
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	bc80      	pop	{r7}
 8006504:	4770      	bx	lr

08006506 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006506:	b480      	push	{r7}
 8006508:	b085      	sub	sp, #20
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006516:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	bc80      	pop	{r7}
 800652a:	4770      	bx	lr

0800652c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800653a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006542:	2b00      	cmp	r3, #0
 8006544:	d01c      	beq.n	8006580 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800654c:	2b00      	cmp	r3, #0
 800654e:	d115      	bne.n	800657c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2201      	movs	r2, #1
 8006554:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800656e:	b29b      	uxth	r3, r3
 8006570:	2181      	movs	r1, #129	; 0x81
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f001 fd9e 	bl	80080b4 <USBD_LL_Transmit>

      return USBD_OK;
 8006578:	2300      	movs	r3, #0
 800657a:	e002      	b.n	8006582 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800657c:	2301      	movs	r3, #1
 800657e:	e000      	b.n	8006582 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006580:	2302      	movs	r3, #2
  }
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006598:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d017      	beq.n	80065d4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	7c1b      	ldrb	r3, [r3, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d109      	bne.n	80065c0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065b6:	2101      	movs	r1, #1
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f001 fd9e 	bl	80080fa <USBD_LL_PrepareReceive>
 80065be:	e007      	b.n	80065d0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065c6:	2340      	movs	r3, #64	; 0x40
 80065c8:	2101      	movs	r1, #1
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f001 fd95 	bl	80080fa <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	e000      	b.n	80065d6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80065d4:	2302      	movs	r3, #2
  }
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b084      	sub	sp, #16
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	60f8      	str	r0, [r7, #12]
 80065e6:	60b9      	str	r1, [r7, #8]
 80065e8:	4613      	mov	r3, r2
 80065ea:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80065f2:	2302      	movs	r3, #2
 80065f4:	e01a      	b.n	800662c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	79fa      	ldrb	r2, [r7, #7]
 8006622:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f001 fc13 	bl	8007e50 <USBD_LL_Init>

  return USBD_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d006      	beq.n	8006656 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	73fb      	strb	r3, [r7, #15]
 8006654:	e001      	b.n	800665a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006656:	2302      	movs	r3, #2
 8006658:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800665a:	7bfb      	ldrb	r3, [r7, #15]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	bc80      	pop	{r7}
 8006664:	4770      	bx	lr

08006666 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b082      	sub	sp, #8
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f001 fc38 	bl	8007ee4 <USBD_LL_Start>

  return USBD_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	bc80      	pop	{r7}
 8006690:	4770      	bx	lr

08006692 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	460b      	mov	r3, r1
 800669c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800669e:	2302      	movs	r3, #2
 80066a0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00c      	beq.n	80066c6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	78fa      	ldrb	r2, [r7, #3]
 80066b6:	4611      	mov	r1, r2
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	4798      	blx	r3
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	78fa      	ldrb	r2, [r7, #3]
 80066e6:	4611      	mov	r1, r2
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	4798      	blx	r3

  return USBD_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b082      	sub	sp, #8
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006706:	6839      	ldr	r1, [r7, #0]
 8006708:	4618      	mov	r0, r3
 800670a:	f000 ff10 	bl	800752e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800671c:	461a      	mov	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800672a:	f003 031f 	and.w	r3, r3, #31
 800672e:	2b02      	cmp	r3, #2
 8006730:	d016      	beq.n	8006760 <USBD_LL_SetupStage+0x6a>
 8006732:	2b02      	cmp	r3, #2
 8006734:	d81c      	bhi.n	8006770 <USBD_LL_SetupStage+0x7a>
 8006736:	2b00      	cmp	r3, #0
 8006738:	d002      	beq.n	8006740 <USBD_LL_SetupStage+0x4a>
 800673a:	2b01      	cmp	r3, #1
 800673c:	d008      	beq.n	8006750 <USBD_LL_SetupStage+0x5a>
 800673e:	e017      	b.n	8006770 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006746:	4619      	mov	r1, r3
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fa03 	bl	8006b54 <USBD_StdDevReq>
      break;
 800674e:	e01a      	b.n	8006786 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fa65 	bl	8006c28 <USBD_StdItfReq>
      break;
 800675e:	e012      	b.n	8006786 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006766:	4619      	mov	r1, r3
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 faa5 	bl	8006cb8 <USBD_StdEPReq>
      break;
 800676e:	e00a      	b.n	8006786 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006776:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800677a:	b2db      	uxtb	r3, r3
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f001 fc10 	bl	8007fa4 <USBD_LL_StallEP>
      break;
 8006784:	bf00      	nop
  }

  return USBD_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	460b      	mov	r3, r1
 800679a:	607a      	str	r2, [r7, #4]
 800679c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800679e:	7afb      	ldrb	r3, [r7, #11]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d14b      	bne.n	800683c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80067aa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d134      	bne.n	8006820 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d919      	bls.n	80067f6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	1ad2      	subs	r2, r2, r3
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80067d8:	429a      	cmp	r2, r3
 80067da:	d203      	bcs.n	80067e4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	e002      	b.n	80067ea <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	461a      	mov	r2, r3
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 ff8f 	bl	8007712 <USBD_CtlContinueRx>
 80067f4:	e038      	b.n	8006868 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00a      	beq.n	8006818 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006808:	2b03      	cmp	r3, #3
 800680a:	d105      	bne.n	8006818 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 ff8c 	bl	8007736 <USBD_CtlSendStatus>
 800681e:	e023      	b.n	8006868 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006826:	2b05      	cmp	r3, #5
 8006828:	d11e      	bne.n	8006868 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006832:	2100      	movs	r1, #0
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f001 fbb5 	bl	8007fa4 <USBD_LL_StallEP>
 800683a:	e015      	b.n	8006868 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00d      	beq.n	8006864 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800684e:	2b03      	cmp	r3, #3
 8006850:	d108      	bne.n	8006864 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	7afa      	ldrb	r2, [r7, #11]
 800685c:	4611      	mov	r1, r2
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	4798      	blx	r3
 8006862:	e001      	b.n	8006868 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006864:	2302      	movs	r3, #2
 8006866:	e000      	b.n	800686a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3718      	adds	r7, #24
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b086      	sub	sp, #24
 8006876:	af00      	add	r7, sp, #0
 8006878:	60f8      	str	r0, [r7, #12]
 800687a:	460b      	mov	r3, r1
 800687c:	607a      	str	r2, [r7, #4]
 800687e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006880:	7afb      	ldrb	r3, [r7, #11]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d17f      	bne.n	8006986 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3314      	adds	r3, #20
 800688a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006892:	2b02      	cmp	r3, #2
 8006894:	d15c      	bne.n	8006950 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	68da      	ldr	r2, [r3, #12]
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d915      	bls.n	80068ce <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	68da      	ldr	r2, [r3, #12]
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	1ad2      	subs	r2, r2, r3
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	6879      	ldr	r1, [r7, #4]
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 fef9 	bl	80076b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068c0:	2300      	movs	r3, #0
 80068c2:	2200      	movs	r2, #0
 80068c4:	2100      	movs	r1, #0
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f001 fc17 	bl	80080fa <USBD_LL_PrepareReceive>
 80068cc:	e04e      	b.n	800696c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	6912      	ldr	r2, [r2, #16]
 80068d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80068da:	fb02 f201 	mul.w	r2, r2, r1
 80068de:	1a9b      	subs	r3, r3, r2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d11c      	bne.n	800691e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d316      	bcc.n	800691e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d20f      	bcs.n	800691e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80068fe:	2200      	movs	r2, #0
 8006900:	2100      	movs	r1, #0
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f000 fed5 	bl	80076b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006910:	2300      	movs	r3, #0
 8006912:	2200      	movs	r2, #0
 8006914:	2100      	movs	r1, #0
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f001 fbef 	bl	80080fa <USBD_LL_PrepareReceive>
 800691c:	e026      	b.n	800696c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00a      	beq.n	8006940 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006930:	2b03      	cmp	r3, #3
 8006932:	d105      	bne.n	8006940 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006940:	2180      	movs	r1, #128	; 0x80
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f001 fb2e 	bl	8007fa4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 ff07 	bl	800775c <USBD_CtlReceiveStatus>
 800694e:	e00d      	b.n	800696c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006956:	2b04      	cmp	r3, #4
 8006958:	d004      	beq.n	8006964 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006960:	2b00      	cmp	r3, #0
 8006962:	d103      	bne.n	800696c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006964:	2180      	movs	r1, #128	; 0x80
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f001 fb1c 	bl	8007fa4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006972:	2b01      	cmp	r3, #1
 8006974:	d11d      	bne.n	80069b2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f7ff fe81 	bl	800667e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006984:	e015      	b.n	80069b2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00d      	beq.n	80069ae <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006998:	2b03      	cmp	r3, #3
 800699a:	d108      	bne.n	80069ae <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	7afa      	ldrb	r2, [r7, #11]
 80069a6:	4611      	mov	r1, r2
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	4798      	blx	r3
 80069ac:	e001      	b.n	80069b2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80069ae:	2302      	movs	r3, #2
 80069b0:	e000      	b.n	80069b4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069c4:	2340      	movs	r3, #64	; 0x40
 80069c6:	2200      	movs	r2, #0
 80069c8:	2100      	movs	r1, #0
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f001 faa5 	bl	8007f1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2240      	movs	r2, #64	; 0x40
 80069dc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069e0:	2340      	movs	r3, #64	; 0x40
 80069e2:	2200      	movs	r2, #0
 80069e4:	2180      	movs	r1, #128	; 0x80
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f001 fa97 	bl	8007f1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2240      	movs	r2, #64	; 0x40
 80069f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d009      	beq.n	8006a34 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	6852      	ldr	r2, [r2, #4]
 8006a2c:	b2d2      	uxtb	r2, r2
 8006a2e:	4611      	mov	r1, r2
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	4798      	blx	r3
  }

  return USBD_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3708      	adds	r7, #8
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	460b      	mov	r3, r1
 8006a48:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	78fa      	ldrb	r2, [r7, #3]
 8006a4e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bc80      	pop	{r7}
 8006a5a:	4770      	bx	lr

08006a5c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2204      	movs	r2, #4
 8006a74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bc80      	pop	{r7}
 8006a82:	4770      	bx	lr

08006a84 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a92:	2b04      	cmp	r3, #4
 8006a94:	d105      	bne.n	8006aa2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bc80      	pop	{r7}
 8006aac:	4770      	bx	lr

08006aae <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b082      	sub	sp, #8
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006abc:	2b03      	cmp	r3, #3
 8006abe:	d10b      	bne.n	8006ad8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d005      	beq.n	8006ad8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	460b      	mov	r3, r1
 8006aec:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bc80      	pop	{r7}
 8006af8:	4770      	bx	lr

08006afa <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	460b      	mov	r3, r1
 8006b04:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bc80      	pop	{r7}
 8006b10:	4770      	bx	lr

08006b12 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b083      	sub	sp, #12
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bc80      	pop	{r7}
 8006b24:	4770      	bx	lr

08006b26 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b082      	sub	sp, #8
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	6852      	ldr	r2, [r2, #4]
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	4611      	mov	r1, r2
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	4798      	blx	r3

  return USBD_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b6a:	2b40      	cmp	r3, #64	; 0x40
 8006b6c:	d005      	beq.n	8006b7a <USBD_StdDevReq+0x26>
 8006b6e:	2b40      	cmp	r3, #64	; 0x40
 8006b70:	d84f      	bhi.n	8006c12 <USBD_StdDevReq+0xbe>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d009      	beq.n	8006b8a <USBD_StdDevReq+0x36>
 8006b76:	2b20      	cmp	r3, #32
 8006b78:	d14b      	bne.n	8006c12 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	4798      	blx	r3
      break;
 8006b88:	e048      	b.n	8006c1c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	785b      	ldrb	r3, [r3, #1]
 8006b8e:	2b09      	cmp	r3, #9
 8006b90:	d839      	bhi.n	8006c06 <USBD_StdDevReq+0xb2>
 8006b92:	a201      	add	r2, pc, #4	; (adr r2, 8006b98 <USBD_StdDevReq+0x44>)
 8006b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b98:	08006be9 	.word	0x08006be9
 8006b9c:	08006bfd 	.word	0x08006bfd
 8006ba0:	08006c07 	.word	0x08006c07
 8006ba4:	08006bf3 	.word	0x08006bf3
 8006ba8:	08006c07 	.word	0x08006c07
 8006bac:	08006bcb 	.word	0x08006bcb
 8006bb0:	08006bc1 	.word	0x08006bc1
 8006bb4:	08006c07 	.word	0x08006c07
 8006bb8:	08006bdf 	.word	0x08006bdf
 8006bbc:	08006bd5 	.word	0x08006bd5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f9dc 	bl	8006f80 <USBD_GetDescriptor>
          break;
 8006bc8:	e022      	b.n	8006c10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 fb3f 	bl	8007250 <USBD_SetAddress>
          break;
 8006bd2:	e01d      	b.n	8006c10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fb7e 	bl	80072d8 <USBD_SetConfig>
          break;
 8006bdc:	e018      	b.n	8006c10 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fc07 	bl	80073f4 <USBD_GetConfig>
          break;
 8006be6:	e013      	b.n	8006c10 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fc37 	bl	800745e <USBD_GetStatus>
          break;
 8006bf0:	e00e      	b.n	8006c10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006bf2:	6839      	ldr	r1, [r7, #0]
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fc65 	bl	80074c4 <USBD_SetFeature>
          break;
 8006bfa:	e009      	b.n	8006c10 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fc74 	bl	80074ec <USBD_ClrFeature>
          break;
 8006c04:	e004      	b.n	8006c10 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006c06:	6839      	ldr	r1, [r7, #0]
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fccc 	bl	80075a6 <USBD_CtlError>
          break;
 8006c0e:	bf00      	nop
      }
      break;
 8006c10:	e004      	b.n	8006c1c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fcc6 	bl	80075a6 <USBD_CtlError>
      break;
 8006c1a:	bf00      	nop
  }

  return ret;
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop

08006c28 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c3e:	2b40      	cmp	r3, #64	; 0x40
 8006c40:	d005      	beq.n	8006c4e <USBD_StdItfReq+0x26>
 8006c42:	2b40      	cmp	r3, #64	; 0x40
 8006c44:	d82e      	bhi.n	8006ca4 <USBD_StdItfReq+0x7c>
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <USBD_StdItfReq+0x26>
 8006c4a:	2b20      	cmp	r3, #32
 8006c4c:	d12a      	bne.n	8006ca4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c54:	3b01      	subs	r3, #1
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d81d      	bhi.n	8006c96 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	889b      	ldrh	r3, [r3, #4]
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d813      	bhi.n	8006c8c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	4798      	blx	r3
 8006c72:	4603      	mov	r3, r0
 8006c74:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	88db      	ldrh	r3, [r3, #6]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d110      	bne.n	8006ca0 <USBD_StdItfReq+0x78>
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10d      	bne.n	8006ca0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fd56 	bl	8007736 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c8a:	e009      	b.n	8006ca0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fc89 	bl	80075a6 <USBD_CtlError>
          break;
 8006c94:	e004      	b.n	8006ca0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006c96:	6839      	ldr	r1, [r7, #0]
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fc84 	bl	80075a6 <USBD_CtlError>
          break;
 8006c9e:	e000      	b.n	8006ca2 <USBD_StdItfReq+0x7a>
          break;
 8006ca0:	bf00      	nop
      }
      break;
 8006ca2:	e004      	b.n	8006cae <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fc7d 	bl	80075a6 <USBD_CtlError>
      break;
 8006cac:	bf00      	nop
  }

  return USBD_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	889b      	ldrh	r3, [r3, #4]
 8006cca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cd4:	2b40      	cmp	r3, #64	; 0x40
 8006cd6:	d007      	beq.n	8006ce8 <USBD_StdEPReq+0x30>
 8006cd8:	2b40      	cmp	r3, #64	; 0x40
 8006cda:	f200 8146 	bhi.w	8006f6a <USBD_StdEPReq+0x2b2>
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <USBD_StdEPReq+0x40>
 8006ce2:	2b20      	cmp	r3, #32
 8006ce4:	f040 8141 	bne.w	8006f6a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	6839      	ldr	r1, [r7, #0]
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	4798      	blx	r3
      break;
 8006cf6:	e13d      	b.n	8006f74 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d00:	2b20      	cmp	r3, #32
 8006d02:	d10a      	bne.n	8006d1a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	4798      	blx	r3
 8006d12:	4603      	mov	r3, r0
 8006d14:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
 8006d18:	e12d      	b.n	8006f76 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	785b      	ldrb	r3, [r3, #1]
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d007      	beq.n	8006d32 <USBD_StdEPReq+0x7a>
 8006d22:	2b03      	cmp	r3, #3
 8006d24:	f300 811b 	bgt.w	8006f5e <USBD_StdEPReq+0x2a6>
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d072      	beq.n	8006e12 <USBD_StdEPReq+0x15a>
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d03a      	beq.n	8006da6 <USBD_StdEPReq+0xee>
 8006d30:	e115      	b.n	8006f5e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d002      	beq.n	8006d42 <USBD_StdEPReq+0x8a>
 8006d3c:	2b03      	cmp	r3, #3
 8006d3e:	d015      	beq.n	8006d6c <USBD_StdEPReq+0xb4>
 8006d40:	e02b      	b.n	8006d9a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d42:	7bbb      	ldrb	r3, [r7, #14]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00c      	beq.n	8006d62 <USBD_StdEPReq+0xaa>
 8006d48:	7bbb      	ldrb	r3, [r7, #14]
 8006d4a:	2b80      	cmp	r3, #128	; 0x80
 8006d4c:	d009      	beq.n	8006d62 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006d4e:	7bbb      	ldrb	r3, [r7, #14]
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f001 f926 	bl	8007fa4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006d58:	2180      	movs	r1, #128	; 0x80
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f001 f922 	bl	8007fa4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d60:	e020      	b.n	8006da4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fc1e 	bl	80075a6 <USBD_CtlError>
              break;
 8006d6a:	e01b      	b.n	8006da4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	885b      	ldrh	r3, [r3, #2]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10e      	bne.n	8006d92 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006d74:	7bbb      	ldrb	r3, [r7, #14]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00b      	beq.n	8006d92 <USBD_StdEPReq+0xda>
 8006d7a:	7bbb      	ldrb	r3, [r7, #14]
 8006d7c:	2b80      	cmp	r3, #128	; 0x80
 8006d7e:	d008      	beq.n	8006d92 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	88db      	ldrh	r3, [r3, #6]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d104      	bne.n	8006d92 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f001 f909 	bl	8007fa4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fccf 	bl	8007736 <USBD_CtlSendStatus>

              break;
 8006d98:	e004      	b.n	8006da4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fc02 	bl	80075a6 <USBD_CtlError>
              break;
 8006da2:	bf00      	nop
          }
          break;
 8006da4:	e0e0      	b.n	8006f68 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d002      	beq.n	8006db6 <USBD_StdEPReq+0xfe>
 8006db0:	2b03      	cmp	r3, #3
 8006db2:	d015      	beq.n	8006de0 <USBD_StdEPReq+0x128>
 8006db4:	e026      	b.n	8006e04 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006db6:	7bbb      	ldrb	r3, [r7, #14]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00c      	beq.n	8006dd6 <USBD_StdEPReq+0x11e>
 8006dbc:	7bbb      	ldrb	r3, [r7, #14]
 8006dbe:	2b80      	cmp	r3, #128	; 0x80
 8006dc0:	d009      	beq.n	8006dd6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006dc2:	7bbb      	ldrb	r3, [r7, #14]
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f001 f8ec 	bl	8007fa4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006dcc:	2180      	movs	r1, #128	; 0x80
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f001 f8e8 	bl	8007fa4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006dd4:	e01c      	b.n	8006e10 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fbe4 	bl	80075a6 <USBD_CtlError>
              break;
 8006dde:	e017      	b.n	8006e10 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	885b      	ldrh	r3, [r3, #2]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d112      	bne.n	8006e0e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006de8:	7bbb      	ldrb	r3, [r7, #14]
 8006dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d004      	beq.n	8006dfc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006df2:	7bbb      	ldrb	r3, [r7, #14]
 8006df4:	4619      	mov	r1, r3
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f001 f8f3 	bl	8007fe2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fc9a 	bl	8007736 <USBD_CtlSendStatus>
              }
              break;
 8006e02:	e004      	b.n	8006e0e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fbcd 	bl	80075a6 <USBD_CtlError>
              break;
 8006e0c:	e000      	b.n	8006e10 <USBD_StdEPReq+0x158>
              break;
 8006e0e:	bf00      	nop
          }
          break;
 8006e10:	e0aa      	b.n	8006f68 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d002      	beq.n	8006e22 <USBD_StdEPReq+0x16a>
 8006e1c:	2b03      	cmp	r3, #3
 8006e1e:	d032      	beq.n	8006e86 <USBD_StdEPReq+0x1ce>
 8006e20:	e097      	b.n	8006f52 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e22:	7bbb      	ldrb	r3, [r7, #14]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d007      	beq.n	8006e38 <USBD_StdEPReq+0x180>
 8006e28:	7bbb      	ldrb	r3, [r7, #14]
 8006e2a:	2b80      	cmp	r3, #128	; 0x80
 8006e2c:	d004      	beq.n	8006e38 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fbb8 	bl	80075a6 <USBD_CtlError>
                break;
 8006e36:	e091      	b.n	8006f5c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	da0b      	bge.n	8006e58 <USBD_StdEPReq+0x1a0>
 8006e40:	7bbb      	ldrb	r3, [r7, #14]
 8006e42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e46:	4613      	mov	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	3310      	adds	r3, #16
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	4413      	add	r3, r2
 8006e54:	3304      	adds	r3, #4
 8006e56:	e00b      	b.n	8006e70 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e58:	7bbb      	ldrb	r3, [r7, #14]
 8006e5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e5e:	4613      	mov	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	3304      	adds	r3, #4
 8006e70:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fbfb 	bl	800767a <USBD_CtlSendData>
              break;
 8006e84:	e06a      	b.n	8006f5c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006e86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	da11      	bge.n	8006eb2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e8e:	7bbb      	ldrb	r3, [r7, #14]
 8006e90:	f003 020f 	and.w	r2, r3, #15
 8006e94:	6879      	ldr	r1, [r7, #4]
 8006e96:	4613      	mov	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	440b      	add	r3, r1
 8006ea0:	3318      	adds	r3, #24
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d117      	bne.n	8006ed8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fb7b 	bl	80075a6 <USBD_CtlError>
                  break;
 8006eb0:	e054      	b.n	8006f5c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006eb2:	7bbb      	ldrb	r3, [r7, #14]
 8006eb4:	f003 020f 	and.w	r2, r3, #15
 8006eb8:	6879      	ldr	r1, [r7, #4]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4413      	add	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	440b      	add	r3, r1
 8006ec4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d104      	bne.n	8006ed8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fb68 	bl	80075a6 <USBD_CtlError>
                  break;
 8006ed6:	e041      	b.n	8006f5c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ed8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	da0b      	bge.n	8006ef8 <USBD_StdEPReq+0x240>
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	3310      	adds	r3, #16
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	e00b      	b.n	8006f10 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ef8:	7bbb      	ldrb	r3, [r7, #14]
 8006efa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006efe:	4613      	mov	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	3304      	adds	r3, #4
 8006f10:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f12:	7bbb      	ldrb	r3, [r7, #14]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d002      	beq.n	8006f1e <USBD_StdEPReq+0x266>
 8006f18:	7bbb      	ldrb	r3, [r7, #14]
 8006f1a:	2b80      	cmp	r3, #128	; 0x80
 8006f1c:	d103      	bne.n	8006f26 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	e00e      	b.n	8006f44 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006f26:	7bbb      	ldrb	r3, [r7, #14]
 8006f28:	4619      	mov	r1, r3
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f001 f878 	bl	8008020 <USBD_LL_IsStallEP>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d003      	beq.n	8006f3e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	e002      	b.n	8006f44 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	2200      	movs	r2, #0
 8006f42:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2202      	movs	r2, #2
 8006f48:	4619      	mov	r1, r3
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fb95 	bl	800767a <USBD_CtlSendData>
              break;
 8006f50:	e004      	b.n	8006f5c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fb26 	bl	80075a6 <USBD_CtlError>
              break;
 8006f5a:	bf00      	nop
          }
          break;
 8006f5c:	e004      	b.n	8006f68 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006f5e:	6839      	ldr	r1, [r7, #0]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fb20 	bl	80075a6 <USBD_CtlError>
          break;
 8006f66:	bf00      	nop
      }
      break;
 8006f68:	e004      	b.n	8006f74 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fb1a 	bl	80075a6 <USBD_CtlError>
      break;
 8006f72:	bf00      	nop
  }

  return ret;
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
	...

08006f80 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	885b      	ldrh	r3, [r3, #2]
 8006f9a:	0a1b      	lsrs	r3, r3, #8
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	2b06      	cmp	r3, #6
 8006fa2:	f200 8128 	bhi.w	80071f6 <USBD_GetDescriptor+0x276>
 8006fa6:	a201      	add	r2, pc, #4	; (adr r2, 8006fac <USBD_GetDescriptor+0x2c>)
 8006fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fac:	08006fc9 	.word	0x08006fc9
 8006fb0:	08006fe1 	.word	0x08006fe1
 8006fb4:	08007021 	.word	0x08007021
 8006fb8:	080071f7 	.word	0x080071f7
 8006fbc:	080071f7 	.word	0x080071f7
 8006fc0:	08007197 	.word	0x08007197
 8006fc4:	080071c3 	.word	0x080071c3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	7c12      	ldrb	r2, [r2, #16]
 8006fd4:	f107 0108 	add.w	r1, r7, #8
 8006fd8:	4610      	mov	r0, r2
 8006fda:	4798      	blx	r3
 8006fdc:	60f8      	str	r0, [r7, #12]
      break;
 8006fde:	e112      	b.n	8007206 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	7c1b      	ldrb	r3, [r3, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10d      	bne.n	8007004 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff0:	f107 0208 	add.w	r2, r7, #8
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	4798      	blx	r3
 8006ff8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	2202      	movs	r2, #2
 8007000:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007002:	e100      	b.n	8007206 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800700a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700c:	f107 0208 	add.w	r2, r7, #8
 8007010:	4610      	mov	r0, r2
 8007012:	4798      	blx	r3
 8007014:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	3301      	adds	r3, #1
 800701a:	2202      	movs	r2, #2
 800701c:	701a      	strb	r2, [r3, #0]
      break;
 800701e:	e0f2      	b.n	8007206 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	885b      	ldrh	r3, [r3, #2]
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b05      	cmp	r3, #5
 8007028:	f200 80ac 	bhi.w	8007184 <USBD_GetDescriptor+0x204>
 800702c:	a201      	add	r2, pc, #4	; (adr r2, 8007034 <USBD_GetDescriptor+0xb4>)
 800702e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007032:	bf00      	nop
 8007034:	0800704d 	.word	0x0800704d
 8007038:	08007081 	.word	0x08007081
 800703c:	080070b5 	.word	0x080070b5
 8007040:	080070e9 	.word	0x080070e9
 8007044:	0800711d 	.word	0x0800711d
 8007048:	08007151 	.word	0x08007151
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00b      	beq.n	8007070 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	7c12      	ldrb	r2, [r2, #16]
 8007064:	f107 0108 	add.w	r1, r7, #8
 8007068:	4610      	mov	r0, r2
 800706a:	4798      	blx	r3
 800706c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800706e:	e091      	b.n	8007194 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fa97 	bl	80075a6 <USBD_CtlError>
            err++;
 8007078:	7afb      	ldrb	r3, [r7, #11]
 800707a:	3301      	adds	r3, #1
 800707c:	72fb      	strb	r3, [r7, #11]
          break;
 800707e:	e089      	b.n	8007194 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00b      	beq.n	80070a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	7c12      	ldrb	r2, [r2, #16]
 8007098:	f107 0108 	add.w	r1, r7, #8
 800709c:	4610      	mov	r0, r2
 800709e:	4798      	blx	r3
 80070a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070a2:	e077      	b.n	8007194 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fa7d 	bl	80075a6 <USBD_CtlError>
            err++;
 80070ac:	7afb      	ldrb	r3, [r7, #11]
 80070ae:	3301      	adds	r3, #1
 80070b0:	72fb      	strb	r3, [r7, #11]
          break;
 80070b2:	e06f      	b.n	8007194 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00b      	beq.n	80070d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	7c12      	ldrb	r2, [r2, #16]
 80070cc:	f107 0108 	add.w	r1, r7, #8
 80070d0:	4610      	mov	r0, r2
 80070d2:	4798      	blx	r3
 80070d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070d6:	e05d      	b.n	8007194 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fa63 	bl	80075a6 <USBD_CtlError>
            err++;
 80070e0:	7afb      	ldrb	r3, [r7, #11]
 80070e2:	3301      	adds	r3, #1
 80070e4:	72fb      	strb	r3, [r7, #11]
          break;
 80070e6:	e055      	b.n	8007194 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00b      	beq.n	800710c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	7c12      	ldrb	r2, [r2, #16]
 8007100:	f107 0108 	add.w	r1, r7, #8
 8007104:	4610      	mov	r0, r2
 8007106:	4798      	blx	r3
 8007108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800710a:	e043      	b.n	8007194 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fa49 	bl	80075a6 <USBD_CtlError>
            err++;
 8007114:	7afb      	ldrb	r3, [r7, #11]
 8007116:	3301      	adds	r3, #1
 8007118:	72fb      	strb	r3, [r7, #11]
          break;
 800711a:	e03b      	b.n	8007194 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00b      	beq.n	8007140 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800712e:	695b      	ldr	r3, [r3, #20]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	7c12      	ldrb	r2, [r2, #16]
 8007134:	f107 0108 	add.w	r1, r7, #8
 8007138:	4610      	mov	r0, r2
 800713a:	4798      	blx	r3
 800713c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800713e:	e029      	b.n	8007194 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fa2f 	bl	80075a6 <USBD_CtlError>
            err++;
 8007148:	7afb      	ldrb	r3, [r7, #11]
 800714a:	3301      	adds	r3, #1
 800714c:	72fb      	strb	r3, [r7, #11]
          break;
 800714e:	e021      	b.n	8007194 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00b      	beq.n	8007174 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	7c12      	ldrb	r2, [r2, #16]
 8007168:	f107 0108 	add.w	r1, r7, #8
 800716c:	4610      	mov	r0, r2
 800716e:	4798      	blx	r3
 8007170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007172:	e00f      	b.n	8007194 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fa15 	bl	80075a6 <USBD_CtlError>
            err++;
 800717c:	7afb      	ldrb	r3, [r7, #11]
 800717e:	3301      	adds	r3, #1
 8007180:	72fb      	strb	r3, [r7, #11]
          break;
 8007182:	e007      	b.n	8007194 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fa0d 	bl	80075a6 <USBD_CtlError>
          err++;
 800718c:	7afb      	ldrb	r3, [r7, #11]
 800718e:	3301      	adds	r3, #1
 8007190:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007192:	e038      	b.n	8007206 <USBD_GetDescriptor+0x286>
 8007194:	e037      	b.n	8007206 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	7c1b      	ldrb	r3, [r3, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d109      	bne.n	80071b2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a6:	f107 0208 	add.w	r2, r7, #8
 80071aa:	4610      	mov	r0, r2
 80071ac:	4798      	blx	r3
 80071ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071b0:	e029      	b.n	8007206 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f9f6 	bl	80075a6 <USBD_CtlError>
        err++;
 80071ba:	7afb      	ldrb	r3, [r7, #11]
 80071bc:	3301      	adds	r3, #1
 80071be:	72fb      	strb	r3, [r7, #11]
      break;
 80071c0:	e021      	b.n	8007206 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	7c1b      	ldrb	r3, [r3, #16]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10d      	bne.n	80071e6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	f107 0208 	add.w	r2, r7, #8
 80071d6:	4610      	mov	r0, r2
 80071d8:	4798      	blx	r3
 80071da:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	3301      	adds	r3, #1
 80071e0:	2207      	movs	r2, #7
 80071e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071e4:	e00f      	b.n	8007206 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f9dc 	bl	80075a6 <USBD_CtlError>
        err++;
 80071ee:	7afb      	ldrb	r3, [r7, #11]
 80071f0:	3301      	adds	r3, #1
 80071f2:	72fb      	strb	r3, [r7, #11]
      break;
 80071f4:	e007      	b.n	8007206 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f9d4 	bl	80075a6 <USBD_CtlError>
      err++;
 80071fe:	7afb      	ldrb	r3, [r7, #11]
 8007200:	3301      	adds	r3, #1
 8007202:	72fb      	strb	r3, [r7, #11]
      break;
 8007204:	bf00      	nop
  }

  if (err != 0U)
 8007206:	7afb      	ldrb	r3, [r7, #11]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d11c      	bne.n	8007246 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800720c:	893b      	ldrh	r3, [r7, #8]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d011      	beq.n	8007236 <USBD_GetDescriptor+0x2b6>
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	88db      	ldrh	r3, [r3, #6]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00d      	beq.n	8007236 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	88da      	ldrh	r2, [r3, #6]
 800721e:	893b      	ldrh	r3, [r7, #8]
 8007220:	4293      	cmp	r3, r2
 8007222:	bf28      	it	cs
 8007224:	4613      	movcs	r3, r2
 8007226:	b29b      	uxth	r3, r3
 8007228:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800722a:	893b      	ldrh	r3, [r7, #8]
 800722c:	461a      	mov	r2, r3
 800722e:	68f9      	ldr	r1, [r7, #12]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fa22 	bl	800767a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	88db      	ldrh	r3, [r3, #6]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d104      	bne.n	8007248 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fa79 	bl	8007736 <USBD_CtlSendStatus>
 8007244:	e000      	b.n	8007248 <USBD_GetDescriptor+0x2c8>
    return;
 8007246:	bf00      	nop
    }
  }
}
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop

08007250 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	889b      	ldrh	r3, [r3, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d130      	bne.n	80072c4 <USBD_SetAddress+0x74>
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	88db      	ldrh	r3, [r3, #6]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d12c      	bne.n	80072c4 <USBD_SetAddress+0x74>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	885b      	ldrh	r3, [r3, #2]
 800726e:	2b7f      	cmp	r3, #127	; 0x7f
 8007270:	d828      	bhi.n	80072c4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	885b      	ldrh	r3, [r3, #2]
 8007276:	b2db      	uxtb	r3, r3
 8007278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800727c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007284:	2b03      	cmp	r3, #3
 8007286:	d104      	bne.n	8007292 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f98b 	bl	80075a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007290:	e01d      	b.n	80072ce <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	7bfa      	ldrb	r2, [r7, #15]
 8007296:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800729a:	7bfb      	ldrb	r3, [r7, #15]
 800729c:	4619      	mov	r1, r3
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fee9 	bl	8008076 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fa46 	bl	8007736 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d004      	beq.n	80072ba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072b8:	e009      	b.n	80072ce <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072c2:	e004      	b.n	80072ce <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f96d 	bl	80075a6 <USBD_CtlError>
  }
}
 80072cc:	bf00      	nop
 80072ce:	bf00      	nop
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
	...

080072d8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	885b      	ldrh	r3, [r3, #2]
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	4b41      	ldr	r3, [pc, #260]	; (80073f0 <USBD_SetConfig+0x118>)
 80072ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80072ec:	4b40      	ldr	r3, [pc, #256]	; (80073f0 <USBD_SetConfig+0x118>)
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d904      	bls.n	80072fe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f955 	bl	80075a6 <USBD_CtlError>
 80072fc:	e075      	b.n	80073ea <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007304:	2b02      	cmp	r3, #2
 8007306:	d002      	beq.n	800730e <USBD_SetConfig+0x36>
 8007308:	2b03      	cmp	r3, #3
 800730a:	d023      	beq.n	8007354 <USBD_SetConfig+0x7c>
 800730c:	e062      	b.n	80073d4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800730e:	4b38      	ldr	r3, [pc, #224]	; (80073f0 <USBD_SetConfig+0x118>)
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d01a      	beq.n	800734c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007316:	4b36      	ldr	r3, [pc, #216]	; (80073f0 <USBD_SetConfig+0x118>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	461a      	mov	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2203      	movs	r2, #3
 8007324:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007328:	4b31      	ldr	r3, [pc, #196]	; (80073f0 <USBD_SetConfig+0x118>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	4619      	mov	r1, r3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff f9af 	bl	8006692 <USBD_SetClassConfig>
 8007334:	4603      	mov	r3, r0
 8007336:	2b02      	cmp	r3, #2
 8007338:	d104      	bne.n	8007344 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800733a:	6839      	ldr	r1, [r7, #0]
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 f932 	bl	80075a6 <USBD_CtlError>
            return;
 8007342:	e052      	b.n	80073ea <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f9f6 	bl	8007736 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800734a:	e04e      	b.n	80073ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f9f2 	bl	8007736 <USBD_CtlSendStatus>
        break;
 8007352:	e04a      	b.n	80073ea <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007354:	4b26      	ldr	r3, [pc, #152]	; (80073f0 <USBD_SetConfig+0x118>)
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d112      	bne.n	8007382 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2202      	movs	r2, #2
 8007360:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007364:	4b22      	ldr	r3, [pc, #136]	; (80073f0 <USBD_SetConfig+0x118>)
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	461a      	mov	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800736e:	4b20      	ldr	r3, [pc, #128]	; (80073f0 <USBD_SetConfig+0x118>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	4619      	mov	r1, r3
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7ff f9ab 	bl	80066d0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f9db 	bl	8007736 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007380:	e033      	b.n	80073ea <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007382:	4b1b      	ldr	r3, [pc, #108]	; (80073f0 <USBD_SetConfig+0x118>)
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	461a      	mov	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	429a      	cmp	r2, r3
 800738e:	d01d      	beq.n	80073cc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	b2db      	uxtb	r3, r3
 8007396:	4619      	mov	r1, r3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f7ff f999 	bl	80066d0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800739e:	4b14      	ldr	r3, [pc, #80]	; (80073f0 <USBD_SetConfig+0x118>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	461a      	mov	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80073a8:	4b11      	ldr	r3, [pc, #68]	; (80073f0 <USBD_SetConfig+0x118>)
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7ff f96f 	bl	8006692 <USBD_SetClassConfig>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d104      	bne.n	80073c4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f8f2 	bl	80075a6 <USBD_CtlError>
            return;
 80073c2:	e012      	b.n	80073ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f9b6 	bl	8007736 <USBD_CtlSendStatus>
        break;
 80073ca:	e00e      	b.n	80073ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f9b2 	bl	8007736 <USBD_CtlSendStatus>
        break;
 80073d2:	e00a      	b.n	80073ea <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80073d4:	6839      	ldr	r1, [r7, #0]
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f8e5 	bl	80075a6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80073dc:	4b04      	ldr	r3, [pc, #16]	; (80073f0 <USBD_SetConfig+0x118>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7ff f974 	bl	80066d0 <USBD_ClrClassConfig>
        break;
 80073e8:	bf00      	nop
    }
  }
}
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	2000028c 	.word	0x2000028c

080073f4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	88db      	ldrh	r3, [r3, #6]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d004      	beq.n	8007410 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f8cc 	bl	80075a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800740e:	e022      	b.n	8007456 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007416:	2b02      	cmp	r3, #2
 8007418:	dc02      	bgt.n	8007420 <USBD_GetConfig+0x2c>
 800741a:	2b00      	cmp	r3, #0
 800741c:	dc03      	bgt.n	8007426 <USBD_GetConfig+0x32>
 800741e:	e015      	b.n	800744c <USBD_GetConfig+0x58>
 8007420:	2b03      	cmp	r3, #3
 8007422:	d00b      	beq.n	800743c <USBD_GetConfig+0x48>
 8007424:	e012      	b.n	800744c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	3308      	adds	r3, #8
 8007430:	2201      	movs	r2, #1
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f920 	bl	800767a <USBD_CtlSendData>
        break;
 800743a:	e00c      	b.n	8007456 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	3304      	adds	r3, #4
 8007440:	2201      	movs	r2, #1
 8007442:	4619      	mov	r1, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f918 	bl	800767a <USBD_CtlSendData>
        break;
 800744a:	e004      	b.n	8007456 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800744c:	6839      	ldr	r1, [r7, #0]
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f8a9 	bl	80075a6 <USBD_CtlError>
        break;
 8007454:	bf00      	nop
}
 8007456:	bf00      	nop
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b082      	sub	sp, #8
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800746e:	3b01      	subs	r3, #1
 8007470:	2b02      	cmp	r3, #2
 8007472:	d81e      	bhi.n	80074b2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	88db      	ldrh	r3, [r3, #6]
 8007478:	2b02      	cmp	r3, #2
 800747a:	d004      	beq.n	8007486 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800747c:	6839      	ldr	r1, [r7, #0]
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f891 	bl	80075a6 <USBD_CtlError>
        break;
 8007484:	e01a      	b.n	80074bc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007492:	2b00      	cmp	r3, #0
 8007494:	d005      	beq.n	80074a2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	f043 0202 	orr.w	r2, r3, #2
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	330c      	adds	r3, #12
 80074a6:	2202      	movs	r2, #2
 80074a8:	4619      	mov	r1, r3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f8e5 	bl	800767a <USBD_CtlSendData>
      break;
 80074b0:	e004      	b.n	80074bc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f876 	bl	80075a6 <USBD_CtlError>
      break;
 80074ba:	bf00      	nop
  }
}
 80074bc:	bf00      	nop
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	885b      	ldrh	r3, [r3, #2]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d106      	bne.n	80074e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f929 	bl	8007736 <USBD_CtlSendStatus>
  }
}
 80074e4:	bf00      	nop
 80074e6:	3708      	adds	r7, #8
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074fc:	3b01      	subs	r3, #1
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d80b      	bhi.n	800751a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	885b      	ldrh	r3, [r3, #2]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d10c      	bne.n	8007524 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f90f 	bl	8007736 <USBD_CtlSendStatus>
      }
      break;
 8007518:	e004      	b.n	8007524 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f842 	bl	80075a6 <USBD_CtlError>
      break;
 8007522:	e000      	b.n	8007526 <USBD_ClrFeature+0x3a>
      break;
 8007524:	bf00      	nop
  }
}
 8007526:	bf00      	nop
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800752e:	b480      	push	{r7}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	781a      	ldrb	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	785a      	ldrb	r2, [r3, #1]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	3302      	adds	r3, #2
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	b29a      	uxth	r2, r3
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	3303      	adds	r3, #3
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	b29b      	uxth	r3, r3
 8007558:	021b      	lsls	r3, r3, #8
 800755a:	b29b      	uxth	r3, r3
 800755c:	4413      	add	r3, r2
 800755e:	b29a      	uxth	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	3304      	adds	r3, #4
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	b29a      	uxth	r2, r3
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	3305      	adds	r3, #5
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	b29b      	uxth	r3, r3
 8007574:	021b      	lsls	r3, r3, #8
 8007576:	b29b      	uxth	r3, r3
 8007578:	4413      	add	r3, r2
 800757a:	b29a      	uxth	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	3306      	adds	r3, #6
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	b29a      	uxth	r2, r3
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	3307      	adds	r3, #7
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	b29b      	uxth	r3, r3
 8007590:	021b      	lsls	r3, r3, #8
 8007592:	b29b      	uxth	r3, r3
 8007594:	4413      	add	r3, r2
 8007596:	b29a      	uxth	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	80da      	strh	r2, [r3, #6]

}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr

080075a6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80075b0:	2180      	movs	r1, #128	; 0x80
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fcf6 	bl	8007fa4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80075b8:	2100      	movs	r1, #0
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fcf2 	bl	8007fa4 <USBD_LL_StallEP>
}
 80075c0:	bf00      	nop
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b086      	sub	sp, #24
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d032      	beq.n	8007644 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 f834 	bl	800764c <USBD_GetLen>
 80075e4:	4603      	mov	r3, r0
 80075e6:	3301      	adds	r3, #1
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80075f2:	7dfb      	ldrb	r3, [r7, #23]
 80075f4:	1c5a      	adds	r2, r3, #1
 80075f6:	75fa      	strb	r2, [r7, #23]
 80075f8:	461a      	mov	r2, r3
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	4413      	add	r3, r2
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	7812      	ldrb	r2, [r2, #0]
 8007602:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007604:	7dfb      	ldrb	r3, [r7, #23]
 8007606:	1c5a      	adds	r2, r3, #1
 8007608:	75fa      	strb	r2, [r7, #23]
 800760a:	461a      	mov	r2, r3
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	4413      	add	r3, r2
 8007610:	2203      	movs	r2, #3
 8007612:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007614:	e012      	b.n	800763c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	1c5a      	adds	r2, r3, #1
 800761a:	60fa      	str	r2, [r7, #12]
 800761c:	7dfa      	ldrb	r2, [r7, #23]
 800761e:	1c51      	adds	r1, r2, #1
 8007620:	75f9      	strb	r1, [r7, #23]
 8007622:	4611      	mov	r1, r2
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	440a      	add	r2, r1
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800762c:	7dfb      	ldrb	r3, [r7, #23]
 800762e:	1c5a      	adds	r2, r3, #1
 8007630:	75fa      	strb	r2, [r7, #23]
 8007632:	461a      	mov	r2, r3
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	4413      	add	r3, r2
 8007638:	2200      	movs	r2, #0
 800763a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1e8      	bne.n	8007616 <USBD_GetString+0x4e>
    }
  }
}
 8007644:	bf00      	nop
 8007646:	3718      	adds	r7, #24
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007654:	2300      	movs	r3, #0
 8007656:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007658:	e005      	b.n	8007666 <USBD_GetLen+0x1a>
  {
    len++;
 800765a:	7bfb      	ldrb	r3, [r7, #15]
 800765c:	3301      	adds	r3, #1
 800765e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	3301      	adds	r3, #1
 8007664:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1f5      	bne.n	800765a <USBD_GetLen+0xe>
  }

  return len;
 800766e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	bc80      	pop	{r7}
 8007678:	4770      	bx	lr

0800767a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b084      	sub	sp, #16
 800767e:	af00      	add	r7, sp, #0
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	4613      	mov	r3, r2
 8007686:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2202      	movs	r2, #2
 800768c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007690:	88fa      	ldrh	r2, [r7, #6]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007696:	88fa      	ldrh	r2, [r7, #6]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800769c:	88fb      	ldrh	r3, [r7, #6]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	2100      	movs	r1, #0
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 fd06 	bl	80080b4 <USBD_LL_Transmit>

  return USBD_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b084      	sub	sp, #16
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	60f8      	str	r0, [r7, #12]
 80076ba:	60b9      	str	r1, [r7, #8]
 80076bc:	4613      	mov	r3, r2
 80076be:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076c0:	88fb      	ldrh	r3, [r7, #6]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	2100      	movs	r1, #0
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 fcf4 	bl	80080b4 <USBD_LL_Transmit>

  return USBD_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b084      	sub	sp, #16
 80076da:	af00      	add	r7, sp, #0
 80076dc:	60f8      	str	r0, [r7, #12]
 80076de:	60b9      	str	r1, [r7, #8]
 80076e0:	4613      	mov	r3, r2
 80076e2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2203      	movs	r2, #3
 80076e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80076ec:	88fa      	ldrh	r2, [r7, #6]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80076f4:	88fa      	ldrh	r2, [r7, #6]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076fc:	88fb      	ldrh	r3, [r7, #6]
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	2100      	movs	r1, #0
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 fcf9 	bl	80080fa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b084      	sub	sp, #16
 8007716:	af00      	add	r7, sp, #0
 8007718:	60f8      	str	r0, [r7, #12]
 800771a:	60b9      	str	r1, [r7, #8]
 800771c:	4613      	mov	r3, r2
 800771e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007720:	88fb      	ldrh	r3, [r7, #6]
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	2100      	movs	r1, #0
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 fce7 	bl	80080fa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b082      	sub	sp, #8
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2204      	movs	r2, #4
 8007742:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007746:	2300      	movs	r3, #0
 8007748:	2200      	movs	r2, #0
 800774a:	2100      	movs	r1, #0
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fcb1 	bl	80080b4 <USBD_LL_Transmit>

  return USBD_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2205      	movs	r2, #5
 8007768:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800776c:	2300      	movs	r3, #0
 800776e:	2200      	movs	r2, #0
 8007770:	2100      	movs	r1, #0
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fcc1 	bl	80080fa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
	...

08007784 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007788:	2200      	movs	r2, #0
 800778a:	4912      	ldr	r1, [pc, #72]	; (80077d4 <MX_USB_DEVICE_Init+0x50>)
 800778c:	4812      	ldr	r0, [pc, #72]	; (80077d8 <MX_USB_DEVICE_Init+0x54>)
 800778e:	f7fe ff26 	bl	80065de <USBD_Init>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007798:	f7f9 faa1 	bl	8000cde <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800779c:	490f      	ldr	r1, [pc, #60]	; (80077dc <MX_USB_DEVICE_Init+0x58>)
 800779e:	480e      	ldr	r0, [pc, #56]	; (80077d8 <MX_USB_DEVICE_Init+0x54>)
 80077a0:	f7fe ff48 	bl	8006634 <USBD_RegisterClass>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80077aa:	f7f9 fa98 	bl	8000cde <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80077ae:	490c      	ldr	r1, [pc, #48]	; (80077e0 <MX_USB_DEVICE_Init+0x5c>)
 80077b0:	4809      	ldr	r0, [pc, #36]	; (80077d8 <MX_USB_DEVICE_Init+0x54>)
 80077b2:	f7fe fe79 	bl	80064a8 <USBD_CDC_RegisterInterface>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80077bc:	f7f9 fa8f 	bl	8000cde <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80077c0:	4805      	ldr	r0, [pc, #20]	; (80077d8 <MX_USB_DEVICE_Init+0x54>)
 80077c2:	f7fe ff50 	bl	8006666 <USBD_Start>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80077cc:	f7f9 fa87 	bl	8000cde <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80077d0:	bf00      	nop
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	200001a4 	.word	0x200001a4
 80077d8:	200003bc 	.word	0x200003bc
 80077dc:	20000090 	.word	0x20000090
 80077e0:	20000194 	.word	0x20000194

080077e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80077e8:	2200      	movs	r2, #0
 80077ea:	4905      	ldr	r1, [pc, #20]	; (8007800 <CDC_Init_FS+0x1c>)
 80077ec:	4805      	ldr	r0, [pc, #20]	; (8007804 <CDC_Init_FS+0x20>)
 80077ee:	f7fe fe71 	bl	80064d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80077f2:	4905      	ldr	r1, [pc, #20]	; (8007808 <CDC_Init_FS+0x24>)
 80077f4:	4803      	ldr	r0, [pc, #12]	; (8007804 <CDC_Init_FS+0x20>)
 80077f6:	f7fe fe86 	bl	8006506 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80077fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	20000e80 	.word	0x20000e80
 8007804:	200003bc 	.word	0x200003bc
 8007808:	20000680 	.word	0x20000680

0800780c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800780c:	b480      	push	{r7}
 800780e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007810:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007812:	4618      	mov	r0, r3
 8007814:	46bd      	mov	sp, r7
 8007816:	bc80      	pop	{r7}
 8007818:	4770      	bx	lr
	...

0800781c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	4603      	mov	r3, r0
 8007824:	6039      	str	r1, [r7, #0]
 8007826:	71fb      	strb	r3, [r7, #7]
 8007828:	4613      	mov	r3, r2
 800782a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800782c:	79fb      	ldrb	r3, [r7, #7]
 800782e:	2b23      	cmp	r3, #35	; 0x23
 8007830:	d84a      	bhi.n	80078c8 <CDC_Control_FS+0xac>
 8007832:	a201      	add	r2, pc, #4	; (adr r2, 8007838 <CDC_Control_FS+0x1c>)
 8007834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007838:	080078c9 	.word	0x080078c9
 800783c:	080078c9 	.word	0x080078c9
 8007840:	080078c9 	.word	0x080078c9
 8007844:	080078c9 	.word	0x080078c9
 8007848:	080078c9 	.word	0x080078c9
 800784c:	080078c9 	.word	0x080078c9
 8007850:	080078c9 	.word	0x080078c9
 8007854:	080078c9 	.word	0x080078c9
 8007858:	080078c9 	.word	0x080078c9
 800785c:	080078c9 	.word	0x080078c9
 8007860:	080078c9 	.word	0x080078c9
 8007864:	080078c9 	.word	0x080078c9
 8007868:	080078c9 	.word	0x080078c9
 800786c:	080078c9 	.word	0x080078c9
 8007870:	080078c9 	.word	0x080078c9
 8007874:	080078c9 	.word	0x080078c9
 8007878:	080078c9 	.word	0x080078c9
 800787c:	080078c9 	.word	0x080078c9
 8007880:	080078c9 	.word	0x080078c9
 8007884:	080078c9 	.word	0x080078c9
 8007888:	080078c9 	.word	0x080078c9
 800788c:	080078c9 	.word	0x080078c9
 8007890:	080078c9 	.word	0x080078c9
 8007894:	080078c9 	.word	0x080078c9
 8007898:	080078c9 	.word	0x080078c9
 800789c:	080078c9 	.word	0x080078c9
 80078a0:	080078c9 	.word	0x080078c9
 80078a4:	080078c9 	.word	0x080078c9
 80078a8:	080078c9 	.word	0x080078c9
 80078ac:	080078c9 	.word	0x080078c9
 80078b0:	080078c9 	.word	0x080078c9
 80078b4:	080078c9 	.word	0x080078c9
 80078b8:	080078c9 	.word	0x080078c9
 80078bc:	080078c9 	.word	0x080078c9
 80078c0:	080078c9 	.word	0x080078c9
 80078c4:	080078c9 	.word	0x080078c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80078c8:	bf00      	nop
  }

  return (USBD_OK);
 80078ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bc80      	pop	{r7}
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop

080078d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //Запись данных из буфера CDC в буфер для функции main
  MsgFromUsb = Buf;
 80078e2:	4a09      	ldr	r2, [pc, #36]	; (8007908 <CDC_Receive_FS+0x30>)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6013      	str	r3, [r2, #0]
  NewMsgBit = 1;
 80078e8:	4b08      	ldr	r3, [pc, #32]	; (800790c <CDC_Receive_FS+0x34>)
 80078ea:	2201      	movs	r2, #1
 80078ec:	701a      	strb	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80078ee:	6879      	ldr	r1, [r7, #4]
 80078f0:	4807      	ldr	r0, [pc, #28]	; (8007910 <CDC_Receive_FS+0x38>)
 80078f2:	f7fe fe08 	bl	8006506 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80078f6:	4806      	ldr	r0, [pc, #24]	; (8007910 <CDC_Receive_FS+0x38>)
 80078f8:	f7fe fe47 	bl	800658a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80078fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	20001680 	.word	0x20001680
 800790c:	2000028d 	.word	0x2000028d
 8007910:	200003bc 	.word	0x200003bc

08007914 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	460b      	mov	r3, r1
 800791e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007920:	2300      	movs	r3, #0
 8007922:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007924:	4b0d      	ldr	r3, [pc, #52]	; (800795c <CDC_Transmit_FS+0x48>)
 8007926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007936:	2301      	movs	r3, #1
 8007938:	e00b      	b.n	8007952 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800793a:	887b      	ldrh	r3, [r7, #2]
 800793c:	461a      	mov	r2, r3
 800793e:	6879      	ldr	r1, [r7, #4]
 8007940:	4806      	ldr	r0, [pc, #24]	; (800795c <CDC_Transmit_FS+0x48>)
 8007942:	f7fe fdc7 	bl	80064d4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007946:	4805      	ldr	r0, [pc, #20]	; (800795c <CDC_Transmit_FS+0x48>)
 8007948:	f7fe fdf0 	bl	800652c <USBD_CDC_TransmitPacket>
 800794c:	4603      	mov	r3, r0
 800794e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007950:	7bfb      	ldrb	r3, [r7, #15]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	200003bc 	.word	0x200003bc

08007960 <USB_Rx_Msg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
//Функция, которая передаст данные с USB в функцию main
uint8_t* USB_Rx_Msg (void) {
 8007960:	b480      	push	{r7}
 8007962:	af00      	add	r7, sp, #0
	if (NewMsgBit) {
 8007964:	4b07      	ldr	r3, [pc, #28]	; (8007984 <USB_Rx_Msg+0x24>)
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d005      	beq.n	8007978 <USB_Rx_Msg+0x18>
		NewMsgBit = 0;
 800796c:	4b05      	ldr	r3, [pc, #20]	; (8007984 <USB_Rx_Msg+0x24>)
 800796e:	2200      	movs	r2, #0
 8007970:	701a      	strb	r2, [r3, #0]
		return MsgFromUsb;
 8007972:	4b05      	ldr	r3, [pc, #20]	; (8007988 <USB_Rx_Msg+0x28>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	e000      	b.n	800797a <USB_Rx_Msg+0x1a>
	}
	else return 0;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	46bd      	mov	sp, r7
 800797e:	bc80      	pop	{r7}
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	2000028d 	.word	0x2000028d
 8007988:	20001680 	.word	0x20001680

0800798c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	4603      	mov	r3, r0
 8007994:	6039      	str	r1, [r7, #0]
 8007996:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	2212      	movs	r2, #18
 800799c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800799e:	4b03      	ldr	r3, [pc, #12]	; (80079ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bc80      	pop	{r7}
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	200001c0 	.word	0x200001c0

080079b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	4603      	mov	r3, r0
 80079b8:	6039      	str	r1, [r7, #0]
 80079ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	2204      	movs	r2, #4
 80079c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80079c2:	4b03      	ldr	r3, [pc, #12]	; (80079d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bc80      	pop	{r7}
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	200001d4 	.word	0x200001d4

080079d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	4603      	mov	r3, r0
 80079dc:	6039      	str	r1, [r7, #0]
 80079de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80079e0:	79fb      	ldrb	r3, [r7, #7]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d105      	bne.n	80079f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80079e6:	683a      	ldr	r2, [r7, #0]
 80079e8:	4907      	ldr	r1, [pc, #28]	; (8007a08 <USBD_FS_ProductStrDescriptor+0x34>)
 80079ea:	4808      	ldr	r0, [pc, #32]	; (8007a0c <USBD_FS_ProductStrDescriptor+0x38>)
 80079ec:	f7ff fdec 	bl	80075c8 <USBD_GetString>
 80079f0:	e004      	b.n	80079fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80079f2:	683a      	ldr	r2, [r7, #0]
 80079f4:	4904      	ldr	r1, [pc, #16]	; (8007a08 <USBD_FS_ProductStrDescriptor+0x34>)
 80079f6:	4805      	ldr	r0, [pc, #20]	; (8007a0c <USBD_FS_ProductStrDescriptor+0x38>)
 80079f8:	f7ff fde6 	bl	80075c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079fc:	4b02      	ldr	r3, [pc, #8]	; (8007a08 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	20001684 	.word	0x20001684
 8007a0c:	080083e4 	.word	0x080083e4

08007a10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	4603      	mov	r3, r0
 8007a18:	6039      	str	r1, [r7, #0]
 8007a1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	4904      	ldr	r1, [pc, #16]	; (8007a30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007a20:	4804      	ldr	r0, [pc, #16]	; (8007a34 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007a22:	f7ff fdd1 	bl	80075c8 <USBD_GetString>
  return USBD_StrDesc;
 8007a26:	4b02      	ldr	r3, [pc, #8]	; (8007a30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20001684 	.word	0x20001684
 8007a34:	080083fc 	.word	0x080083fc

08007a38 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	4603      	mov	r3, r0
 8007a40:	6039      	str	r1, [r7, #0]
 8007a42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	221a      	movs	r2, #26
 8007a48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007a4a:	f000 f843 	bl	8007ad4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007a4e:	4b02      	ldr	r3, [pc, #8]	; (8007a58 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	200001d8 	.word	0x200001d8

08007a5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	4603      	mov	r3, r0
 8007a64:	6039      	str	r1, [r7, #0]
 8007a66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007a68:	79fb      	ldrb	r3, [r7, #7]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d105      	bne.n	8007a7a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	4907      	ldr	r1, [pc, #28]	; (8007a90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a72:	4808      	ldr	r0, [pc, #32]	; (8007a94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a74:	f7ff fda8 	bl	80075c8 <USBD_GetString>
 8007a78:	e004      	b.n	8007a84 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	4904      	ldr	r1, [pc, #16]	; (8007a90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a7e:	4805      	ldr	r0, [pc, #20]	; (8007a94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a80:	f7ff fda2 	bl	80075c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a84:	4b02      	ldr	r3, [pc, #8]	; (8007a90 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	20001684 	.word	0x20001684
 8007a94:	08008410 	.word	0x08008410

08007a98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	6039      	str	r1, [r7, #0]
 8007aa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007aa4:	79fb      	ldrb	r3, [r7, #7]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d105      	bne.n	8007ab6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	4907      	ldr	r1, [pc, #28]	; (8007acc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007aae:	4808      	ldr	r0, [pc, #32]	; (8007ad0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ab0:	f7ff fd8a 	bl	80075c8 <USBD_GetString>
 8007ab4:	e004      	b.n	8007ac0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	4904      	ldr	r1, [pc, #16]	; (8007acc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007aba:	4805      	ldr	r0, [pc, #20]	; (8007ad0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007abc:	f7ff fd84 	bl	80075c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ac0:	4b02      	ldr	r3, [pc, #8]	; (8007acc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20001684 	.word	0x20001684
 8007ad0:	0800841c 	.word	0x0800841c

08007ad4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007ada:	4b0f      	ldr	r3, [pc, #60]	; (8007b18 <Get_SerialNum+0x44>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007ae0:	4b0e      	ldr	r3, [pc, #56]	; (8007b1c <Get_SerialNum+0x48>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007ae6:	4b0e      	ldr	r3, [pc, #56]	; (8007b20 <Get_SerialNum+0x4c>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4413      	add	r3, r2
 8007af2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d009      	beq.n	8007b0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007afa:	2208      	movs	r2, #8
 8007afc:	4909      	ldr	r1, [pc, #36]	; (8007b24 <Get_SerialNum+0x50>)
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f000 f814 	bl	8007b2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b04:	2204      	movs	r2, #4
 8007b06:	4908      	ldr	r1, [pc, #32]	; (8007b28 <Get_SerialNum+0x54>)
 8007b08:	68b8      	ldr	r0, [r7, #8]
 8007b0a:	f000 f80f 	bl	8007b2c <IntToUnicode>
  }
}
 8007b0e:	bf00      	nop
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	1fff7a10 	.word	0x1fff7a10
 8007b1c:	1fff7a14 	.word	0x1fff7a14
 8007b20:	1fff7a18 	.word	0x1fff7a18
 8007b24:	200001da 	.word	0x200001da
 8007b28:	200001ea 	.word	0x200001ea

08007b2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b087      	sub	sp, #28
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	4613      	mov	r3, r2
 8007b38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007b3e:	2300      	movs	r3, #0
 8007b40:	75fb      	strb	r3, [r7, #23]
 8007b42:	e027      	b.n	8007b94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	0f1b      	lsrs	r3, r3, #28
 8007b48:	2b09      	cmp	r3, #9
 8007b4a:	d80b      	bhi.n	8007b64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	0f1b      	lsrs	r3, r3, #28
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	7dfb      	ldrb	r3, [r7, #23]
 8007b54:	005b      	lsls	r3, r3, #1
 8007b56:	4619      	mov	r1, r3
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	440b      	add	r3, r1
 8007b5c:	3230      	adds	r2, #48	; 0x30
 8007b5e:	b2d2      	uxtb	r2, r2
 8007b60:	701a      	strb	r2, [r3, #0]
 8007b62:	e00a      	b.n	8007b7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	0f1b      	lsrs	r3, r3, #28
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	7dfb      	ldrb	r3, [r7, #23]
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	4619      	mov	r1, r3
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	440b      	add	r3, r1
 8007b74:	3237      	adds	r2, #55	; 0x37
 8007b76:	b2d2      	uxtb	r2, r2
 8007b78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	011b      	lsls	r3, r3, #4
 8007b7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007b80:	7dfb      	ldrb	r3, [r7, #23]
 8007b82:	005b      	lsls	r3, r3, #1
 8007b84:	3301      	adds	r3, #1
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	4413      	add	r3, r2
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007b8e:	7dfb      	ldrb	r3, [r7, #23]
 8007b90:	3301      	adds	r3, #1
 8007b92:	75fb      	strb	r3, [r7, #23]
 8007b94:	7dfa      	ldrb	r2, [r7, #23]
 8007b96:	79fb      	ldrb	r3, [r7, #7]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d3d3      	bcc.n	8007b44 <IntToUnicode+0x18>
  }
}
 8007b9c:	bf00      	nop
 8007b9e:	bf00      	nop
 8007ba0:	371c      	adds	r7, #28
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bc80      	pop	{r7}
 8007ba6:	4770      	bx	lr

08007ba8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b08a      	sub	sp, #40	; 0x28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bb0:	f107 0314 	add.w	r3, r7, #20
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	605a      	str	r2, [r3, #4]
 8007bba:	609a      	str	r2, [r3, #8]
 8007bbc:	60da      	str	r2, [r3, #12]
 8007bbe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bc8:	d147      	bne.n	8007c5a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bca:	2300      	movs	r3, #0
 8007bcc:	613b      	str	r3, [r7, #16]
 8007bce:	4b25      	ldr	r3, [pc, #148]	; (8007c64 <HAL_PCD_MspInit+0xbc>)
 8007bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd2:	4a24      	ldr	r2, [pc, #144]	; (8007c64 <HAL_PCD_MspInit+0xbc>)
 8007bd4:	f043 0301 	orr.w	r3, r3, #1
 8007bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8007bda:	4b22      	ldr	r3, [pc, #136]	; (8007c64 <HAL_PCD_MspInit+0xbc>)
 8007bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	613b      	str	r3, [r7, #16]
 8007be4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8007be6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8007bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bec:	2302      	movs	r3, #2
 8007bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007bf8:	230a      	movs	r3, #10
 8007bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bfc:	f107 0314 	add.w	r3, r7, #20
 8007c00:	4619      	mov	r1, r3
 8007c02:	4819      	ldr	r0, [pc, #100]	; (8007c68 <HAL_PCD_MspInit+0xc0>)
 8007c04:	f7fa faba 	bl	800217c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c12:	2300      	movs	r3, #0
 8007c14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007c16:	f107 0314 	add.w	r3, r7, #20
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	4812      	ldr	r0, [pc, #72]	; (8007c68 <HAL_PCD_MspInit+0xc0>)
 8007c1e:	f7fa faad 	bl	800217c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007c22:	4b10      	ldr	r3, [pc, #64]	; (8007c64 <HAL_PCD_MspInit+0xbc>)
 8007c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c26:	4a0f      	ldr	r2, [pc, #60]	; (8007c64 <HAL_PCD_MspInit+0xbc>)
 8007c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c2c:	6353      	str	r3, [r2, #52]	; 0x34
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60fb      	str	r3, [r7, #12]
 8007c32:	4b0c      	ldr	r3, [pc, #48]	; (8007c64 <HAL_PCD_MspInit+0xbc>)
 8007c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c36:	4a0b      	ldr	r2, [pc, #44]	; (8007c64 <HAL_PCD_MspInit+0xbc>)
 8007c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8007c3e:	4b09      	ldr	r3, [pc, #36]	; (8007c64 <HAL_PCD_MspInit+0xbc>)
 8007c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c46:	60fb      	str	r3, [r7, #12]
 8007c48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	2043      	movs	r0, #67	; 0x43
 8007c50:	f7fa fa4f 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007c54:	2043      	movs	r0, #67	; 0x43
 8007c56:	f7fa fa68 	bl	800212a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007c5a:	bf00      	nop
 8007c5c:	3728      	adds	r7, #40	; 0x28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	40023800 	.word	0x40023800
 8007c68:	40020000 	.word	0x40020000

08007c6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007c80:	4619      	mov	r1, r3
 8007c82:	4610      	mov	r0, r2
 8007c84:	f7fe fd37 	bl	80066f6 <USBD_LL_SetupStage>
}
 8007c88:	bf00      	nop
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8007ca2:	78fa      	ldrb	r2, [r7, #3]
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	00db      	lsls	r3, r3, #3
 8007caa:	1a9b      	subs	r3, r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	440b      	add	r3, r1
 8007cb0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	78fb      	ldrb	r3, [r7, #3]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	f7fe fd69 	bl	8006790 <USBD_LL_DataOutStage>
}
 8007cbe:	bf00      	nop
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
 8007cce:	460b      	mov	r3, r1
 8007cd0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8007cd8:	78fa      	ldrb	r2, [r7, #3]
 8007cda:	6879      	ldr	r1, [r7, #4]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	1a9b      	subs	r3, r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	440b      	add	r3, r1
 8007ce6:	3348      	adds	r3, #72	; 0x48
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	78fb      	ldrb	r3, [r7, #3]
 8007cec:	4619      	mov	r1, r3
 8007cee:	f7fe fdc0 	bl	8006872 <USBD_LL_DataInStage>
}
 8007cf2:	bf00      	nop
 8007cf4:	3708      	adds	r7, #8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b082      	sub	sp, #8
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7fe fed0 	bl	8006aae <USBD_LL_SOF>
}
 8007d0e:	bf00      	nop
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b084      	sub	sp, #16
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d102      	bne.n	8007d30 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	73fb      	strb	r3, [r7, #15]
 8007d2e:	e008      	b.n	8007d42 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d102      	bne.n	8007d3e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	73fb      	strb	r3, [r7, #15]
 8007d3c:	e001      	b.n	8007d42 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007d3e:	f7f8 ffce 	bl	8000cde <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007d48:	7bfa      	ldrb	r2, [r7, #15]
 8007d4a:	4611      	mov	r1, r2
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fe fe76 	bl	8006a3e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fe fe2f 	bl	80069bc <USBD_LL_Reset>
}
 8007d5e:	bf00      	nop
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
	...

08007d68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fe fe70 	bl	8006a5c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	6812      	ldr	r2, [r2, #0]
 8007d8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d8e:	f043 0301 	orr.w	r3, r3, #1
 8007d92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a1b      	ldr	r3, [r3, #32]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d005      	beq.n	8007da8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d9c:	4b04      	ldr	r3, [pc, #16]	; (8007db0 <HAL_PCD_SuspendCallback+0x48>)
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	4a03      	ldr	r2, [pc, #12]	; (8007db0 <HAL_PCD_SuspendCallback+0x48>)
 8007da2:	f043 0306 	orr.w	r3, r3, #6
 8007da6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007da8:	bf00      	nop
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	e000ed00 	.word	0xe000ed00

08007db4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fe fe5e 	bl	8006a84 <USBD_LL_Resume>
}
 8007dc8:	bf00      	nop
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007de2:	78fa      	ldrb	r2, [r7, #3]
 8007de4:	4611      	mov	r1, r2
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fe fe87 	bl	8006afa <USBD_LL_IsoOUTIncomplete>
}
 8007dec:	bf00      	nop
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007e06:	78fa      	ldrb	r2, [r7, #3]
 8007e08:	4611      	mov	r1, r2
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fe fe69 	bl	8006ae2 <USBD_LL_IsoINIncomplete>
}
 8007e10:	bf00      	nop
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fe fe73 	bl	8006b12 <USBD_LL_DevConnected>
}
 8007e2c:	bf00      	nop
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fe fe6f 	bl	8006b26 <USBD_LL_DevDisconnected>
}
 8007e48:	bf00      	nop
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d139      	bne.n	8007ed4 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007e60:	4a1f      	ldr	r2, [pc, #124]	; (8007ee0 <USBD_LL_Init+0x90>)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a1d      	ldr	r2, [pc, #116]	; (8007ee0 <USBD_LL_Init+0x90>)
 8007e6c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007e70:	4b1b      	ldr	r3, [pc, #108]	; (8007ee0 <USBD_LL_Init+0x90>)
 8007e72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007e76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007e78:	4b19      	ldr	r3, [pc, #100]	; (8007ee0 <USBD_LL_Init+0x90>)
 8007e7a:	2204      	movs	r2, #4
 8007e7c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007e7e:	4b18      	ldr	r3, [pc, #96]	; (8007ee0 <USBD_LL_Init+0x90>)
 8007e80:	2202      	movs	r2, #2
 8007e82:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007e84:	4b16      	ldr	r3, [pc, #88]	; (8007ee0 <USBD_LL_Init+0x90>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007e8a:	4b15      	ldr	r3, [pc, #84]	; (8007ee0 <USBD_LL_Init+0x90>)
 8007e8c:	2202      	movs	r2, #2
 8007e8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007e90:	4b13      	ldr	r3, [pc, #76]	; (8007ee0 <USBD_LL_Init+0x90>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007e96:	4b12      	ldr	r3, [pc, #72]	; (8007ee0 <USBD_LL_Init+0x90>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007e9c:	4b10      	ldr	r3, [pc, #64]	; (8007ee0 <USBD_LL_Init+0x90>)
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007ea2:	4b0f      	ldr	r3, [pc, #60]	; (8007ee0 <USBD_LL_Init+0x90>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007ea8:	480d      	ldr	r0, [pc, #52]	; (8007ee0 <USBD_LL_Init+0x90>)
 8007eaa:	f7fa fb4f 	bl	800254c <HAL_PCD_Init>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d001      	beq.n	8007eb8 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8007eb4:	f7f8 ff13 	bl	8000cde <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007eb8:	2180      	movs	r1, #128	; 0x80
 8007eba:	4809      	ldr	r0, [pc, #36]	; (8007ee0 <USBD_LL_Init+0x90>)
 8007ebc:	f7fb fc8c 	bl	80037d8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007ec0:	2240      	movs	r2, #64	; 0x40
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	4806      	ldr	r0, [pc, #24]	; (8007ee0 <USBD_LL_Init+0x90>)
 8007ec6:	f7fb fc41 	bl	800374c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007eca:	2280      	movs	r2, #128	; 0x80
 8007ecc:	2101      	movs	r1, #1
 8007ece:	4804      	ldr	r0, [pc, #16]	; (8007ee0 <USBD_LL_Init+0x90>)
 8007ed0:	f7fb fc3c 	bl	800374c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	20001884 	.word	0x20001884

08007ee4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fa fc43 	bl	8002786 <HAL_PCD_Start>
 8007f00:	4603      	mov	r3, r0
 8007f02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f04:	7bfb      	ldrb	r3, [r7, #15]
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 f92e 	bl	8008168 <USBD_Get_USB_Status>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f10:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
 8007f22:	4608      	mov	r0, r1
 8007f24:	4611      	mov	r1, r2
 8007f26:	461a      	mov	r2, r3
 8007f28:	4603      	mov	r3, r0
 8007f2a:	70fb      	strb	r3, [r7, #3]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	70bb      	strb	r3, [r7, #2]
 8007f30:	4613      	mov	r3, r2
 8007f32:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f42:	78bb      	ldrb	r3, [r7, #2]
 8007f44:	883a      	ldrh	r2, [r7, #0]
 8007f46:	78f9      	ldrb	r1, [r7, #3]
 8007f48:	f7fb f808 	bl	8002f5c <HAL_PCD_EP_Open>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 f908 	bl	8008168 <USBD_Get_USB_Status>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	460b      	mov	r3, r1
 8007f70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f80:	78fa      	ldrb	r2, [r7, #3]
 8007f82:	4611      	mov	r1, r2
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7fb f851 	bl	800302c <HAL_PCD_EP_Close>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 f8e9 	bl	8008168 <USBD_Get_USB_Status>
 8007f96:	4603      	mov	r3, r0
 8007f98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fbe:	78fa      	ldrb	r2, [r7, #3]
 8007fc0:	4611      	mov	r1, r2
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fb f928 	bl	8003218 <HAL_PCD_EP_SetStall>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 f8ca 	bl	8008168 <USBD_Get_USB_Status>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b084      	sub	sp, #16
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	460b      	mov	r3, r1
 8007fec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ffc:	78fa      	ldrb	r2, [r7, #3]
 8007ffe:	4611      	mov	r1, r2
 8008000:	4618      	mov	r0, r3
 8008002:	f7fb f96d 	bl	80032e0 <HAL_PCD_EP_ClrStall>
 8008006:	4603      	mov	r3, r0
 8008008:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800800a:	7bfb      	ldrb	r3, [r7, #15]
 800800c:	4618      	mov	r0, r3
 800800e:	f000 f8ab 	bl	8008168 <USBD_Get_USB_Status>
 8008012:	4603      	mov	r3, r0
 8008014:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008016:	7bbb      	ldrb	r3, [r7, #14]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	460b      	mov	r3, r1
 800802a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008032:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008034:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008038:	2b00      	cmp	r3, #0
 800803a:	da0b      	bge.n	8008054 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800803c:	78fb      	ldrb	r3, [r7, #3]
 800803e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008042:	68f9      	ldr	r1, [r7, #12]
 8008044:	4613      	mov	r3, r2
 8008046:	00db      	lsls	r3, r3, #3
 8008048:	1a9b      	subs	r3, r3, r2
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	440b      	add	r3, r1
 800804e:	333e      	adds	r3, #62	; 0x3e
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	e00b      	b.n	800806c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008054:	78fb      	ldrb	r3, [r7, #3]
 8008056:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800805a:	68f9      	ldr	r1, [r7, #12]
 800805c:	4613      	mov	r3, r2
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	1a9b      	subs	r3, r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	440b      	add	r3, r1
 8008066:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800806a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800806c:	4618      	mov	r0, r3
 800806e:	3714      	adds	r7, #20
 8008070:	46bd      	mov	sp, r7
 8008072:	bc80      	pop	{r7}
 8008074:	4770      	bx	lr

08008076 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b084      	sub	sp, #16
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
 800807e:	460b      	mov	r3, r1
 8008080:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008090:	78fa      	ldrb	r2, [r7, #3]
 8008092:	4611      	mov	r1, r2
 8008094:	4618      	mov	r0, r3
 8008096:	f7fa ff3c 	bl	8002f12 <HAL_PCD_SetAddress>
 800809a:	4603      	mov	r3, r0
 800809c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800809e:	7bfb      	ldrb	r3, [r7, #15]
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 f861 	bl	8008168 <USBD_Get_USB_Status>
 80080a6:	4603      	mov	r3, r0
 80080a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b086      	sub	sp, #24
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	607a      	str	r2, [r7, #4]
 80080be:	461a      	mov	r2, r3
 80080c0:	460b      	mov	r3, r1
 80080c2:	72fb      	strb	r3, [r7, #11]
 80080c4:	4613      	mov	r3, r2
 80080c6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c8:	2300      	movs	r3, #0
 80080ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080d6:	893b      	ldrh	r3, [r7, #8]
 80080d8:	7af9      	ldrb	r1, [r7, #11]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	f7fb f852 	bl	8003184 <HAL_PCD_EP_Transmit>
 80080e0:	4603      	mov	r3, r0
 80080e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080e4:	7dfb      	ldrb	r3, [r7, #23]
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 f83e 	bl	8008168 <USBD_Get_USB_Status>
 80080ec:	4603      	mov	r3, r0
 80080ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b086      	sub	sp, #24
 80080fe:	af00      	add	r7, sp, #0
 8008100:	60f8      	str	r0, [r7, #12]
 8008102:	607a      	str	r2, [r7, #4]
 8008104:	461a      	mov	r2, r3
 8008106:	460b      	mov	r3, r1
 8008108:	72fb      	strb	r3, [r7, #11]
 800810a:	4613      	mov	r3, r2
 800810c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008112:	2300      	movs	r3, #0
 8008114:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800811c:	893b      	ldrh	r3, [r7, #8]
 800811e:	7af9      	ldrb	r1, [r7, #11]
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	f7fa ffcd 	bl	80030c0 <HAL_PCD_EP_Receive>
 8008126:	4603      	mov	r3, r0
 8008128:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800812a:	7dfb      	ldrb	r3, [r7, #23]
 800812c:	4618      	mov	r0, r3
 800812e:	f000 f81b 	bl	8008168 <USBD_Get_USB_Status>
 8008132:	4603      	mov	r3, r0
 8008134:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008136:	7dbb      	ldrb	r3, [r7, #22]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3718      	adds	r7, #24
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	460b      	mov	r3, r1
 800814a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008152:	78fa      	ldrb	r2, [r7, #3]
 8008154:	4611      	mov	r1, r2
 8008156:	4618      	mov	r0, r3
 8008158:	f7fa fffd 	bl	8003156 <HAL_PCD_EP_GetRxCount>
 800815c:	4603      	mov	r3, r0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
	...

08008168 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	4603      	mov	r3, r0
 8008170:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008176:	79fb      	ldrb	r3, [r7, #7]
 8008178:	2b03      	cmp	r3, #3
 800817a:	d817      	bhi.n	80081ac <USBD_Get_USB_Status+0x44>
 800817c:	a201      	add	r2, pc, #4	; (adr r2, 8008184 <USBD_Get_USB_Status+0x1c>)
 800817e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008182:	bf00      	nop
 8008184:	08008195 	.word	0x08008195
 8008188:	0800819b 	.word	0x0800819b
 800818c:	080081a1 	.word	0x080081a1
 8008190:	080081a7 	.word	0x080081a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008194:	2300      	movs	r3, #0
 8008196:	73fb      	strb	r3, [r7, #15]
    break;
 8008198:	e00b      	b.n	80081b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800819a:	2302      	movs	r3, #2
 800819c:	73fb      	strb	r3, [r7, #15]
    break;
 800819e:	e008      	b.n	80081b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081a0:	2301      	movs	r3, #1
 80081a2:	73fb      	strb	r3, [r7, #15]
    break;
 80081a4:	e005      	b.n	80081b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081a6:	2302      	movs	r3, #2
 80081a8:	73fb      	strb	r3, [r7, #15]
    break;
 80081aa:	e002      	b.n	80081b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80081ac:	2302      	movs	r3, #2
 80081ae:	73fb      	strb	r3, [r7, #15]
    break;
 80081b0:	bf00      	nop
  }
  return usb_status;
 80081b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bc80      	pop	{r7}
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop

080081c0 <__errno>:
 80081c0:	4b01      	ldr	r3, [pc, #4]	; (80081c8 <__errno+0x8>)
 80081c2:	6818      	ldr	r0, [r3, #0]
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	200001f4 	.word	0x200001f4

080081cc <__libc_init_array>:
 80081cc:	b570      	push	{r4, r5, r6, lr}
 80081ce:	2600      	movs	r6, #0
 80081d0:	4d0c      	ldr	r5, [pc, #48]	; (8008204 <__libc_init_array+0x38>)
 80081d2:	4c0d      	ldr	r4, [pc, #52]	; (8008208 <__libc_init_array+0x3c>)
 80081d4:	1b64      	subs	r4, r4, r5
 80081d6:	10a4      	asrs	r4, r4, #2
 80081d8:	42a6      	cmp	r6, r4
 80081da:	d109      	bne.n	80081f0 <__libc_init_array+0x24>
 80081dc:	f000 f8f6 	bl	80083cc <_init>
 80081e0:	2600      	movs	r6, #0
 80081e2:	4d0a      	ldr	r5, [pc, #40]	; (800820c <__libc_init_array+0x40>)
 80081e4:	4c0a      	ldr	r4, [pc, #40]	; (8008210 <__libc_init_array+0x44>)
 80081e6:	1b64      	subs	r4, r4, r5
 80081e8:	10a4      	asrs	r4, r4, #2
 80081ea:	42a6      	cmp	r6, r4
 80081ec:	d105      	bne.n	80081fa <__libc_init_array+0x2e>
 80081ee:	bd70      	pop	{r4, r5, r6, pc}
 80081f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80081f4:	4798      	blx	r3
 80081f6:	3601      	adds	r6, #1
 80081f8:	e7ee      	b.n	80081d8 <__libc_init_array+0xc>
 80081fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80081fe:	4798      	blx	r3
 8008200:	3601      	adds	r6, #1
 8008202:	e7f2      	b.n	80081ea <__libc_init_array+0x1e>
 8008204:	08008444 	.word	0x08008444
 8008208:	08008444 	.word	0x08008444
 800820c:	08008444 	.word	0x08008444
 8008210:	08008448 	.word	0x08008448

08008214 <malloc>:
 8008214:	4b02      	ldr	r3, [pc, #8]	; (8008220 <malloc+0xc>)
 8008216:	4601      	mov	r1, r0
 8008218:	6818      	ldr	r0, [r3, #0]
 800821a:	f000 b85f 	b.w	80082dc <_malloc_r>
 800821e:	bf00      	nop
 8008220:	200001f4 	.word	0x200001f4

08008224 <free>:
 8008224:	4b02      	ldr	r3, [pc, #8]	; (8008230 <free+0xc>)
 8008226:	4601      	mov	r1, r0
 8008228:	6818      	ldr	r0, [r3, #0]
 800822a:	f000 b80b 	b.w	8008244 <_free_r>
 800822e:	bf00      	nop
 8008230:	200001f4 	.word	0x200001f4

08008234 <memset>:
 8008234:	4603      	mov	r3, r0
 8008236:	4402      	add	r2, r0
 8008238:	4293      	cmp	r3, r2
 800823a:	d100      	bne.n	800823e <memset+0xa>
 800823c:	4770      	bx	lr
 800823e:	f803 1b01 	strb.w	r1, [r3], #1
 8008242:	e7f9      	b.n	8008238 <memset+0x4>

08008244 <_free_r>:
 8008244:	b538      	push	{r3, r4, r5, lr}
 8008246:	4605      	mov	r5, r0
 8008248:	2900      	cmp	r1, #0
 800824a:	d043      	beq.n	80082d4 <_free_r+0x90>
 800824c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008250:	1f0c      	subs	r4, r1, #4
 8008252:	2b00      	cmp	r3, #0
 8008254:	bfb8      	it	lt
 8008256:	18e4      	addlt	r4, r4, r3
 8008258:	f000 f8aa 	bl	80083b0 <__malloc_lock>
 800825c:	4a1e      	ldr	r2, [pc, #120]	; (80082d8 <_free_r+0x94>)
 800825e:	6813      	ldr	r3, [r2, #0]
 8008260:	4610      	mov	r0, r2
 8008262:	b933      	cbnz	r3, 8008272 <_free_r+0x2e>
 8008264:	6063      	str	r3, [r4, #4]
 8008266:	6014      	str	r4, [r2, #0]
 8008268:	4628      	mov	r0, r5
 800826a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800826e:	f000 b8a5 	b.w	80083bc <__malloc_unlock>
 8008272:	42a3      	cmp	r3, r4
 8008274:	d90a      	bls.n	800828c <_free_r+0x48>
 8008276:	6821      	ldr	r1, [r4, #0]
 8008278:	1862      	adds	r2, r4, r1
 800827a:	4293      	cmp	r3, r2
 800827c:	bf01      	itttt	eq
 800827e:	681a      	ldreq	r2, [r3, #0]
 8008280:	685b      	ldreq	r3, [r3, #4]
 8008282:	1852      	addeq	r2, r2, r1
 8008284:	6022      	streq	r2, [r4, #0]
 8008286:	6063      	str	r3, [r4, #4]
 8008288:	6004      	str	r4, [r0, #0]
 800828a:	e7ed      	b.n	8008268 <_free_r+0x24>
 800828c:	461a      	mov	r2, r3
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	b10b      	cbz	r3, 8008296 <_free_r+0x52>
 8008292:	42a3      	cmp	r3, r4
 8008294:	d9fa      	bls.n	800828c <_free_r+0x48>
 8008296:	6811      	ldr	r1, [r2, #0]
 8008298:	1850      	adds	r0, r2, r1
 800829a:	42a0      	cmp	r0, r4
 800829c:	d10b      	bne.n	80082b6 <_free_r+0x72>
 800829e:	6820      	ldr	r0, [r4, #0]
 80082a0:	4401      	add	r1, r0
 80082a2:	1850      	adds	r0, r2, r1
 80082a4:	4283      	cmp	r3, r0
 80082a6:	6011      	str	r1, [r2, #0]
 80082a8:	d1de      	bne.n	8008268 <_free_r+0x24>
 80082aa:	6818      	ldr	r0, [r3, #0]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	4401      	add	r1, r0
 80082b0:	6011      	str	r1, [r2, #0]
 80082b2:	6053      	str	r3, [r2, #4]
 80082b4:	e7d8      	b.n	8008268 <_free_r+0x24>
 80082b6:	d902      	bls.n	80082be <_free_r+0x7a>
 80082b8:	230c      	movs	r3, #12
 80082ba:	602b      	str	r3, [r5, #0]
 80082bc:	e7d4      	b.n	8008268 <_free_r+0x24>
 80082be:	6820      	ldr	r0, [r4, #0]
 80082c0:	1821      	adds	r1, r4, r0
 80082c2:	428b      	cmp	r3, r1
 80082c4:	bf01      	itttt	eq
 80082c6:	6819      	ldreq	r1, [r3, #0]
 80082c8:	685b      	ldreq	r3, [r3, #4]
 80082ca:	1809      	addeq	r1, r1, r0
 80082cc:	6021      	streq	r1, [r4, #0]
 80082ce:	6063      	str	r3, [r4, #4]
 80082d0:	6054      	str	r4, [r2, #4]
 80082d2:	e7c9      	b.n	8008268 <_free_r+0x24>
 80082d4:	bd38      	pop	{r3, r4, r5, pc}
 80082d6:	bf00      	nop
 80082d8:	20000290 	.word	0x20000290

080082dc <_malloc_r>:
 80082dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082de:	1ccd      	adds	r5, r1, #3
 80082e0:	f025 0503 	bic.w	r5, r5, #3
 80082e4:	3508      	adds	r5, #8
 80082e6:	2d0c      	cmp	r5, #12
 80082e8:	bf38      	it	cc
 80082ea:	250c      	movcc	r5, #12
 80082ec:	2d00      	cmp	r5, #0
 80082ee:	4606      	mov	r6, r0
 80082f0:	db01      	blt.n	80082f6 <_malloc_r+0x1a>
 80082f2:	42a9      	cmp	r1, r5
 80082f4:	d903      	bls.n	80082fe <_malloc_r+0x22>
 80082f6:	230c      	movs	r3, #12
 80082f8:	6033      	str	r3, [r6, #0]
 80082fa:	2000      	movs	r0, #0
 80082fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082fe:	f000 f857 	bl	80083b0 <__malloc_lock>
 8008302:	4921      	ldr	r1, [pc, #132]	; (8008388 <_malloc_r+0xac>)
 8008304:	680a      	ldr	r2, [r1, #0]
 8008306:	4614      	mov	r4, r2
 8008308:	b99c      	cbnz	r4, 8008332 <_malloc_r+0x56>
 800830a:	4f20      	ldr	r7, [pc, #128]	; (800838c <_malloc_r+0xb0>)
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	b923      	cbnz	r3, 800831a <_malloc_r+0x3e>
 8008310:	4621      	mov	r1, r4
 8008312:	4630      	mov	r0, r6
 8008314:	f000 f83c 	bl	8008390 <_sbrk_r>
 8008318:	6038      	str	r0, [r7, #0]
 800831a:	4629      	mov	r1, r5
 800831c:	4630      	mov	r0, r6
 800831e:	f000 f837 	bl	8008390 <_sbrk_r>
 8008322:	1c43      	adds	r3, r0, #1
 8008324:	d123      	bne.n	800836e <_malloc_r+0x92>
 8008326:	230c      	movs	r3, #12
 8008328:	4630      	mov	r0, r6
 800832a:	6033      	str	r3, [r6, #0]
 800832c:	f000 f846 	bl	80083bc <__malloc_unlock>
 8008330:	e7e3      	b.n	80082fa <_malloc_r+0x1e>
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	1b5b      	subs	r3, r3, r5
 8008336:	d417      	bmi.n	8008368 <_malloc_r+0x8c>
 8008338:	2b0b      	cmp	r3, #11
 800833a:	d903      	bls.n	8008344 <_malloc_r+0x68>
 800833c:	6023      	str	r3, [r4, #0]
 800833e:	441c      	add	r4, r3
 8008340:	6025      	str	r5, [r4, #0]
 8008342:	e004      	b.n	800834e <_malloc_r+0x72>
 8008344:	6863      	ldr	r3, [r4, #4]
 8008346:	42a2      	cmp	r2, r4
 8008348:	bf0c      	ite	eq
 800834a:	600b      	streq	r3, [r1, #0]
 800834c:	6053      	strne	r3, [r2, #4]
 800834e:	4630      	mov	r0, r6
 8008350:	f000 f834 	bl	80083bc <__malloc_unlock>
 8008354:	f104 000b 	add.w	r0, r4, #11
 8008358:	1d23      	adds	r3, r4, #4
 800835a:	f020 0007 	bic.w	r0, r0, #7
 800835e:	1ac2      	subs	r2, r0, r3
 8008360:	d0cc      	beq.n	80082fc <_malloc_r+0x20>
 8008362:	1a1b      	subs	r3, r3, r0
 8008364:	50a3      	str	r3, [r4, r2]
 8008366:	e7c9      	b.n	80082fc <_malloc_r+0x20>
 8008368:	4622      	mov	r2, r4
 800836a:	6864      	ldr	r4, [r4, #4]
 800836c:	e7cc      	b.n	8008308 <_malloc_r+0x2c>
 800836e:	1cc4      	adds	r4, r0, #3
 8008370:	f024 0403 	bic.w	r4, r4, #3
 8008374:	42a0      	cmp	r0, r4
 8008376:	d0e3      	beq.n	8008340 <_malloc_r+0x64>
 8008378:	1a21      	subs	r1, r4, r0
 800837a:	4630      	mov	r0, r6
 800837c:	f000 f808 	bl	8008390 <_sbrk_r>
 8008380:	3001      	adds	r0, #1
 8008382:	d1dd      	bne.n	8008340 <_malloc_r+0x64>
 8008384:	e7cf      	b.n	8008326 <_malloc_r+0x4a>
 8008386:	bf00      	nop
 8008388:	20000290 	.word	0x20000290
 800838c:	20000294 	.word	0x20000294

08008390 <_sbrk_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	2300      	movs	r3, #0
 8008394:	4d05      	ldr	r5, [pc, #20]	; (80083ac <_sbrk_r+0x1c>)
 8008396:	4604      	mov	r4, r0
 8008398:	4608      	mov	r0, r1
 800839a:	602b      	str	r3, [r5, #0]
 800839c:	f7f8 fd22 	bl	8000de4 <_sbrk>
 80083a0:	1c43      	adds	r3, r0, #1
 80083a2:	d102      	bne.n	80083aa <_sbrk_r+0x1a>
 80083a4:	682b      	ldr	r3, [r5, #0]
 80083a6:	b103      	cbz	r3, 80083aa <_sbrk_r+0x1a>
 80083a8:	6023      	str	r3, [r4, #0]
 80083aa:	bd38      	pop	{r3, r4, r5, pc}
 80083ac:	20001c84 	.word	0x20001c84

080083b0 <__malloc_lock>:
 80083b0:	4801      	ldr	r0, [pc, #4]	; (80083b8 <__malloc_lock+0x8>)
 80083b2:	f000 b809 	b.w	80083c8 <__retarget_lock_acquire_recursive>
 80083b6:	bf00      	nop
 80083b8:	20001c8c 	.word	0x20001c8c

080083bc <__malloc_unlock>:
 80083bc:	4801      	ldr	r0, [pc, #4]	; (80083c4 <__malloc_unlock+0x8>)
 80083be:	f000 b804 	b.w	80083ca <__retarget_lock_release_recursive>
 80083c2:	bf00      	nop
 80083c4:	20001c8c 	.word	0x20001c8c

080083c8 <__retarget_lock_acquire_recursive>:
 80083c8:	4770      	bx	lr

080083ca <__retarget_lock_release_recursive>:
 80083ca:	4770      	bx	lr

080083cc <_init>:
 80083cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ce:	bf00      	nop
 80083d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083d2:	bc08      	pop	{r3}
 80083d4:	469e      	mov	lr, r3
 80083d6:	4770      	bx	lr

080083d8 <_fini>:
 80083d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083da:	bf00      	nop
 80083dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083de:	bc08      	pop	{r3}
 80083e0:	469e      	mov	lr, r3
 80083e2:	4770      	bx	lr
